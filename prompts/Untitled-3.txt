Please optimize for me this code .
And Help Me Use Best Practices for login and forgot and register.
if user not logged in, force user to login.
if already login then he can login or forgot password or register.
i want login in the mean route http://localhost:3001/en/
Please Use best practices and use standard logic to do that, i use next js code.


============================== app/[locale]/(protected)/layout.tsx ============================>
import LayoutProvider from "@/providers/layout.provider";
import LayoutContentProvider from "@/providers/content.provider";
import NetworkSidebar from "@/components/sidebar";
import NetworkFooter from "@/components/footer";
import ThemeCustomize from "@/components/customizer";
import NetworkHeader from "@/components/partials/header";
import { ProtectedRoute } from "@/components/auth/protected-route";

interface LayoutProps {
  children: React.ReactNode;
  params: { locale: string };
}

const ProtectedLayout = ({ children, params }: LayoutProps) => {
  return (
    <ProtectedRoute>
      <LayoutProvider>
        <ThemeCustomize />
        <NetworkHeader />
        <NetworkSidebar />
        <LayoutContentProvider>{children}</LayoutContentProvider>
        <NetworkFooter />
      </LayoutProvider>
    </ProtectedRoute>
  );
};

export default ProtectedLayout;

============================== app/[locale]/page.tsx ============================>
import { Link } from "@/i18n/routing";
import LoginForm from "@/components/auth/login-form";
import Image from "next/image";
import Social from "@/components/auth/social";
import Copyright from "@/components/auth/copyright";
import Logo from "@/components/auth/logo";

const Login = ({ params: { locale } }: { params: { locale: string } }) => {
  return (
    <>
      <div className="flex w-full items-center overflow-hidden min-h-dvh h-dvh basis-full">
        <div className="overflow-y-auto flex flex-wrap w-full h-dvh">
          <div className="lg:block hidden flex-1 overflow-hidden text-[40px] leading-[48px] text-default-600 relative z-1 bg-default-50">
            <div className="max-w-[520px] pt-20 ps-20 ">
              <Link href="/" className="mb-6 inline-block">
                <Logo />
              </Link>
              <h4>
                Unlock your Project
                <span className="text-default-800 font-bold ms-2">
                  performance
                </span>
              </h4>
            </div>
            <div className="absolute left-0 2xl:bottom-[-160px] bottom-[-130px] h-full w-full z-[-1]">
              <Image
                src="/images/auth/ils1.svg"
                alt=""
                priority
                width={300}
                height={300}
                className="mb-10 w-full h-full"
              />
            </div>
          </div>
          <div className="flex-1 relative">
            <div className=" h-full flex flex-col  dark:bg-default-100 bg-white">
              <div className="max-w-[524px] md:px-[42px] md:py-[44px] p-7  mx-auto w-full text-2xl text-default-900  mb-3 h-full flex flex-col justify-center">
                <div className="flex justify-center items-center text-center mb-6 lg:hidden ">
                  <Link href="/">
                    <Logo />
                  </Link>
                </div>
                <div className="text-center 2xl:mb-10 mb-4">
                  <h4 className="font-medium">Sign in</h4>
                  <div className="text-default-500 text-base">
                    Sign in to your account to start using Network
                  </div>
                </div>
                <LoginForm />
                <div className="relative border-b-[#9AA2AF] border-opacity-[16%] border-b pt-6">
                  <div className="absolute inline-block bg-default-50 dark:bg-default-100 left-1/2 top-1/2 transform -translate-x-1/2 px-4 min-w-max text-sm text-default-500 font-normal">
                    Or continue with
                  </div>
                </div>
                <div className="max-w-[242px] mx-auto mt-8 w-full">
                  <Social locale={locale} />
                </div>
                <div className="md:max-w-[345px] mx-auto font-normal text-default-500 mt-12 uppercase text-sm">
                  Donâ€™t have an account?{" "}
                  <Link
                    href="/auth/register"
                    className="text-default-900  font-medium hover:underline"
                  >
                    Sign up
                  </Link>
                </div>
              </div>
              <div className="text-xs font-normal text-default-500  z-999 pb-10 text-center">
                <Copyright />
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default Login;

============================== app/[locale]/layout.tsx ============================>
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@/providers/theme-provider";
import MountedProvider from "@/providers/mounted.provider";
import { Toaster } from "@/components/ui/toaster";
import { Toaster as SonnerToaster } from "@/components/ui/sonner";

const inter = Inter({ subsets: ["latin"] });

// language
import { getLangDir } from "rtl-detect";
import { NextIntlClientProvider } from "next-intl";
import { getMessages } from "next-intl/server";
import DirectionProvider from "@/providers/direction-provider";
import AuthProvider from "@/providers/auth.provider";

export const metadata: Metadata = {
  title: "Network - Shipping Management Platform",
  description: "Multi-tenant shipping management platform built with Network",
};

export default async function RootLayout({
  children,
  params: { locale },
}: Readonly<{
  children: React.ReactNode;
  params: { locale: string };
}>) {
  const messages = await getMessages();
  const direction = getLangDir(locale);

  return (
    <html lang={locale} dir={direction}>
      <body className={`${inter.className} network-app `}>
        <NextIntlClientProvider messages={messages} locale={locale}>
          <AuthProvider>
            <ThemeProvider
              attribute="class"
              defaultTheme="system"
              enableSystem
              disableTransitionOnChange
            >
              <MountedProvider>
                <DirectionProvider direction={direction}>
                  {children}
                </DirectionProvider>
              </MountedProvider>
              <Toaster />
              <SonnerToaster />
            </ThemeProvider>
          </AuthProvider>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}

============================== app/[locale]/auth/login/page.tsx ============================>
"use client";

import { useEffect } from "react";
import { Link } from "@/i18n/routing";
import LoginForm from "@/components/auth/login-form";
import Image from "next/image";
import Social from "@/components/auth/social";
import Copyright from "@/components/auth/copyright";
import Logo from "@/components/auth/logo";
import { useAuthStore } from "@/lib/stores/auth.store";
import { useRouter } from "next/navigation";

interface LoginPageProps {
  params: { locale: string };
}

const LoginPage = ({ params: { locale } }: LoginPageProps) => {
  const { isAuthenticated, isLoading } = useAuthStore();
  const router = useRouter();

  // Redirect to dashboard if already authenticated
  useEffect(() => {
    if (isAuthenticated && !isLoading) {
      const urlParams = new URLSearchParams(window.location.search);
      const redirectTo = urlParams.get("redirect") || "/dashboard";
      router.push(redirectTo);
    }
  }, [isAuthenticated, isLoading, router]);

  // Show loading while checking auth status
  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading...</p>
        </div>
      </div>
    );
  }

  if (isAuthenticated) {
    return null;
  }

  return (
    <div className="flex w-full items-center overflow-hidden min-h-dvh h-dvh basis-full">
      <div className="overflow-y-auto flex flex-wrap w-full h-dvh">
        {/* Left Side - Branding */}
        <div className="lg:block hidden flex-1 overflow-hidden text-[40px] leading-[48px] text-default-600 relative z-1 bg-default-50">
          <div className="max-w-[520px] pt-20 ps-20">
            <Link href="/" className="mb-6 inline-block">
              <Logo />
            </Link>
            <h4>
              Unlock your Project
              <span className="text-default-800 font-bold ms-2">
                performance
              </span>
            </h4>
          </div>
          <div className="absolute left-0 2xl:bottom-[-160px] bottom-[-130px] h-full w-full z-[-1]">
            <Image
              src="/images/auth/ils1.svg"
              alt="Network Illustration"
              priority
              width={300}
              height={300}
              className="mb-10 w-full h-full"
            />
          </div>
        </div>

        {/* Right Side - Login Form */}
        <div className="flex-1 relative">
          <div className="h-full flex flex-col dark:bg-default-100 bg-white">
            <div className="max-w-[524px] md:px-[42px] md:py-[44px] p-7 mx-auto w-full text-2xl text-default-900 mb-3 h-full flex flex-col justify-center">
              {/* Mobile Logo */}
              <div className="flex justify-center items-center text-center mb-6 lg:hidden">
                <Link href="/">
                  <Logo />
                </Link>
              </div>

              {/* Header */}
              <div className="text-center 2xl:mb-10 mb-4">
                <h4 className="font-medium">Sign in</h4>
                <div className="text-default-500 text-base">
                  Sign in to your account to start using Network
                </div>
              </div>

              {/* Login Form */}
              <LoginForm />

              {/* Social Login Divider */}
              <div className="relative border-b-[#9AA2AF] border-opacity-[16%] border-b pt-6">
                <div className="absolute inline-block bg-default-50 dark:bg-default-100 left-1/2 top-1/2 transform -translate-x-1/2 px-4 min-w-max text-sm text-default-500 font-normal">
                  Or continue with
                </div>
              </div>

              {/* Social Login */}
              <div className="max-w-[242px] mx-auto mt-8 w-full">
                <Social locale={locale} />
              </div>

              {/* Sign Up Link */}
              <div className="md:max-w-[345px] mx-auto font-normal text-default-500 mt-12 uppercase text-sm">
                Don't have an account?{" "}
                <Link
                  href="/auth/register"
                  className="text-default-900 font-medium hover:underline"
                >
                  Sign up
                </Link>
              </div>
            </div>

            {/* Footer */}
            <div className="text-xs font-normal text-default-500 z-999 pb-10 text-center">
              <Copyright />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginPage;


============================== app/[locale]/auth/register/page.tsx ============================>
"use client";

import { useEffect } from "react";
import { useAuthStore } from "@/lib/stores/auth.store";
import { useRouter } from "next/navigation";
import { Link } from "@/i18n/routing";
import RegForm from "@/components/auth/reg-form";
import Image from "next/image";
import Copyright from "@/components/auth/copyright";
import Logo from "@/components/auth/logo";
import Social from "@/components/auth/social";

interface RegisterPageProps {
  params: { locale: string };
}

const RegisterPage = ({ params: { locale } }: RegisterPageProps) => {
  const { isAuthenticated, isLoading, checkAuth } = useAuthStore();
  const router = useRouter();

  // Initialize auth check
  useEffect(() => {
    checkAuth();
  }, [checkAuth]);

  // Redirect to dashboard if authenticated
  useEffect(() => {
    if (isAuthenticated && !isLoading) {
      router.push("/dashboard");
    }
  }, [isAuthenticated, isLoading, router]);

  // Show loading during auth check
  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading...</p>
        </div>
      </div>
    );
  }

  // Don't render if already authenticated
  if (isAuthenticated) {
    return null;
  }

  return (
    <div className="flex w-full items-center overflow-hidden min-h-dvh h-dvh basis-full">
      <div className="overflow-y-auto flex flex-wrap w-full h-dvh">
        <div className="lg:block hidden flex-1 overflow-hidden text-[40px] leading-[48px] text-default-600 relative z-1 bg-default-50">
          <div className="max-w-[520px] pt-20 ps-20">
            <Link href="/" className="mb-6 inline-block">
              <Logo />
            </Link>
            <h4>
              Unlock your Project
              <span className="text-default-800 font-bold ms-2">
                performance
              </span>
            </h4>
          </div>
          <div className="absolute left-0 bottom-[-130px] h-full w-full z-[-1]">
            <Image
              src="/images/auth/ils1.svg"
              alt=""
              priority
              width={300}
              height={300}
              className="mb-10 w-full h-full"
            />
          </div>
        </div>
        <div className="flex-1 relative dark:bg-default-100 bg-white">
          <div className="h-full flex flex-col">
            <div className="max-w-[524px] md:px-[42px] md:py-[44px] p-7 mx-auto w-full text-2xl text-default-900 mb-3 h-full flex flex-col justify-center">
              <div className="flex justify-center items-center text-center mb-6 lg:hidden">
                <Link href="/">
                  <Logo />
                </Link>
              </div>
              <div className="text-center 2xl:mb-10 mb-5">
                <h4 className="font-medium">Sign up</h4>
                <div className="text-default-500 text-base">
                  Create an account to start using Network
                </div>
              </div>
              <RegForm />
              <div className="relative border-b-[#9AA2AF] border-opacity-[16%] border-b pt-6">
                <div className="absolute inline-block bg-default-50 dark:bg-default-100 left-1/2 top-1/2 transform -translate-x-1/2 px-4 min-w-max text-sm text-default-500 font-normal">
                  Or continue with
                </div>
              </div>
              <div className="max-w-[242px] mx-auto mt-8 w-full">
                <Social locale={locale} />
              </div>
              <div className="max-w-[225px] mx-auto font-normal text-default-500 2xl:mt-12 mt-6 uppercase text-sm">
                Already registered?{" "}
                <Link
                  href="/"
                  className="text-default-900 font-medium hover:underline"
                >
                  Sign In
                </Link>
              </div>
            </div>
            <div className="text-xs font-normal text-default-500 z-999 pb-10 text-center">
              <Copyright />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RegisterPage;


============================== app/[locale]/auth/forgot-password/page.tsx ============================>
"use client";

import { useEffect } from "react";
import { useAuthStore } from "@/lib/stores/auth.store";
import { useRouter } from "next/navigation";
import { Link } from "@/i18n/routing";
import ForgotPass from "@/components/auth/forgot-pass";
import Image from "next/image";
import Copyright from "@/components/auth/copyright";
import Logo from "@/components/auth/logo";

interface ForgotPasswordPageProps {
  params: { locale: string };
}

const ForgotPasswordPage = ({
  params: { locale },
}: ForgotPasswordPageProps) => {
  const { isAuthenticated, isLoading, checkAuth } = useAuthStore();
  const router = useRouter();

  // Initialize auth check
  useEffect(() => {
    checkAuth();
  }, [checkAuth]);

  // Redirect to dashboard if authenticated
  useEffect(() => {
    if (isAuthenticated && !isLoading) {
      router.push("/dashboard");
    }
  }, [isAuthenticated, isLoading, router]);

  // Show loading during auth check
  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading...</p>
        </div>
      </div>
    );
  }

  // Don't render if already authenticated
  if (isAuthenticated) {
    return null;
  }

  return (
    <div className="flex w-full items-center overflow-hidden min-h-dvh h-dvh basis-full">
      <div className="overflow-y-auto flex flex-wrap w-full h-dvh">
        <div className="lg:block hidden flex-1 overflow-hidden text-[40px] leading-[48px] text-default-600 relative z-1 bg-default-50">
          <div className="max-w-[520px] pt-20 ps-20">
            <Link href="/" className="mb-6 inline-block">
              <Logo />
            </Link>
            <h4>
              Unlock your Project{" "}
              <span className="text-default-800 font-bold ms-2">
                performance
              </span>
            </h4>
          </div>
          <div className="absolute left-0 bottom-[-130px] h-full w-full z-[-1]">
            <Image
              width={300}
              height={300}
              src="/images/auth/ils1.svg"
              priority
              alt=""
              className="h-full w-full object-contain"
            />
          </div>
        </div>
        <div className="flex-1 relative dark:bg-default-100 bg-white">
          <div className="h-full flex flex-col">
            <div className="max-w-[524px] mx-auto w-full md:px-[42px] md:py-[44px] p-7 text-2xl text-default-900 mb-3 flex flex-col justify-center h-full">
              <div className="flex justify-center items-center text-center mb-6 lg:hidden">
                <Link href="/">
                  <Logo />
                </Link>
              </div>
              <div className="text-center 2xl:mb-10 mb-5">
                <h4 className="font-medium mb-4">Forgot Your Password?</h4>
                <div className="text-default-500 text-base">
                  Reset Password with Network.
                </div>
              </div>
              <div className="font-normal text-base text-default-500 text-center px-2 bg-default-100 rounded py-3 mb-4 mt-10">
                Enter your Email and instructions will be sent to you!
              </div>

              <ForgotPass />
              <div className="md:max-w-[345px] mx-auto font-normal text-default-500 2xl:mt-12 mt-8 uppercase text-sm">
                Forget It,{" "}
                <Link
                  href="/"
                  className="text-default-900 font-medium hover:underline px-2"
                >
                  Send me Back
                </Link>
                to The Sign In
              </div>
            </div>
            <div className="text-xs font-normal text-default-500 z-[999] pb-10 text-center">
              <Copyright />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ForgotPasswordPage;

============================== components/auth/login-form.tsx ============================>
"use client";

import React from "react";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Link } from "@/i18n/routing";
import { Icon } from "@/components/ui/icon";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { cn } from "@/lib/utils/ui.utils";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";
import { useRouter } from "next/navigation";
import { useAuthStore } from "@/lib/stores/auth.store";
import { getTenantFromUrl } from "@/lib/utils/tenant.utils";
import { useEffect } from "react";

const schema = z.object({
  email: z.string().email({ message: "Your email is invalid." }),
  password: z
    .string()
    .min(4, { message: "Password must be at least 4 characters." }),
});

type LoginFormData = z.infer<typeof schema>;

const LoginForm = () => {
  const [isPending, startTransition] = React.useTransition();
  const router = useRouter();
  const [passwordType, setPasswordType] = React.useState("password");
  const [rememberMe, setRememberMe] = React.useState(false);

  const {
    login,
    isAuthenticated,
    error: authError,
    clearError,
  } = useAuthStore();

  const tenantId = getTenantFromUrl();

  const togglePasswordType = () => {
    setPasswordType((prev) => (prev === "password" ? "text" : "password"));
  };

  const {
    register,
    handleSubmit,
    formState: { errors },
    setError,
  } = useForm<LoginFormData>({
    resolver: zodResolver(schema),
    mode: "all",
    defaultValues: {
      email: "admin@acme.com",
      password: "password123",
    },
  });

  // Clear errors when component mounts
  useEffect(() => {
    clearError();
  }, [clearError]);

  // Redirect if already authenticated
  useEffect(() => {
    if (isAuthenticated) {
      const urlParams = new URLSearchParams(window.location.search);
      const redirectTo = urlParams.get("redirect") || "/dashboard";
      router.push(redirectTo);
    }
  }, [isAuthenticated, router]);

  // Handle auth errors
  useEffect(() => {
    if (authError) {
      toast.error(authError);

      if (authError.includes("email") || authError.includes("user not found")) {
        setError("email", { message: "Invalid email address" });
      } else if (
        authError.includes("password") ||
        authError.includes("credentials")
      ) {
        setError("password", { message: "Invalid password" });
      }
    }
  }, [authError, setError]);

  const onSubmit = (data: LoginFormData) => {
    startTransition(async () => {
      try {
        clearError();

        if (!tenantId) {
          toast.error("Tenant not found. Please check your URL.");
          return;
        }

        const result = await login({
          email: data.email,
          password: data.password,
        });

        if (result.success) {
          toast.success("Successfully logged in");

          if (rememberMe) {
            localStorage.setItem("remember_email", data.email);
          } else {
            localStorage.removeItem("remember_email");
          }

          // Get redirect URL or go to dashboard
          const urlParams = new URLSearchParams(window.location.search);
          const redirectTo = urlParams.get("redirect") || "/dashboard";

          router.push(redirectTo);
        }
      } catch (err: any) {
        console.error("Login error:", err);
        toast.error(err.message || "An unexpected error occurred");
      }
    });
  };

  // Load remembered email
  useEffect(() => {
    const rememberedEmail = localStorage.getItem("remember_email");
    if (rememberedEmail) {
      setRememberMe(true);
    }
  }, []);

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="mt-5 2xl:mt-7 space-y-4">
      <div className="space-y-2">
        <Label htmlFor="email" className="font-medium text-default-600">
          Email
        </Label>
        <Input
          size="lg"
          disabled={isPending}
          {...register("email")}
          type="email"
          id="email"
          placeholder="Enter your email"
          className={cn("", {
            "border-destructive": errors.email,
          })}
        />
        {errors.email && (
          <div className="text-destructive mt-2 text-sm">
            {errors.email.message}
          </div>
        )}
      </div>

      <div className="mt-3.5 space-y-2">
        <Label htmlFor="password" className="mb-2 font-medium text-default-600">
          Password
        </Label>
        <div className="relative">
          <Input
            size="lg"
            disabled={isPending}
            {...register("password")}
            type={passwordType}
            id="password"
            className={cn("peer", {
              "border-destructive": errors.password,
            })}
            placeholder="Enter your password"
          />
          <div
            className="absolute top-1/2 -translate-y-1/2 ltr:right-4 rtl:left-4 cursor-pointer"
            onClick={togglePasswordType}
          >
            {passwordType === "password" ? (
              <Icon icon="heroicons:eye" className="w-5 h-5 text-default-400" />
            ) : (
              <Icon
                icon="heroicons:eye-slash"
                className="w-5 h-5 text-default-400"
              />
            )}
          </div>
        </div>
        {errors.password && (
          <div className="text-destructive mt-2 text-sm">
            {errors.password.message}
          </div>
        )}
      </div>

      <div className="flex justify-between">
        <div className="flex gap-2 items-center">
          <Checkbox
            id="remember"
            checked={rememberMe}
            onCheckedChange={(checked) => setRememberMe(checked as boolean)}
          />
          <Label htmlFor="remember">Keep Me Signed In</Label>
        </div>
        <Link
          href="/auth/forgot-password"
          className="text-sm text-default-800 dark:text-default-400 leading-6 font-medium hover:underline"
        >
          Forgot Password?
        </Link>
      </div>

      <Button fullWidth disabled={isPending} type="submit">
        {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
        {isPending ? "Signing In..." : "Sign In"}
      </Button>

      {process.env.NODE_ENV === "development" && (
        <div className="mt-4 p-3 bg-muted rounded-lg text-xs text-muted-foreground">
          <strong>Dev Info:</strong> Tenant: {tenantId || "Not detected"}
        </div>
      )}
    </form>
  );
};

export default LoginForm;


============================== components/auth/reg-form.tsx ============================>
"use client";

import React from "react";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Link } from "@/i18n/routing";
import { Icon } from "@/components/ui/icon";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { cn } from "@/lib/utils/ui.utils";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";
import { useRouter } from "next/navigation";
import { useAuthStore } from "@/lib/stores/auth.store";
import { getTenantFromUrl } from "@/lib/utils/tenant.utils";
import { useEffect } from "react";

const schema = z
  .object({
    name: z.string().min(2, { message: "Name must be at least 2 characters." }),
    email: z.string().email({ message: "Please enter a valid email address." }),
    password: z
      .string()
      .min(8, { message: "Password must be at least 8 characters." })
      .regex(/[A-Z]/, {
        message: "Password must contain at least one uppercase letter.",
      })
      .regex(/[a-z]/, {
        message: "Password must contain at least one lowercase letter.",
      })
      .regex(/[0-9]/, {
        message: "Password must contain at least one number.",
      }),
    confirmPassword: z.string(),
    terms: z.boolean().refine((val) => val === true, {
      message: "You must accept the terms and conditions.",
    }),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "Passwords don't match",
    path: ["confirmPassword"],
  });

type RegisterFormData = z.infer<typeof schema>;

const RegForm = () => {
  const [isPending, startTransition] = React.useTransition();
  const router = useRouter();
  const [passwordType, setPasswordType] = React.useState("password");
  const [confirmPasswordType, setConfirmPasswordType] =
    React.useState("password");

  const {
    register: registerUser,
    error: authError,
    clearError,
    isAuthenticated,
  } = useAuthStore();

  const tenantId = getTenantFromUrl();

  const {
    register,
    handleSubmit,
    formState: { errors },
    setError,
    watch,
  } = useForm<RegisterFormData>({
    resolver: zodResolver(schema),
    mode: "onChange",
    defaultValues: {
      name: "",
      email: "",
      password: "",
      confirmPassword: "",
      terms: false,
    },
  });

  // Clear errors when component mounts
  useEffect(() => {
    clearError();
  }, [clearError]);

  // Redirect if already authenticated
  useEffect(() => {
    if (isAuthenticated) {
      router.push("/dashboard");
    }
  }, [isAuthenticated, router]);

  // Handle auth errors
  useEffect(() => {
    if (authError) {
      toast.error(authError);

      if (authError.includes("email") || authError.includes("already exists")) {
        setError("email", { message: "Email already exists" });
      } else if (authError.includes("password")) {
        setError("password", { message: "Password requirements not met" });
      }
    }
  }, [authError, setError]);

  const togglePasswordType = () => {
    setPasswordType((prev) => (prev === "password" ? "text" : "password"));
  };

  const toggleConfirmPasswordType = () => {
    setConfirmPasswordType((prev) =>
      prev === "password" ? "text" : "password"
    );
  };

  const onSubmit = (data: RegisterFormData) => {
    startTransition(async () => {
      try {
        clearError();

        if (!tenantId) {
          toast.error("Tenant not found. Please check your URL.");
          return;
        }

        const result = await registerUser({
          name: data.name,
          email: data.email,
          password: data.password,
          // Add any additional fields your API expects
          userType: "CUSTOMER", // Default user type, adjust as needed
          tenantId: tenantId,
        });

        if (result.success) {
          toast.success("Account created successfully! Please sign in.");
          router.push("/?message=registration-success");
        }
      } catch (err: any) {
        console.error("Registration error:", err);
        toast.error(err.message || "An unexpected error occurred");
      }
    });
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      {/* Name Field */}
      <div className="space-y-2">
        <Label htmlFor="name" className="font-medium text-default-600">
          Full Name
        </Label>
        <Input
          size="lg"
          disabled={isPending}
          {...register("name")}
          type="text"
          id="name"
          placeholder="Enter your full name"
          className={cn("", {
            "border-destructive": errors.name,
          })}
        />
        {errors.name && (
          <div className="text-destructive mt-2 text-sm">
            {errors.name.message}
          </div>
        )}
      </div>

      {/* Email Field */}
      <div className="space-y-2">
        <Label htmlFor="email" className="font-medium text-default-600">
          Email Address
        </Label>
        <Input
          size="lg"
          disabled={isPending}
          {...register("email")}
          type="email"
          id="email"
          placeholder="Enter your email address"
          className={cn("", {
            "border-destructive": errors.email,
          })}
        />
        {errors.email && (
          <div className="text-destructive mt-2 text-sm">
            {errors.email.message}
          </div>
        )}
      </div>

      {/* Password Field */}
      <div className="space-y-2">
        <Label htmlFor="password" className="font-medium text-default-600">
          Password
        </Label>
        <div className="relative">
          <Input
            size="lg"
            disabled={isPending}
            {...register("password")}
            type={passwordType}
            id="password"
            className={cn("peer", {
              "border-destructive": errors.password,
            })}
            placeholder="Create a strong password"
          />
          <div
            className="absolute top-1/2 -translate-y-1/2 ltr:right-4 rtl:left-4 cursor-pointer"
            onClick={togglePasswordType}
          >
            {passwordType === "password" ? (
              <Icon icon="heroicons:eye" className="w-5 h-5 text-default-400" />
            ) : (
              <Icon
                icon="heroicons:eye-slash"
                className="w-5 h-5 text-default-400"
              />
            )}
          </div>
        </div>
        {errors.password && (
          <div className="text-destructive mt-2 text-sm">
            {errors.password.message}
          </div>
        )}
      </div>

      {/* Confirm Password Field */}
      <div className="space-y-2">
        <Label
          htmlFor="confirmPassword"
          className="font-medium text-default-600"
        >
          Confirm Password
        </Label>
        <div className="relative">
          <Input
            size="lg"
            disabled={isPending}
            {...register("confirmPassword")}
            type={confirmPasswordType}
            id="confirmPassword"
            className={cn("peer", {
              "border-destructive": errors.confirmPassword,
            })}
            placeholder="Confirm your password"
          />
          <div
            className="absolute top-1/2 -translate-y-1/2 ltr:right-4 rtl:left-4 cursor-pointer"
            onClick={toggleConfirmPasswordType}
          >
            {confirmPasswordType === "password" ? (
              <Icon icon="heroicons:eye" className="w-5 h-5 text-default-400" />
            ) : (
              <Icon
                icon="heroicons:eye-slash"
                className="w-5 h-5 text-default-400"
              />
            )}
          </div>
        </div>
        {errors.confirmPassword && (
          <div className="text-destructive mt-2 text-sm">
            {errors.confirmPassword.message}
          </div>
        )}
      </div>

      {/* Terms and Conditions */}
      <div className="space-y-2">
        <div className="flex gap-2 items-start">
          <Checkbox
            id="terms"
            {...register("terms")}
            disabled={isPending}
            className={cn("mt-0.5", {
              "border-destructive": errors.terms,
            })}
          />
          <Label htmlFor="terms" className="text-sm leading-relaxed">
            I accept the{" "}
            <Link href="/terms" className="text-primary hover:underline">
              Terms and Conditions
            </Link>{" "}
            and{" "}
            <Link href="/privacy" className="text-primary hover:underline">
              Privacy Policy
            </Link>
          </Label>
        </div>
        {errors.terms && (
          <div className="text-destructive mt-2 text-sm">
            {errors.terms.message}
          </div>
        )}
      </div>

      {/* Submit Button */}
      <Button fullWidth disabled={isPending} type="submit">
        {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
        {isPending ? "Creating Account..." : "Create Account"}
      </Button>

      {/* Development Helper */}
      {process.env.NODE_ENV === "development" && (
        <div className="mt-4 p-3 bg-muted rounded-lg text-xs text-muted-foreground">
          <strong>Dev Info:</strong> Tenant: {tenantId || "Not detected"}
        </div>
      )}
    </form>
  );
};

export default RegForm;


====================================== components/auth/forgot-pass.tsx ============================>
"use client";

import React from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { cn } from "@/lib/utils/ui.utils";
import { Loader2, CheckCircle } from "lucide-react";
import { toast } from "sonner";
import { authApiClient } from "@/lib/api/clients/auth.client";
import { getTenantFromUrl } from "@/lib/utils/tenant.utils";

const schema = z.object({
  email: z.string().email({ message: "Please enter a valid email address." }),
});

type ForgotPasswordFormData = z.infer<typeof schema>;

const ForgotPass = () => {
  const [isPending, startTransition] = React.useTransition();
  const [isSuccess, setIsSuccess] = React.useState(false);

  const tenantId = getTenantFromUrl();

  const {
    register,
    handleSubmit,
    formState: { errors },
    watch,
  } = useForm<ForgotPasswordFormData>({
    resolver: zodResolver(schema),
    mode: "onChange",
    defaultValues: {
      email: "",
    },
  });

  const onSubmit = (data: ForgotPasswordFormData) => {
    startTransition(async () => {
      try {
        if (!tenantId) {
          toast.error("Tenant not found. Please check your URL.");
          return;
        }

        // Call your forgot password API
        const response = await authApiClient.forgotPassword({
          email: data.email,
        });

        if (response.success) {
          setIsSuccess(true);
          toast.success("Password reset instructions sent to your email!");
        } else {
          toast.error(response.error?.message || "Failed to send reset email");
        }
      } catch (err: any) {
        console.error("Forgot password error:", err);
        toast.error(err.message || "An unexpected error occurred");
      }
    });
  };

  if (isSuccess) {
    return (
      <div className="space-y-4 text-center">
        <div className="flex justify-center">
          <CheckCircle className="h-16 w-16 text-green-500" />
        </div>
        <div className="space-y-2">
          <h3 className="text-lg font-medium text-default-900">
            Email Sent Successfully!
          </h3>
          <p className="text-sm text-default-500">
            We've sent password reset instructions to your email address. Please
            check your inbox and follow the link to reset your password.
          </p>
        </div>
        <div className="pt-4">
          <Button
            variant="outline"
            onClick={() => setIsSuccess(false)}
            className="w-full"
          >
            Send Another Email
          </Button>
        </div>
      </div>
    );
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <div className="space-y-2">
        <Label htmlFor="email" className="font-medium text-default-600">
          Email Address
        </Label>
        <Input
          size="lg"
          disabled={isPending}
          {...register("email")}
          type="email"
          id="email"
          placeholder="Enter your email address"
          className={cn("", {
            "border-destructive": errors.email,
          })}
        />
        {errors.email && (
          <div className="text-destructive mt-2 text-sm">
            {errors.email.message}
          </div>
        )}
      </div>

      <Button fullWidth disabled={isPending} type="submit">
        {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
        {isPending ? "Sending Email..." : "Send Recovery Email"}
      </Button>

      {/* Development Helper */}
      {process.env.NODE_ENV === "development" && (
        <div className="mt-4 p-3 bg-muted rounded-lg text-xs text-muted-foreground">
          <strong>Dev Info:</strong> Tenant: {tenantId || "Not detected"}
          <br />
          <strong>Email:</strong> {watch("email") || "Not entered"}
        </div>
      )}
    </form>
  );
};

export default ForgotPass;



====================================== components/auth/protected-route.tsx============================>
"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { useAuthStore } from "@/lib/stores/auth.store";
import { useTenantStore } from "@/lib/stores/tenant.store";

interface ProtectedRouteProps {
  children: React.ReactNode;
}

export function ProtectedRoute({ children }: ProtectedRouteProps) {
  const router = useRouter();
  const [isInitialized, setIsInitialized] = useState(false);

  const { isAuthenticated, isLoading, checkAuth } = useAuthStore();

  const { fetchTenants } = useTenantStore();

  // Initialize authentication
  useEffect(() => {
    const initialize = async () => {
      try {
        await checkAuth();

        // Fetch tenant data if authenticated
        const authState = useAuthStore.getState();
        if (authState.isAuthenticated) {
          try {
            // await fetchTenants();
          } catch (error) {
            console.error("Failed to fetch tenant data:", error);
            // Don't block if tenant fetch fails
          }
        }
      } catch (error) {
        console.error("Auth initialization failed:", error);
      } finally {
        setIsInitialized(true);
      }
    };

    initialize();
  }, [checkAuth, fetchTenants]);

  // Handle redirects after initialization
  useEffect(() => {
    if (!isInitialized || isLoading) return;

    if (!isAuthenticated) {
      // Redirect to root
      const loginUrl = `/`;
      router.push(loginUrl);
    }
  }, [isInitialized, isLoading, isAuthenticated, router]);

  // Show loading during initialization
  if (!isInitialized || isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center space-y-4">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto"></div>
          <p className="text-muted-foreground">Loading...</p>
        </div>
      </div>
    );
  }

  // Don't render content if not authenticated (will redirect)
  if (!isAuthenticated) {
    return null;
  }

  // Render protected content
  return <>{children}</>;
}




====================================== providers/auth-provider.tsx ============================>
"use client";

import React, { useEffect, useState } from "react";
import { useAuthStore } from "@/lib/stores/auth.store";
import { useTenantStore } from "@/lib/stores/tenant.store";
import { getTenantFromUrl } from "@/lib/utils/tenant.utils";

interface AuthProviderProps {
  children: React.ReactNode;
}

export default function AuthProvider({ children }: AuthProviderProps) {
  const [isInitialized, setIsInitialized] = useState(false);
  const { checkAuth, isAuthenticated } = useAuthStore();
  const { fetchTenants } = useTenantStore();

  useEffect(() => {
    let mounted = true;

    const initializeAuth = async () => {
      try {
        // Get tenant from URL for context
        const tenantId = getTenantFromUrl();
        if (tenantId) {
          // Store tenant ID in localStorage for API clients
          localStorage.setItem("tenant_context", tenantId);
        }

        // Check authentication status
        await checkAuth();

        // If authenticated, fetch tenant data
        if (mounted && isAuthenticated) {
          try {
            // await fetchTenants();
          } catch (error) {
            console.error("Failed to fetch tenant data:", error);
            // Don't block app initialization for tenant fetch failures
          }
        }
      } catch (error) {
        console.error("Auth initialization failed:", error);
        // Don't block app initialization for auth failures
      } finally {
        if (mounted) {
          setIsInitialized(true);
        }
      }
    };

    initializeAuth();

    return () => {
      mounted = false;
    };
  }, [checkAuth, isAuthenticated, fetchTenants]);

  // Handle browser events for better UX
  useEffect(() => {
    if (!isInitialized) return;

    const handleFocus = () => {
      if (isAuthenticated) {
        // Silently refresh auth when user returns to tab
        checkAuth().catch(console.error);
      }
    };

    const handleOnline = () => {
      if (isAuthenticated) {
        // Refresh auth when coming back online
        checkAuth().catch(console.error);
      }
    };

    window.addEventListener("focus", handleFocus);
    window.addEventListener("online", handleOnline);

    return () => {
      window.removeEventListener("focus", handleFocus);
      window.removeEventListener("online", handleOnline);
    };
  }, [isInitialized, isAuthenticated, checkAuth]);

  return <>{children}</>;
}

====================================== providers/auth-provider.tsx ============================>
import createMiddleware from "next-intl/middleware";
import { NextRequest, NextResponse } from "next/server";
import { locales } from "@/config";

// Protected routes that require authentication
const protectedRoutes = [
  "/dashboard",
  "/parcels",
  "/invoices",
  "/claims",
  "/users",
  "/roles",
  "/settings",
  "/analytics",
];

function isProtectedRoute(pathname: string): boolean {
  // Remove locale prefix to check the actual route
  const routeWithoutLocale = pathname.replace(/^\/[a-z]{2}(?=\/|$)/, "") || "/";
  return protectedRoutes.some((route) => routeWithoutLocale.startsWith(route));
}

function getAuthToken(request: NextRequest): string | null {
  // Check Authorization header first
  const authHeader = request.headers.get("authorization");
  if (authHeader?.startsWith("Bearer ")) {
    return authHeader.substring(7);
  }

  // Check cookie
  const tokenCookie = request.cookies.get("auth_token");
  return tokenCookie?.value || null;
}

function isTokenValid(token: string): boolean {
  try {
    const payload = JSON.parse(atob(token.split(".")[1]));
    const currentTime = Math.floor(Date.now() / 1000);
    return payload.exp > currentTime;
  } catch {
    return false;
  }
}

export default async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;

  // Handle internationalization first
  const handleI18nRouting = createMiddleware({
    locales,
    defaultLocale: "en",
  });

  let response = handleI18nRouting(request);

  // If i18n middleware wants to redirect, let it
  if (response && response.status >= 300 && response.status < 400) {
    return response;
  }

  // Check authentication for protected routes
  if (isProtectedRoute(pathname)) {
    const token = getAuthToken(request);
    const isAuthenticated = token && isTokenValid(token);

    if (!isAuthenticated) {
      // Simple redirect to root without complex URL manipulation
      return NextResponse.redirect(new URL("/", request.url));
    }
  }

  // Add security headers
  const headers = new Headers(response?.headers);
  headers.set("x-frame-options", "DENY");
  headers.set("x-content-type-options", "nosniff");
  headers.set("referrer-policy", "origin-when-cross-origin");

  if (process.env.NODE_ENV === "development") {
    headers.set("Access-Control-Allow-Origin", "*");
    headers.set(
      "Access-Control-Allow-Methods",
      "GET, POST, PUT, DELETE, OPTIONS"
    );
    headers.set("Access-Control-Allow-Headers", "Content-Type, Authorization");
  }

  return new NextResponse(response?.body, {
    status: response?.status,
    statusText: response?.statusText,
    headers,
  });
}

export const config = {
  matcher: ["/((?!api|_next/static|_next/image|favicon.ico|images|icons).*)"],
};
