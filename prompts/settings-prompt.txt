===============================================================================================================
My Next js front project structure:
===============================================================================================================
App Folder :
-- app/[locale]/(protected)/dashboard/page.tsx
-- app/[locale]/(protected)/profile/page.tsx
-- app/[locale]/(protected)/roles/page.tsx


-- app/[locale]/(protected)/users/page.tsx =>
"use client";
import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Icon } from "@/components/ui/icon";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { Link } from "@/i18n/routing";
import UsersTable from "@/components/users/users-table";
import { useAuthStore } from "@/lib/stores/auth.store";
import { ProtectedRoute } from "@/components/route/protected-route";
import { USER_PERMISSIONS } from "@/lib/constants/permissions";
const UsersPageContent = () => {
  const { hasPermission, user, hasAnyPermission } = useAuthStore();

  // Check individual permissions
  const canViewUsers = hasPermission(USER_PERMISSIONS.READ_USERS);
  const canCreateUsers = hasPermission(USER_PERMISSIONS.CREATE_USER);
  const canUpdateUsers = hasPermission(USER_PERMISSIONS.UPDATE_USER);
  const canDeleteUsers = hasPermission(USER_PERMISSIONS.DELETE_USER);
  const canManageRoles = hasPermission(USER_PERMISSIONS.MANAGE_USER_ROLES);
  const canViewAnalytics = hasPermission(USER_PERMISSIONS.READ_USER_ANALYTICS);

  // Check if user has any user management permissions
  const hasAnyUserPermissions = hasAnyPermission([
    USER_PERMISSIONS.READ_USERS,
    USER_PERMISSIONS.CREATE_USER,
    USER_PERMISSIONS.UPDATE_USER,
    USER_PERMISSIONS.DELETE_USER,
    USER_PERMISSIONS.MANAGE_USER_ROLES,
    USER_PERMISSIONS.READ_USER_ANALYTICS,
  ]);

  // Define permission-based features
  const availableFeatures = [
    {
      id: "view",
      label: "View Users",
      enabled: canViewUsers,
      icon: "heroicons:eye",
      description: "Browse and search users",
    },
    {
      id: "create",
      label: "Create Users",
      enabled: canCreateUsers,
      icon: "heroicons:plus",
      description: "Add new users to the system",
    },
    {
      id: "update",
      label: "Edit Users",
      enabled: canUpdateUsers,
      icon: "heroicons:pencil",
      description: "Modify user information",
    },
    {
      id: "delete",
      label: "Delete Users",
      enabled: canDeleteUsers,
      icon: "heroicons:trash",
      description: "Remove users from the system",
    },
    {
      id: "roles",
      label: "Manage Roles",
      enabled: canManageRoles,
      icon: "heroicons:shield-check",
      description: "Assign and modify user roles",
    },
    {
      id: "analytics",
      label: "View Analytics",
      enabled: canViewAnalytics,
      icon: "heroicons:chart-bar",
      description: "Access user analytics and reports",
    },
  ];

  const enabledFeatures = availableFeatures.filter(
    (feature) => feature.enabled
  );
  const disabledFeatures = availableFeatures.filter(
    (feature) => !feature.enabled
  );

  // Show error if user has no permissions at all
  if (!hasAnyUserPermissions) {
    return (
      <div className="space-y-6">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
          <div>
            <h1 className="text-2xl font-bold text-default-900">
              Users Management
            </h1>
            <p className="text-default-600">
              Manage your users, roles, and permissions
            </p>
          </div>
        </div>

        <Alert color="destructive">
          <Icon icon="heroicons:exclamation-triangle" className="h-4 w-4" />
          <AlertDescription>
            <div className="space-y-2">
              <div className="font-medium">Access Denied</div>
              <div>
                You don't have permission to access user management features.
                Please contact your administrator to request access.
              </div>
              <div className="text-sm">
                <strong>Your user type:</strong> {user?.userType || "Unknown"}
              </div>
            </div>
          </AlertDescription>
        </Alert>

        {/* Contact Support Card */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Icon icon="heroicons:question-mark-circle" className="w-5 h-5" />
              Need Access?
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <p className="text-sm text-muted-foreground">
              If you believe you should have access to user management features,
              please contact your system administrator or support team.
            </p>
            <div className="flex gap-2">
              <Button variant="outline" size="sm">
                <Icon
                  icon="heroicons:chat-bubble-left-right"
                  className="w-4 h-4 mr-2"
                />
                Contact Support
              </Button>
              <Link href="/dashboard">
                <Button variant="outline" size="sm">
                  <Icon icon="heroicons:home" className="w-4 h-4 mr-2" />
                  Return to Dashboard
                </Button>
              </Link>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-default-900">
            Users Management
          </h1>
          <p className="text-default-600">
            Manage your users, roles, and permissions
          </p>
        </div>

        <div className="flex items-center gap-2">
          {canViewAnalytics && (
            <Link href="/users/analytics">
              <Button variant="outline" size="sm">
                <Icon icon="heroicons:chart-bar" className="w-4 h-4 mr-2" />
                Analytics
              </Button>
            </Link>
          )}

          {canCreateUsers && (
            <Link href="/users/create">
              <Button>
                <Icon icon="heroicons:plus" className="w-4 h-4 mr-2" />
                Create User
              </Button>
            </Link>
          )}
        </div>
      </div>

      {/* Permissions Overview */}
      {process.env.NODE_ENV === "development" && (
        <Alert color="info" variant="soft">
          <Icon icon="heroicons:information-circle" className="h-4 w-4" />
          <AlertDescription>
            <div className="space-y-2">
              <div className="font-medium">
                Development Info - Your Permissions
              </div>
              <div className="flex flex-wrap gap-1">
                {enabledFeatures.map((feature) => (
                  <Badge key={feature.id} color="success" className="text-xs">
                    <Icon icon={feature.icon} className="w-3 h-3 mr-1" />
                    {feature.label}
                  </Badge>
                ))}
                {disabledFeatures.map((feature) => (
                  <Badge
                    key={feature.id}
                    color="secondary"
                    className="text-xs opacity-50"
                  >
                    <Icon icon={feature.icon} className="w-3 h-3 mr-1" />
                    {feature.label}
                  </Badge>
                ))}
              </div>
            </div>
          </AlertDescription>
        </Alert>
      )}

      {/* Limited Access Warning */}
      {hasAnyUserPermissions &&
        (!canViewUsers || enabledFeatures.length < 3) && (
          <Alert color="warning" variant="soft">
            <Icon icon="heroicons:exclamation-triangle" className="h-4 w-4" />
            <AlertDescription>
              <div className="space-y-1">
                <div className="font-medium">Limited Access</div>
                <div className="text-sm">
                  You have restricted access to user management features. Some
                  actions may not be available.
                </div>
                <div className="text-xs mt-2">
                  <strong>Available:</strong>{" "}
                  {enabledFeatures.map((f) => f.label).join(", ")}
                </div>
              </div>
            </AlertDescription>
          </Alert>
        )}

      {/* Quick Actions Card - only show if user has multiple permissions */}
      {enabledFeatures.length > 1 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Icon icon="heroicons:bolt" className="w-5 h-5" />
              Quick Actions
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3">
              {canCreateUsers && (
                <Link href="/users/create" className="group">
                  <div className="p-3 border rounded-lg hover:bg-muted/50 transition-colors cursor-pointer">
                    <div className="flex flex-col items-center gap-2 text-center">
                      <Icon
                        icon="heroicons:plus"
                        className="w-6 h-6 text-primary group-hover:scale-110 transition-transform"
                      />
                      <span className="text-xs font-medium">Create User</span>
                    </div>
                  </div>
                </Link>
              )}

              {canManageRoles && (
                <Link href="/users/roles" className="group">
                  <div className="p-3 border rounded-lg hover:bg-muted/50 transition-colors cursor-pointer">
                    <div className="flex flex-col items-center gap-2 text-center">
                      <Icon
                        icon="heroicons:shield-check"
                        className="w-6 h-6 text-primary group-hover:scale-110 transition-transform"
                      />
                      <span className="text-xs font-medium">Manage Roles</span>
                    </div>
                  </div>
                </Link>
              )}

              {canViewAnalytics && (
                <Link href="/users/analytics" className="group">
                  <div className="p-3 border rounded-lg hover:bg-muted/50 transition-colors cursor-pointer">
                    <div className="flex flex-col items-center gap-2 text-center">
                      <Icon
                        icon="heroicons:chart-bar"
                        className="w-6 h-6 text-primary group-hover:scale-110 transition-transform"
                      />
                      <span className="text-xs font-medium">Analytics</span>
                    </div>
                  </div>
                </Link>
              )}

              {canUpdateUsers && (
                <div className="group cursor-pointer">
                  <div className="p-3 border rounded-lg hover:bg-muted/50 transition-colors">
                    <div className="flex flex-col items-center gap-2 text-center">
                      <Icon
                        icon="heroicons:user-group"
                        className="w-6 h-6 text-primary group-hover:scale-110 transition-transform"
                      />
                      <span className="text-xs font-medium">Bulk Edit</span>
                    </div>
                  </div>
                </div>
              )}

              {canViewUsers && (
                <div className="group cursor-pointer">
                  <div className="p-3 border rounded-lg hover:bg-muted/50 transition-colors">
                    <div className="flex flex-col items-center gap-2 text-center">
                      <Icon
                        icon="heroicons:funnel"
                        className="w-6 h-6 text-primary group-hover:scale-110 transition-transform"
                      />
                      <span className="text-xs font-medium">
                        Advanced Filter
                      </span>
                    </div>
                  </div>
                </div>
              )}

              {canViewUsers && (
                <div className="group cursor-pointer">
                  <div className="p-3 border rounded-lg hover:bg-muted/50 transition-colors">
                    <div className="flex flex-col items-center gap-2 text-center">
                      <Icon
                        icon="heroicons:arrow-down-tray"
                        className="w-6 h-6 text-primary group-hover:scale-110 transition-transform"
                      />
                      <span className="text-xs font-medium">Export</span>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Users Table */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>All Users</span>
            {canViewUsers && (
              <Badge color="secondary" className="text-xs">
                <Icon icon="heroicons:eye" className="w-3 h-3 mr-1" />
                View Access
              </Badge>
            )}
          </CardTitle>
        </CardHeader>
        <CardContent className="p-0">
          {canViewUsers ? (
            <UsersTable
              canEdit={canUpdateUsers}
              canDelete={canDeleteUsers}
              canManageRoles={canManageRoles}
            />
          ) : (
            <div className="p-8 text-center">
              <div className="space-y-4">
                <Icon
                  icon="heroicons:lock-closed"
                  className="w-12 h-12 text-muted-foreground mx-auto"
                />
                <div>
                  <h3 className="font-medium text-default-900">
                    No View Permission
                  </h3>
                  <p className="text-sm text-muted-foreground mt-1">
                    You don't have permission to view the users list.
                  </p>
                </div>
                {canCreateUsers && (
                  <div>
                    <p className="text-xs text-muted-foreground mb-3">
                      You can still create new users:
                    </p>
                    <Link href="/users/create">
                      <Button size="sm">
                        <Icon icon="heroicons:plus" className="w-4 h-4 mr-2" />
                        Create User
                      </Button>
                    </Link>
                  </div>
                )}
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Permissions Summary Card */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Icon icon="heroicons:shield-check" className="w-5 h-5" />
            Your Access Level
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <h4 className="text-sm font-medium text-default-900 mb-2">
                  Enabled Features
                </h4>
                <div className="space-y-2">
                  {enabledFeatures.length > 0 ? (
                    enabledFeatures.map((feature) => (
                      <div
                        key={feature.id}
                        className="flex items-center gap-2 text-sm"
                      >
                        <Icon
                          icon={feature.icon}
                          className="w-4 h-4 text-green-600"
                        />
                        <span className="font-medium">{feature.label}</span>
                        <span className="text-muted-foreground">
                          - {feature.description}
                        </span>
                      </div>
                    ))
                  ) : (
                    <p className="text-sm text-muted-foreground">
                      No features enabled
                    </p>
                  )}
                </div>
              </div>

              {disabledFeatures.length > 0 && (
                <div>
                  <h4 className="text-sm font-medium text-default-900 mb-2">
                    Restricted Features
                  </h4>
                  <div className="space-y-2">
                    {disabledFeatures.map((feature) => (
                      <div
                        key={feature.id}
                        className="flex items-center gap-2 text-sm opacity-60"
                      >
                        <Icon
                          icon={feature.icon}
                          className="w-4 h-4 text-muted-foreground"
                        />
                        <span className="font-medium">{feature.label}</span>
                        <span className="text-muted-foreground">
                          - {feature.description}
                        </span>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>

            <div className="pt-3 border-t">
              <div className="flex items-center justify-between text-sm">
                <span className="text-muted-foreground">Access Level:</span>
                <Badge
                  color={
                    enabledFeatures.length >= 4
                      ? "success"
                      : enabledFeatures.length >= 2
                      ? "warning"
                      : "secondary"
                  }
                >
                  {enabledFeatures.length >= 4
                    ? "Full Access"
                    : enabledFeatures.length >= 2
                    ? "Partial Access"
                    : "Limited Access"}
                </Badge>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
// Main component wrapped with ProtectedRoute
const UsersPage = () => {
  return (
    <ProtectedRoute
      requiredPermissions={[USER_PERMISSIONS.READ_USERS]}
      requiredAccessLevel="LIMITED"
      allowedAccountStatuses={["ACTIVE"]}
    >
      <UsersPageContent />
    </ProtectedRoute>
  );
};
export default UsersPage;

-- app/[locale]/(protected)/users/[id]/page.tsx =>
"use client";
import React, { useState, useEffect } from "react";
import { useRouter, useParams } from "next/navigation";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Icon } from "@/components/ui/icon";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Link } from "@/i18n/routing";
import { ProtectedRoute } from "@/components/route/protected-route";
import { USER_TYPES, PERMISSIONS } from "@/lib/constants/permissions";
import { usersApiClient } from "@/lib/api/clients/users.client";
import { useAuthStore } from "@/lib/stores/auth.store";
import { toast } from "sonner";
// Status configurations
const userTypeConfig = {
  ADMIN: {
    label: "Admin",
    color: "destructive" as const,
    icon: "heroicons:shield-check",
  },
  MANAGER: {
    label: "Manager",
    color: "warning" as const,
    icon: "heroicons:user-group",
  },
  SUPPORT: {
    label: "Support",
    color: "info" as const,
    icon: "heroicons:chat-bubble-left-right",
  },
  SELLER: {
    label: "Seller",
    color: "success" as const,
    icon: "heroicons:currency-dollar",
  },
  LIVREUR: {
    label: "Delivery",
    color: "secondary" as const,
    icon: "heroicons:truck",
  },
  CUSTOMER: {
    label: "Customer",
    color: "primary" as const,
    icon: "heroicons:user",
  },
  BUYER: {
    label: "Buyer",
    color: "success" as const,
    icon: "heroicons:shopping-cart",
  },
  VENDOR: {
    label: "Vendor",
    color: "warning" as const,
    icon: "heroicons:building-storefront",
  },
  WAREHOUSE: {
    label: "Warehouse",
    color: "secondary" as const,
    icon: "heroicons:building-office-2",
  },
  DISPATCHER: {
    label: "Dispatcher",
    color: "info" as const,
    icon: "heroicons:map",
  },
};
const accountStatusConfig = {
  PENDING: {
    label: "Pending Approval",
    color: "warning" as const,
    icon: "heroicons:clock",
    description: "Awaiting admin approval",
  },
  INACTIVE: {
    label: "Inactive",
    color: "secondary" as const,
    icon: "heroicons:pause",
    description: "Account is inactive",
  },
  PENDING_VALIDATION: {
    label: "Pending Validation",
    color: "info" as const,
    icon: "heroicons:document-check",
    description: "Profile awaiting validation",
  },
  ACTIVE: {
    label: "Active",
    color: "success" as const,
    icon: "heroicons:check-circle",
    description: "Account is active",
  },
  REJECTED: {
    label: "Rejected",
    color: "destructive" as const,
    icon: "heroicons:x-circle",
    description: "Account was rejected",
  },
  SUSPENDED: {
    label: "Suspended",
    color: "destructive" as const,
    icon: "heroicons:no-symbol",
    description: "Account is suspended",
  },
};
const validationStatusConfig = {
  PENDING: {
    label: "Pending",
    color: "warning" as const,
    icon: "heroicons:clock",
  },
  VALIDATED: {
    label: "Validated",
    color: "success" as const,
    icon: "heroicons:shield-check",
  },
  REJECTED: {
    label: "Rejected",
    color: "destructive" as const,
    icon: "heroicons:shield-exclamation",
  },
};
const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  return date.toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
    hour: "2-digit",
    minute: "2-digit",
  });
};
const UserDetailsPage = () => {
  const router = useRouter();
  const params = useParams();
  const userId = params?.id as string;
  const { hasPermission } = useAuthStore();

  const [loading, setLoading] = useState(true);
  const [user, setUser] = useState<any>(null);
  const [userActivity, setUserActivity] = useState<any[]>([]);
  const [permissions, setPermissions] = useState<any>(null);
  const [actionLoading, setActionLoading] = useState(false);
  const [deleteDialog, setDeleteDialog] = useState(false);

  const canUpdateUsers = hasPermission(PERMISSIONS.UPDATE_USER);
  const canDeleteUsers = hasPermission(PERMISSIONS.DELETE_USER);
  const canApproveUsers = hasPermission("users:approve");
  const canValidateUsers = hasPermission("users:validate");

  // Fetch user data
  useEffect(() => {
    const fetchUserData = async () => {
      if (!userId) return;

      try {
        setLoading(true);

        // Fetch user details
        const userResult = await usersApiClient.getUserById(userId);
        if (userResult.success) {
          setUser(userResult.data);
        } else {
          toast.error("Failed to fetch user data");
          router.push("/users");
          return;
        }

        // Fetch user permissions (no conditional check needed since this is admin-only)
        try {
          const permissionsResult = await usersApiClient.getUserPermissions(
            userId
          );
          if (permissionsResult.success) {
            setPermissions(permissionsResult.data);
          }
        } catch (error) {
          console.error("Error fetching permissions:", error);
        }

        // Fetch user activity (no conditional check needed since this is admin-only)
        try {
          const activityResult: any = await usersApiClient.getUserActivity(
            userId,
            10
          );
          if (activityResult.success) {
            setUserActivity(activityResult.data);
          }
        } catch (error) {
          console.error("Error fetching activity:", error);
        }
      } catch (error) {
        console.error("Error fetching user data:", error);
        toast.error("An error occurred while fetching user data");
        router.push("/users");
      } finally {
        setLoading(false);
      }
    };

    fetchUserData();
  }, [userId, router]);

  // Handle user actions
  const handleApproveRegistration = async () => {
    setActionLoading(true);
    try {
      const result = await usersApiClient.approveRegistration(userId, {
        approve: true,
        message: "Your registration has been approved!",
      });
      if (result.success) {
        setUser(result.data);
        toast.success("Registration approved successfully");
      } else {
        toast.error(result.error?.message || "Failed to approve registration");
      }
    } catch (error) {
      toast.error("An error occurred");
    } finally {
      setActionLoading(false);
    }
  };

  const handleValidateProfile = async () => {
    setActionLoading(true);
    try {
      const result = await usersApiClient.validateProfile(userId, {
        action: "VALIDATE",
        notes: "Profile validated successfully",
      });
      if (result.success) {
        setUser(result.data);
        toast.success("Profile validated successfully");
      } else {
        toast.error(result.error?.message || "Failed to validate profile");
      }
    } catch (error) {
      toast.error("An error occurred");
    } finally {
      setActionLoading(false);
    }
  };

  const handleSuspendUser = async () => {
    setActionLoading(true);
    try {
      const result = await usersApiClient.suspendUser(userId);
      if (result.success) {
        setUser(result.data);
        toast.success("User suspended successfully");
      } else {
        toast.error(result.error?.message || "Failed to suspend user");
      }
    } catch (error) {
      toast.error("An error occurred");
    } finally {
      setActionLoading(false);
    }
  };

  const handleReactivateUser = async () => {
    setActionLoading(true);
    try {
      const result = await usersApiClient.reactivateUser(userId);
      if (result.success) {
        setUser(result.data);
        toast.success("User reactivated successfully");
      } else {
        toast.error(result.error?.message || "Failed to reactivate user");
      }
    } catch (error) {
      toast.error("An error occurred");
    } finally {
      setActionLoading(false);
    }
  };

  const handleDeleteUser = async () => {
    try {
      const result = await usersApiClient.deleteUser(userId);
      if (result.success) {
        toast.success("User deleted successfully");
        router.push("/users");
      } else {
        toast.error(result.error?.message || "Failed to delete user");
      }
    } catch (error) {
      toast.error("An error occurred");
    } finally {
      setDeleteDialog(false);
    }
  };

  if (loading) {
    return (
      <ProtectedRoute
        requiredUserTypes={[USER_TYPES.ADMIN]}
        requiredPermissions={[PERMISSIONS.READ_USERS]}
        requiredAccessLevel="FULL"
      >
        <div className="container mx-auto py-6">
          <Card>
            <CardContent className="p-8">
              <div className="flex items-center justify-center space-x-2">
                <Icon
                  icon="heroicons:arrow-path"
                  className="w-5 h-5 animate-spin"
                />
                <span>Loading user details...</span>
              </div>
            </CardContent>
          </Card>
        </div>
      </ProtectedRoute>
    );
  }

  if (!user) {
    return (
      <ProtectedRoute
        requiredUserTypes={[USER_TYPES.ADMIN]}
        requiredPermissions={[PERMISSIONS.READ_USERS]}
        requiredAccessLevel="FULL"
      >
        <div className="container mx-auto py-8">
          <Alert color="destructive">
            <Icon icon="heroicons:exclamation-triangle" className="h-4 w-4" />
            <AlertDescription>
              User not found or has been deleted.
            </AlertDescription>
          </Alert>
        </div>
      </ProtectedRoute>
    );
  }

  const userTypeInfo =
    userTypeConfig[user.userType as keyof typeof userTypeConfig];
  const accountStatusInfo =
    accountStatusConfig[user.accountStatus as keyof typeof accountStatusConfig];
  const validationStatusInfo =
    validationStatusConfig[
      user.validationStatus as keyof typeof validationStatusConfig
    ];

  return (
    <ProtectedRoute
      requiredUserTypes={[USER_TYPES.ADMIN]}
      requiredPermissions={[PERMISSIONS.READ_USERS]}
      requiredAccessLevel="FULL"
    >
      <div className="container mx-auto py-6 space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Avatar size="xl">
              <AvatarImage
                src={user.profile?.profilePhoto || user.avatar}
                alt={user.name}
              />
              <AvatarFallback className="text-lg">
                {user.name
                  ?.split(" ")
                  .map((n: string) => n[0])
                  .join("")
                  .toUpperCase() || "U"}
              </AvatarFallback>
            </Avatar>
            <div>
              <div className="flex items-center gap-2">
                <h1 className="text-3xl font-bold text-default-900">
                  {user.name}
                </h1>
                {user.validationStatus === "VALIDATED" && (
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger>
                        <Icon
                          icon="heroicons:shield-check"
                          className="w-6 h-6 text-blue-500"
                        />
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>Verified Profile</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                )}
              </div>
              <p className="text-lg text-default-600">{user.email}</p>
              <div className="flex items-center gap-2 mt-2">
                <Badge color={userTypeInfo?.color}>
                  <Icon icon={userTypeInfo?.icon} className="w-3 h-3 mr-1" />
                  {userTypeInfo?.label}
                </Badge>
                <Badge color={accountStatusInfo?.color}>
                  <Icon
                    icon={accountStatusInfo?.icon}
                    className="w-3 h-3 mr-1"
                  />
                  {accountStatusInfo?.label}
                </Badge>
                <Badge color={validationStatusInfo?.color}>
                  <Icon
                    icon={validationStatusInfo?.icon}
                    className="w-3 h-3 mr-1"
                  />
                  {validationStatusInfo?.label}
                </Badge>
              </div>
            </div>
          </div>

          <div className="flex items-center gap-2">
            {/* Admin Actions Dropdown */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button disabled={actionLoading}>
                  <Icon
                    icon="heroicons:ellipsis-horizontal"
                    className="w-4 h-4 mr-2"
                  />
                  Admin Actions
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                {canUpdateUsers && (
                  <DropdownMenuItem asChild>
                    <Link href={`/users/${userId}/edit`}>
                      <Icon
                        icon="heroicons:pencil-square"
                        className="mr-2 h-4 w-4"
                      />
                      Edit User
                    </Link>
                  </DropdownMenuItem>
                )}

                {/* Admin-specific actions */}
                {canApproveUsers && user.accountStatus === "PENDING" && (
                  <>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem onClick={handleApproveRegistration}>
                      <Icon
                        icon="heroicons:check"
                        className="mr-2 h-4 w-4 text-green-600"
                      />
                      Approve Registration
                    </DropdownMenuItem>
                  </>
                )}

                {canValidateUsers &&
                  user.accountStatus === "PENDING_VALIDATION" && (
                    <>
                      <DropdownMenuSeparator />
                      <DropdownMenuItem onClick={handleValidateProfile}>
                        <Icon
                          icon="heroicons:shield-check"
                          className="mr-2 h-4 w-4 text-blue-600"
                        />
                        Validate Profile
                      </DropdownMenuItem>
                    </>
                  )}

                {canUpdateUsers && (
                  <>
                    <DropdownMenuSeparator />
                    {user.accountStatus === "SUSPENDED" ? (
                      <DropdownMenuItem onClick={handleReactivateUser}>
                        <Icon
                          icon="heroicons:play"
                          className="mr-2 h-4 w-4 text-green-600"
                        />
                        Reactivate User
                      </DropdownMenuItem>
                    ) : (
                      user.accountStatus === "ACTIVE" && (
                        <DropdownMenuItem onClick={handleSuspendUser}>
                          <Icon
                            icon="heroicons:pause"
                            className="mr-2 h-4 w-4 text-orange-600"
                          />
                          Suspend User
                        </DropdownMenuItem>
                      )
                    )}
                  </>
                )}

                {canDeleteUsers && (
                  <>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem
                      className="text-red-600 focus:text-red-600"
                      onClick={() => setDeleteDialog(true)}
                    >
                      <Icon icon="heroicons:trash" className="mr-2 h-4 w-4" />
                      Delete User
                    </DropdownMenuItem>
                  </>
                )}
              </DropdownMenuContent>
            </DropdownMenu>

            <Link href="/users">
              <Button variant="outline">
                <Icon icon="heroicons:arrow-left" className="w-4 h-4 mr-2" />
                Back to Users
              </Button>
            </Link>
          </div>
        </div>

        {/* Status Alert */}
        {user.accountStatus !== "ACTIVE" && (
          <Alert color={accountStatusInfo?.color} variant="soft">
            <Icon icon={accountStatusInfo?.icon} className="h-4 w-4" />
            <AlertDescription>
              <strong>{accountStatusInfo?.label}:</strong>{" "}
              {accountStatusInfo?.description}
              {user.validationNotes && (
                <span className="block mt-1 text-sm">
                  {user.validationNotes}
                </span>
              )}
            </AlertDescription>
          </Alert>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-6">
            {/* Personal Information */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Icon icon="heroicons:user" className="w-5 h-5" />
                  Personal Information
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <h4 className="font-medium text-default-900">Full Name</h4>
                    <p className="text-default-600">
                      {user.name || "Not provided"}
                    </p>
                  </div>
                  <div>
                    <h4 className="font-medium text-default-900">Email</h4>
                    <p className="text-default-600">{user.email}</p>
                  </div>
                  <div>
                    <h4 className="font-medium text-default-900">Phone</h4>
                    <p className="text-default-600">
                      {user.phone || "Not provided"}
                    </p>
                  </div>
                  <div>
                    <h4 className="font-medium text-default-900">City</h4>
                    <p className="text-default-600">
                      {user.city || "Not provided"}
                    </p>
                  </div>
                  {user.profile?.address && (
                    <div className="md:col-span-2">
                      <h4 className="font-medium text-default-900">Address</h4>
                      <p className="text-default-600">{user.profile.address}</p>
                    </div>
                  )}
                  {user.profile?.cin && (
                    <div>
                      <h4 className="font-medium text-default-900">CIN</h4>
                      <p className="text-default-600">{user.profile.cin}</p>
                    </div>
                  )}
                  {user.profile?.department && (
                    <div>
                      <h4 className="font-medium text-default-900">
                        Department
                      </h4>
                      <p className="text-default-600">
                        {user.profile.department}
                      </p>
                    </div>
                  )}
                </div>

                {user.profile?.notes && (
                  <div>
                    <h4 className="font-medium text-default-900">Notes</h4>
                    <p className="text-default-600">{user.profile.notes}</p>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Role & Permissions */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Icon icon="heroicons:identification" className="w-5 h-5" />
                  Role & Permissions
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <h4 className="font-medium text-default-900">User Type</h4>
                    <div className="flex items-center gap-2 mt-1">
                      <Badge color={userTypeInfo?.color}>
                        <Icon
                          icon={userTypeInfo?.icon}
                          className="w-3 h-3 mr-1"
                        />
                        {userTypeInfo?.label}
                      </Badge>
                    </div>
                  </div>
                  <div>
                    <h4 className="font-medium text-default-900">Role</h4>
                    <p className="text-default-600">
                      {user.role?.name || "No role assigned"}
                    </p>
                    {user.role?.description && (
                      <p className="text-sm text-default-500">
                        {user.role.description}
                      </p>
                    )}
                  </div>
                </div>

                {permissions && permissions.permissions && (
                  <div>
                    <h4 className="font-medium text-default-900 mb-2">
                      Permissions
                    </h4>
                    <div className="flex flex-wrap gap-1">
                      {permissions.permissions.map((permission: string) => (
                        <Badge key={permission} className="outline text-xs">
                          {permission}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Activity Log */}
            {userActivity.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Icon icon="heroicons:clock" className="w-5 h-5" />
                    Recent Activity
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {userActivity.map((activity) => (
                      <div
                        key={activity.id}
                        className="flex items-start gap-3 p-3 bg-default-50 rounded-lg"
                      >
                        <div className="w-2 h-2 bg-primary rounded-full mt-2"></div>
                        <div className="flex-1">
                          <p className="text-sm font-medium">
                            {activity.action}
                          </p>
                          <p className="text-xs text-default-500">
                            {formatDate(activity.timestamp)} by{" "}
                            {activity.performedBy?.name}
                          </p>
                          {activity.details && (
                            <p className="text-xs text-default-600 mt-1">
                              {activity.details}
                            </p>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Account Status */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Icon
                    icon="heroicons:information-circle"
                    className="w-5 h-5"
                  />
                  Account Status
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <h4 className="font-medium text-default-900">
                    Account Status
                  </h4>
                  <div className="flex items-center gap-2 mt-1">
                    <Badge color={accountStatusInfo?.color}>
                      <Icon
                        icon={accountStatusInfo?.icon}
                        className="w-3 h-3 mr-1"
                      />
                      {accountStatusInfo?.label}
                    </Badge>
                  </div>
                </div>

                <div>
                  <h4 className="font-medium text-default-900">
                    Validation Status
                  </h4>
                  <div className="flex items-center gap-2 mt-1">
                    <Badge color={validationStatusInfo?.color}>
                      <Icon
                        icon={validationStatusInfo?.icon}
                        className="w-3 h-3 mr-1"
                      />
                      {validationStatusInfo?.label}
                    </Badge>
                  </div>
                </div>

                <div>
                  <h4 className="font-medium text-default-900">
                    Profile Completion
                  </h4>
                  <div className="flex items-center gap-2 mt-1">
                    <Badge
                      color={user.profileCompleted ? "success" : "warning"}
                    >
                      {user.profileCompleted ? "Complete" : "Incomplete"}
                    </Badge>
                  </div>
                </div>

                <div>
                  <h4 className="font-medium text-default-900">
                    Access Status
                  </h4>
                  <div className="flex items-center gap-2 mt-1">
                    <Badge color={user.isActive ? "success" : "destructive"}>
                      {user.isActive ? "Active" : "Inactive"}
                    </Badge>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Account Timeline */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Icon icon="heroicons:calendar" className="w-5 h-5" />
                  Account Timeline
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <h4 className="font-medium text-default-900">Created</h4>
                  <p className="text-sm text-default-600">
                    {formatDate(user.createdAt)}
                  </p>
                  {user.createdBy && (
                    <p className="text-xs text-default-500">
                      by {user.createdBy.name}
                    </p>
                  )}
                </div>

                <div>
                  <h4 className="font-medium text-default-900">Last Updated</h4>
                  <p className="text-sm text-default-600">
                    {formatDate(user.updatedAt)}
                  </p>
                </div>

                {user.validatedAt && (
                  <div>
                    <h4 className="font-medium text-default-900">Validated</h4>
                    <p className="text-sm text-default-600">
                      {formatDate(user.validatedAt)}
                    </p>
                    {user.validatedBy && (
                      <p className="text-xs text-default-500">
                        by {user.validatedBy.name}
                      </p>
                    )}
                  </div>
                )}

                {user.lastLogin && (
                  <div>
                    <h4 className="font-medium text-default-900">Last Login</h4>
                    <p className="text-sm text-default-600">
                      {formatDate(user.lastLogin)}
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Tenant Information */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Icon icon="heroicons:building-office" className="w-5 h-5" />
                  Organization
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div>
                  <h4 className="font-medium text-default-900">
                    {user.tenant?.name}
                  </h4>
                  <p className="text-sm text-default-500">
                    {user.tenant?.slug}
                  </p>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Delete Confirmation Dialog */}
        <AlertDialog open={deleteDialog} onOpenChange={setDeleteDialog}>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>Delete User</AlertDialogTitle>
              <AlertDialogDescription>
                Are you sure you want to delete <strong>{user.name}</strong>?
                This action cannot be undone and will permanently remove all
                user data.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel>Cancel</AlertDialogCancel>
              <AlertDialogAction
                onClick={handleDeleteUser}
                className="bg-red-600 text-white hover:bg-red-700"
              >
                Delete User
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      </div>
    </ProtectedRoute>
  );
};
export default UserDetailsPage;

-- app/[locale]/(protected)/users/[id]/edit/page.tsx =>
"use client";
import React, { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useRouter, useParams } from "next/navigation";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import { Icon } from "@/components/ui/icon";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Link } from "@/i18n/routing";
import { ProtectedRoute } from "@/components/route/protected-route";
import { USER_TYPES, PERMISSIONS } from "@/lib/constants/permissions";
import { usersApiClient } from "@/lib/api/clients/users.client";
import { useAuthStore } from "@/lib/stores/auth.store";
import { toast } from "sonner";
import { cn } from "@/lib/utils/ui.utils";
// Form schema for updating user
const updateUserSchema = z.object({
  name: z.string().min(2, "Name must be at least 2 characters"),
  email: z.string().email("Please enter a valid email address"),
  userType: z.enum([
    "ADMIN",
    "MANAGER",
    "SUPPORT",
    "SELLER",
    "LIVREUR",
    "CUSTOMER",
    "BUYER",
    "VENDOR",
    "WAREHOUSE",
    "DISPATCHER",
  ]),
  phone: z.string().optional(),
  city: z.string().optional(),
  roleId: z.string().optional(),
  profile: z
    .object({
      department: z.string().optional(),
      notes: z.string().optional(),
      address: z.string().optional(),
      cin: z.string().optional(),
    })
    .optional(),
  accountStatus: z
    .enum([
      "PENDING",
      "INACTIVE",
      "PENDING_VALIDATION",
      "ACTIVE",
      "REJECTED",
      "SUSPENDED",
    ])
    .optional(),
  validationStatus: z.enum(["PENDING", "VALIDATED", "REJECTED"]).optional(),
  isActive: z.boolean().default(true),
});
type UpdateUserFormData = z.infer<typeof updateUserSchema>;
// User type configurations
const userTypeConfig = {
  ADMIN: {
    label: "Admin",
    color: "destructive" as const,
    icon: "heroicons:shield-check",
  },
  MANAGER: {
    label: "Manager",
    color: "warning" as const,
    icon: "heroicons:user-group",
  },
  SUPPORT: {
    label: "Support",
    color: "info" as const,
    icon: "heroicons:chat-bubble-left-right",
  },
  SELLER: {
    label: "Seller",
    color: "success" as const,
    icon: "heroicons:currency-dollar",
  },
  LIVREUR: {
    label: "Delivery",
    color: "secondary" as const,
    icon: "heroicons:truck",
  },
  CUSTOMER: {
    label: "Customer",
    color: "primary" as const,
    icon: "heroicons:user",
  },
  BUYER: {
    label: "Buyer",
    color: "success" as const,
    icon: "heroicons:shopping-cart",
  },
  VENDOR: {
    label: "Vendor",
    color: "warning" as const,
    icon: "heroicons:building-storefront",
  },
  WAREHOUSE: {
    label: "Warehouse",
    color: "secondary" as const,
    icon: "heroicons:building-office-2",
  },
  DISPATCHER: {
    label: "Dispatcher",
    color: "info" as const,
    icon: "heroicons:map",
  },
};
// Status configurations
const accountStatusConfig = {
  PENDING: {
    label: "Pending Approval",
    color: "warning" as const,
    icon: "heroicons:clock",
  },
  INACTIVE: {
    label: "Inactive",
    color: "secondary" as const,
    icon: "heroicons:pause",
  },
  PENDING_VALIDATION: {
    label: "Pending Validation",
    color: "info" as const,
    icon: "heroicons:document-check",
  },
  ACTIVE: {
    label: "Active",
    color: "success" as const,
    icon: "heroicons:check-circle",
  },
  REJECTED: {
    label: "Rejected",
    color: "destructive" as const,
    icon: "heroicons:x-circle",
  },
  SUSPENDED: {
    label: "Suspended",
    color: "destructive" as const,
    icon: "heroicons:no-symbol",
  },
};
const validationStatusConfig = {
  PENDING: {
    label: "Pending",
    color: "warning" as const,
    icon: "heroicons:clock",
  },
  VALIDATED: {
    label: "Validated",
    color: "success" as const,
    icon: "heroicons:shield-check",
  },
  REJECTED: {
    label: "Rejected",
    color: "destructive" as const,
    icon: "heroicons:shield-exclamation",
  },
};
const UpdateUserPage = () => {
  const router = useRouter();
  const params = useParams();
  const userId = params?.id as string;
  const { hasPermission } = useAuthStore();

  const [loading, setLoading] = useState(false);
  const [fetchLoading, setFetchLoading] = useState(true);
  const [user, setUser] = useState<any>(null);
  const [roles, setRoles] = useState<
    Array<{
      id: string;
      name: string;
      description?: string;
      userTypes: string[];
    }>
  >([]);
  const [showPasswordDialog, setShowPasswordDialog] = useState(false);
  const [passwordForm, setPasswordForm] = useState({
    currentPassword: "",
    newPassword: "",
    confirmPassword: "",
  });
  const [passwordLoading, setPasswordLoading] = useState(false);

  // Simplified permission checks (ProtectedRoute handles main access control)
  const canChangePassword = hasPermission("users:change_password");

  const {
    register,
    handleSubmit,
    watch,
    setValue,
    formState: { errors, isDirty },
    reset,
  } = useForm<UpdateUserFormData>({
    resolver: zodResolver(updateUserSchema),
  });

  const watchedUserType = watch("userType");

  // Fetch user data
  useEffect(() => {
    const fetchUser = async () => {
      if (!userId) return;

      try {
        setFetchLoading(true);
        const result = await usersApiClient.getUserById(userId);

        if (result.success) {
          const userData: any = result.data;
          setUser(userData);

          // Populate form with user data
          reset({
            name: userData.name || "",
            email: userData.email || "",
            userType: userData.userType,
            phone: userData.phone || "",
            city: userData.city || "",
            roleId: userData.role?.id || "",
            accountStatus: userData.accountStatus,
            validationStatus: userData.validationStatus,
            isActive: userData.isActive,
            profile: {
              department: userData.profile?.department || "",
              notes: userData.profile?.notes || "",
              address: userData.profile?.address || "",
              cin: userData.profile?.cin || "",
            },
          });
        } else {
          toast.error("Failed to fetch user data");
          router.push("/users");
        }
      } catch (error) {
        console.error("Error fetching user:", error);
        toast.error("An error occurred while fetching user data");
        router.push("/users");
      } finally {
        setFetchLoading(false);
      }
    };

    fetchUser();
  }, [userId, reset, router]);

  // Fetch available roles
  useEffect(() => {
    const fetchRoles = async () => {
      try {
        // Mock data - replace with actual API call
        setRoles([
          {
            id: "1",
            name: "System Admin",
            description: "Full system access",
            userTypes: ["ADMIN"],
          },
          {
            id: "2",
            name: "Operations Manager",
            description: "Operations oversight",
            userTypes: ["MANAGER"],
          },
          {
            id: "3",
            name: "Sales Representative",
            description: "Sales operations",
            userTypes: ["SELLER"],
          },
          {
            id: "4",
            name: "Support Agent",
            description: "Customer support",
            userTypes: ["SUPPORT"],
          },
          {
            id: "5",
            name: "Delivery Driver",
            description: "Package delivery",
            userTypes: ["LIVREUR"],
          },
          {
            id: "6",
            name: "Standard Customer",
            description: "Customer access",
            userTypes: ["CUSTOMER"],
          },
          {
            id: "7",
            name: "Procurement Officer",
            description: "Purchasing operations",
            userTypes: ["BUYER"],
          },
          {
            id: "8",
            name: "Vendor Account",
            description: "Vendor portal access",
            userTypes: ["VENDOR"],
          },
          {
            id: "9",
            name: "Warehouse Staff",
            description: "Inventory management",
            userTypes: ["WAREHOUSE"],
          },
          {
            id: "10",
            name: "Logistics Coordinator",
            description: "Dispatch operations",
            userTypes: ["DISPATCHER"],
          },
        ]);
      } catch (error) {
        console.error("Failed to fetch roles:", error);
      }
    };

    fetchRoles();
  }, []);

  // Filter roles based on selected user type
  const availableRoles = roles.filter((role) =>
    watchedUserType ? role.userTypes.includes(watchedUserType) : true
  );

  const onSubmit = async (data: UpdateUserFormData) => {
    setLoading(true);
    try {
      const result = await usersApiClient.updateUser(userId, data);

      if (result.success) {
        toast.success("User updated successfully");
        setUser(result.data);
        // Update form with new data to reset dirty state
        reset(data);
      } else {
        toast.error(result.error?.message || "Failed to update user");
      }
    } catch (error) {
      console.error("Error updating user:", error);
      toast.error("An unexpected error occurred");
    } finally {
      setLoading(false);
    }
  };

  const handlePasswordChange = async () => {
    if (!canChangePassword) {
      toast.error("You don't have permission to change passwords");
      return;
    }

    if (!passwordForm.currentPassword || !passwordForm.newPassword) {
      toast.error("Please fill in all password fields");
      return;
    }

    if (passwordForm.newPassword !== passwordForm.confirmPassword) {
      toast.error("New passwords don't match");
      return;
    }

    if (passwordForm.newPassword.length < 6) {
      toast.error("Password must be at least 6 characters");
      return;
    }

    setPasswordLoading(true);
    try {
      const result = await usersApiClient.changeUserPassword(userId, {
        currentPassword: passwordForm.currentPassword,
        newPassword: passwordForm.newPassword,
      });

      if (result.success) {
        toast.success("Password changed successfully");
        setShowPasswordDialog(false);
        setPasswordForm({
          currentPassword: "",
          newPassword: "",
          confirmPassword: "",
        });
      } else {
        toast.error(result.error?.message || "Failed to change password");
      }
    } catch (error) {
      console.error("Error changing password:", error);
      toast.error("An unexpected error occurred");
    } finally {
      setPasswordLoading(false);
    }
  };

  const handleFormSubmit = () => {
    handleSubmit(onSubmit)();
  };

  if (fetchLoading) {
    return (
      <ProtectedRoute
        requiredUserTypes={[USER_TYPES.ADMIN]}
        requiredPermissions={[PERMISSIONS.UPDATE_USER]}
        requiredAccessLevel="FULL"
      >
        <div className="container mx-auto py-6">
          <Card>
            <CardContent className="p-8">
              <div className="flex items-center justify-center space-x-2">
                <Icon
                  icon="heroicons:arrow-path"
                  className="w-5 h-5 animate-spin"
                />
                <span>Loading user data...</span>
              </div>
            </CardContent>
          </Card>
        </div>
      </ProtectedRoute>
    );
  }

  if (!user) {
    return (
      <ProtectedRoute
        requiredUserTypes={[USER_TYPES.ADMIN]}
        requiredPermissions={[PERMISSIONS.UPDATE_USER]}
        requiredAccessLevel="FULL"
      >
        <div className="container mx-auto py-8">
          <Alert color="destructive">
            <Icon icon="heroicons:exclamation-triangle" className="h-4 w-4" />
            <AlertDescription>
              User not found or has been deleted.
            </AlertDescription>
          </Alert>
        </div>
      </ProtectedRoute>
    );
  }

  return (
    <ProtectedRoute
      requiredUserTypes={[USER_TYPES.ADMIN]}
      requiredPermissions={[PERMISSIONS.UPDATE_USER]}
      requiredAccessLevel="FULL"
    >
      <div className="container mx-auto py-6 space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Avatar size="lg">
              <AvatarImage
                src={user.profile?.profilePhoto || user.avatar}
                alt={user.name}
              />
              <AvatarFallback>
                {user.name
                  ?.split(" ")
                  .map((n: string) => n[0])
                  .join("")
                  .toUpperCase() || "U"}
              </AvatarFallback>
            </Avatar>
            <div>
              <h1 className="text-2xl font-bold text-default-900">
                Edit User - Admin Panel
              </h1>
              <p className="text-default-600">
                {user.name} • {user.email}
              </p>
              <div className="flex items-center gap-2 mt-1">
                <Badge
                  color={
                    userTypeConfig[user.userType as keyof typeof userTypeConfig]
                      ?.color
                  }
                >
                  {
                    userTypeConfig[user.userType as keyof typeof userTypeConfig]
                      ?.label
                  }
                </Badge>
                <Badge
                  color={
                    accountStatusConfig[
                      user.accountStatus as keyof typeof accountStatusConfig
                    ]?.color
                  }
                >
                  {
                    accountStatusConfig[
                      user.accountStatus as keyof typeof accountStatusConfig
                    ]?.label
                  }
                </Badge>
                {user.validationStatus === "VALIDATED" && (
                  <Badge color="success">
                    <Icon
                      icon="heroicons:shield-check"
                      className="w-3 h-3 mr-1"
                    />
                    Validated
                  </Badge>
                )}
              </div>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <Link href={`/users/${userId}`}>
              <Button variant="outline">
                <Icon icon="heroicons:eye" className="w-4 h-4 mr-2" />
                View Profile
              </Button>
            </Link>
            <Link href="/users">
              <Button variant="outline">
                <Icon icon="heroicons:arrow-left" className="w-4 h-4 mr-2" />
                Back to Users
              </Button>
            </Link>
          </div>
        </div>

        {/* Admin Notice */}
        <Alert color="info" variant="soft">
          <Icon icon="heroicons:shield-check" className="h-4 w-4" />
          <AlertDescription>
            <strong>Admin Mode:</strong> You are editing user information with
            administrator privileges. All changes will be logged and auditable.
          </AlertDescription>
        </Alert>

        {/* Unsaved Changes Warning */}
        {isDirty && (
          <Alert color="warning" variant="soft">
            <Icon icon="heroicons:exclamation-triangle" className="h-4 w-4" />
            <AlertDescription>
              You have unsaved changes. Don't forget to save your updates.
            </AlertDescription>
          </Alert>
        )}

        <div className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Main Information */}
            <div className="lg:col-span-2 space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Icon icon="heroicons:user" className="w-5 h-5" />
                    Basic Information
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Name */}
                  <div className="space-y-2">
                    <Label
                      htmlFor="name"
                      className={cn("", { "text-destructive": errors.name })}
                    >
                      Full Name *
                    </Label>
                    <Input
                      id="name"
                      {...register("name")}
                      placeholder="Enter full name"
                      className={cn("", {
                        "border-destructive focus:border-destructive":
                          errors.name,
                      })}
                    />
                    {errors.name && (
                      <p className="text-xs text-destructive">
                        {errors.name.message}
                      </p>
                    )}
                  </div>

                  {/* Email */}
                  <div className="space-y-2">
                    <Label
                      htmlFor="email"
                      className={cn("", { "text-destructive": errors.email })}
                    >
                      Email Address *
                    </Label>
                    <Input
                      id="email"
                      type="email"
                      {...register("email")}
                      placeholder="user@example.com"
                      className={cn("", {
                        "border-destructive focus:border-destructive":
                          errors.email,
                      })}
                    />
                    {errors.email && (
                      <p className="text-xs text-destructive">
                        {errors.email.message}
                      </p>
                    )}
                  </div>

                  {/* Phone and City */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="phone">Phone Number</Label>
                      <Input
                        id="phone"
                        {...register("phone")}
                        placeholder="+1 (555) 123-4567"
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="city">City</Label>
                      <Input
                        id="city"
                        {...register("city")}
                        placeholder="Enter city"
                      />
                    </div>
                  </div>

                  {/* Address and CIN */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="address">Address</Label>
                      <Input
                        id="address"
                        {...register("profile.address")}
                        placeholder="Full address"
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="cin">CIN</Label>
                      <Input
                        id="cin"
                        {...register("profile.cin")}
                        placeholder="National ID"
                      />
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* User Type and Role */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Icon icon="heroicons:identification" className="w-5 h-5" />
                    User Type & Role
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* User Type */}
                  <div className="space-y-2">
                    <Label>User Type *</Label>
                    <Select
                      value={watchedUserType}
                      onValueChange={(value) =>
                        setValue("userType", value as any, {
                          shouldDirty: true,
                        })
                      }
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select user type" />
                      </SelectTrigger>
                      <SelectContent>
                        {Object.entries(userTypeConfig).map(([key, config]) => (
                          <SelectItem key={key} value={key}>
                            <div className="flex items-center gap-3">
                              <Icon icon={config.icon} className="w-4 h-4" />
                              <div className="font-medium">{config.label}</div>
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Role Selection */}
                  {watchedUserType && (
                    <div className="space-y-2">
                      <Label>Role</Label>
                      <Select
                        onValueChange={(value) =>
                          setValue("roleId", value, { shouldDirty: true })
                        }
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select role" />
                        </SelectTrigger>
                        <SelectContent>
                          {availableRoles.map((role) => (
                            <SelectItem key={role.id} value={role.id}>
                              <div>
                                <div className="font-medium">{role.name}</div>
                                {role.description && (
                                  <div className="text-xs text-muted-foreground">
                                    {role.description}
                                  </div>
                                )}
                              </div>
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* Status Management - Now always visible since this is admin-only */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Icon icon="heroicons:cog-6-tooth" className="w-5 h-5" />
                    Status Management
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label>Account Status</Label>
                      <Select
                        value={user.accountStatus}
                        onValueChange={(value) =>
                          setValue("accountStatus", value as any, {
                            shouldDirty: true,
                          })
                        }
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select account status" />
                        </SelectTrigger>
                        <SelectContent>
                          {Object.entries(accountStatusConfig).map(
                            ([key, config]) => (
                              <SelectItem key={key} value={key}>
                                <div className="flex items-center gap-2">
                                  <Icon
                                    icon={config.icon}
                                    className="w-4 h-4"
                                  />
                                  {config.label}
                                </div>
                              </SelectItem>
                            )
                          )}
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="space-y-2">
                      <Label>Validation Status</Label>
                      <Select
                        value={user.validationStatus}
                        onValueChange={(value) =>
                          setValue("validationStatus", value as any, {
                            shouldDirty: true,
                          })
                        }
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select validation status" />
                        </SelectTrigger>
                        <SelectContent>
                          {Object.entries(validationStatusConfig).map(
                            ([key, config]) => (
                              <SelectItem key={key} value={key}>
                                <div className="flex items-center gap-2">
                                  <Icon
                                    icon={config.icon}
                                    className="w-4 h-4"
                                  />
                                  {config.label}
                                </div>
                              </SelectItem>
                            )
                          )}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Additional Information */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Icon icon="heroicons:document-text" className="w-5 h-5" />
                    Additional Information
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="department">Department</Label>
                    <Input
                      id="department"
                      {...register("profile.department")}
                      placeholder="e.g., Sales, Marketing, IT"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="notes">Admin Notes</Label>
                    <Textarea
                      id="notes"
                      {...register("profile.notes")}
                      placeholder="Internal admin notes about this user..."
                      rows={3}
                    />
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Settings Sidebar */}
            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Icon icon="heroicons:key" className="w-5 h-5" />
                    Security
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {canChangePassword && (
                    <Button
                      variant="outline"
                      className="w-full"
                      onClick={() => setShowPasswordDialog(true)}
                    >
                      <Icon icon="heroicons:key" className="w-4 h-4 mr-2" />
                      Change Password
                    </Button>
                  )}

                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <Label>Active Account</Label>
                      <p className="text-xs text-muted-foreground">
                        Allow user to access the system
                      </p>
                    </div>
                    <Switch
                      {...register("isActive")}
                      defaultChecked={user.isActive}
                    />
                  </div>
                </CardContent>
              </Card>

              {/* Account Information */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Icon
                      icon="heroicons:information-circle"
                      className="w-5 h-5"
                    />
                    Account Information
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="text-sm">
                    <span className="text-muted-foreground">Created:</span>
                    <div className="font-medium">
                      {new Date(user.createdAt).toLocaleDateString("en-US", {
                        year: "numeric",
                        month: "long",
                        day: "numeric",
                      })}
                    </div>
                    {user.createdBy && (
                      <div className="text-xs text-muted-foreground">
                        by {user.createdBy.name}
                      </div>
                    )}
                  </div>

                  <div className="text-sm">
                    <span className="text-muted-foreground">Last Updated:</span>
                    <div className="font-medium">
                      {new Date(user.updatedAt).toLocaleDateString("en-US", {
                        year: "numeric",
                        month: "long",
                        day: "numeric",
                      })}
                    </div>
                  </div>

                  {user.validatedAt && (
                    <div className="text-sm">
                      <span className="text-muted-foreground">Validated:</span>
                      <div className="font-medium">
                        {new Date(user.validatedAt).toLocaleDateString(
                          "en-US",
                          {
                            year: "numeric",
                            month: "long",
                            day: "numeric",
                          }
                        )}
                      </div>
                      {user.validatedBy && (
                        <div className="text-xs text-muted-foreground">
                          by {user.validatedBy.name}
                        </div>
                      )}
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </div>

          {/* Form Actions */}
          <div className="flex items-center justify-end gap-4 pt-6 border-t">
            <Button
              type="button"
              variant="outline"
              onClick={() => router.push(`/users/${userId}`)}
              disabled={loading}
            >
              Cancel
            </Button>
            <Button
              type="button"
              variant="outline"
              onClick={() => reset()}
              disabled={loading || !isDirty}
            >
              Reset Changes
            </Button>
            <Button
              type="button"
              onClick={handleFormSubmit}
              disabled={loading || !isDirty}
            >
              {loading && (
                <Icon
                  icon="heroicons:arrow-path"
                  className="mr-2 h-4 w-4 animate-spin"
                />
              )}
              Save Changes
            </Button>
          </div>
        </div>

        {/* Password Change Dialog */}
        {canChangePassword && (
          <AlertDialog
            open={showPasswordDialog}
            onOpenChange={setShowPasswordDialog}
          >
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>Change Password</AlertDialogTitle>
                <AlertDialogDescription>
                  Enter the current password and a new password for {user.name}.
                </AlertDialogDescription>
              </AlertDialogHeader>

              <div className="space-y-4">
                <div className="space-y-2">
                  <Label>Current Password</Label>
                  <Input
                    type="password"
                    value={passwordForm.currentPassword}
                    onChange={(e) =>
                      setPasswordForm((prev) => ({
                        ...prev,
                        currentPassword: e.target.value,
                      }))
                    }
                    placeholder="Enter current password"
                  />
                </div>
                <div className="space-y-2">
                  <Label>New Password</Label>
                  <Input
                    type="password"
                    value={passwordForm.newPassword}
                    onChange={(e) =>
                      setPasswordForm((prev) => ({
                        ...prev,
                        newPassword: e.target.value,
                      }))
                    }
                    placeholder="Enter new password"
                  />
                </div>
                <div className="space-y-2">
                  <Label>Confirm New Password</Label>
                  <Input
                    type="password"
                    value={passwordForm.confirmPassword}
                    onChange={(e) =>
                      setPasswordForm((prev) => ({
                        ...prev,
                        confirmPassword: e.target.value,
                      }))
                    }
                    placeholder="Confirm new password"
                  />
                </div>
              </div>

              <AlertDialogFooter>
                <AlertDialogCancel>Cancel</AlertDialogCancel>
                <AlertDialogAction
                  onClick={handlePasswordChange}
                  disabled={passwordLoading}
                >
                  {passwordLoading && (
                    <Icon
                      icon="heroicons:arrow-path"
                      className="mr-2 h-4 w-4 animate-spin"
                    />
                  )}
                  Change Password
                </AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>
        )}
      </div>
    </ProtectedRoute>
  );
};
export default UpdateUserPage;

-- app/[locale]/(protected)/users/create/page.tsx =>
"use client";
import React, { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useRouter } from "next/navigation";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import { Icon } from "@/components/ui/icon";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Link } from "@/i18n/routing";
import { usersApiClient } from "@/lib/api/clients/users.client";
import { useAuthStore } from "@/lib/stores/auth.store";
import { toast } from "sonner";
import { cn } from "@/lib/utils/ui.utils";
import { ProtectedRoute } from "@/components/route/protected-route";
import { USER_PERMISSIONS } from "@/lib/constants/permissions";
// Form schema
const createUserSchema = z.object({
  name: z.string().min(2, "Name must be at least 2 characters"),
  email: z.string().email("Please enter a valid email address"),
  userType: z.enum(
    [
      "ADMIN",
      "MANAGER",
      "SUPPORT",
      "SELLER",
      "LIVREUR",
      "CUSTOMER",
      "BUYER",
      "VENDOR",
      "WAREHOUSE",
      "DISPATCHER",
    ],
    {
      required_error: "Please select a user type",
    }
  ),
  phone: z.string().optional(),
  city: z.string().optional(),
  roleId: z.string().optional(),
  profile: z
    .object({
      department: z.string().optional(),
      notes: z.string().optional(),
    })
    .optional(),
  isActive: z.boolean().default(true),
});
type CreateUserFormData = z.infer<typeof createUserSchema>;
// User type configurations
const userTypeConfig = {
  ADMIN: {
    label: "Admin",
    description: "Full system access and management",
    color: "destructive" as const,
    icon: "heroicons:shield-check",
    requiredUserTypes: ["ADMIN"], // Only ADMINs can create ADMINs
  },
  MANAGER: {
    label: "Manager",
    description: "Team and operations management",
    color: "warning" as const,
    icon: "heroicons:user-group",
    requiredUserTypes: ["ADMIN", "MANAGER"], // ADMINs and MANAGERs can create MANAGERs
  },
  SUPPORT: {
    label: "Support",
    description: "Customer support and assistance",
    color: "info" as const,
    icon: "heroicons:chat-bubble-left-right",
    requiredUserTypes: ["ADMIN", "MANAGER"],
  },
  SELLER: {
    label: "Seller",
    description: "Sales and client management",
    color: "success" as const,
    icon: "heroicons:currency-dollar",
    requiredUserTypes: ["ADMIN", "MANAGER"],
  },
  LIVREUR: {
    label: "Delivery",
    description: "Package delivery and logistics",
    color: "secondary" as const,
    icon: "heroicons:truck",
    requiredUserTypes: ["ADMIN", "MANAGER"],
  },
  CUSTOMER: {
    label: "Customer",
    description: "External customer account",
    color: "primary" as const,
    icon: "heroicons:user",
    requiredUserTypes: ["ADMIN", "MANAGER", "SUPPORT"],
  },
  BUYER: {
    label: "Buyer",
    description: "Purchasing and procurement",
    color: "success" as const,
    icon: "heroicons:shopping-cart",
    requiredUserTypes: ["ADMIN", "MANAGER"],
  },
  VENDOR: {
    label: "Vendor",
    description: "External vendor/supplier",
    color: "warning" as const,
    icon: "heroicons:building-storefront",
    requiredUserTypes: ["ADMIN", "MANAGER"],
  },
  WAREHOUSE: {
    label: "Warehouse",
    description: "Inventory and warehouse management",
    color: "secondary" as const,
    icon: "heroicons:building-office-2",
    requiredUserTypes: ["ADMIN", "MANAGER"],
  },
  DISPATCHER: {
    label: "Dispatcher",
    description: "Logistics coordination",
    color: "info" as const,
    icon: "heroicons:map",
    requiredUserTypes: ["ADMIN", "MANAGER"],
  },
};
const CreateUserPageContent = () => {
  const router = useRouter();
  const { hasPermission, user } = useAuthStore();
  const [loading, setLoading] = useState(false);
  const [roles, setRoles] = useState<
    Array<{
      id: string;
      name: string;
      description?: string;
      userTypes: string[];
    }>
  >([]);

  // Check permissions
  const canCreateUsers = hasPermission(USER_PERMISSIONS.CREATE_USER);

  const {
    register,
    handleSubmit,
    watch,
    setValue,
    formState: { errors },
    reset,
  } = useForm<CreateUserFormData>({
    resolver: zodResolver(createUserSchema),
    defaultValues: {
      isActive: true,
      profile: {
        department: "",
        notes: "",
      },
    },
  });

  const watchedUserType = watch("userType");

  // Check if current user can create the selected user type
  const canCreateUserType = (targetUserType: string) => {
    if (!user?.userType || !targetUserType) return false;

    const config =
      userTypeConfig[targetUserType as keyof typeof userTypeConfig];
    return config?.requiredUserTypes.includes(user.userType) || false;
  };

  // Filter user types based on current user's permissions
  const availableUserTypes = Object.entries(userTypeConfig).filter(
    ([key, config]) => canCreateUserType(key)
  );

  // Fetch available roles
  useEffect(() => {
    const fetchRoles = async () => {
      try {
        // Mock data for now - replace with actual API call
        setRoles([
          {
            id: "1",
            name: "System Admin",
            description: "Full system access",
            userTypes: ["ADMIN"],
          },
          {
            id: "2",
            name: "Operations Manager",
            description: "Operations oversight",
            userTypes: ["MANAGER"],
          },
          {
            id: "cmfayo10k0006584key16cnw2",
            name: "Sales Representative",
            description: "Sales operations",
            userTypes: ["SELLER"],
          },
          {
            id: "4",
            name: "Support Agent",
            description: "Customer support",
            userTypes: ["SUPPORT"],
          },
          {
            id: "5",
            name: "Delivery Driver",
            description: "Package delivery",
            userTypes: ["LIVREUR"],
          },
          {
            id: "6",
            name: "Standard Customer",
            description: "Customer access",
            userTypes: ["CUSTOMER"],
          },
          {
            id: "7",
            name: "Procurement Officer",
            description: "Purchasing operations",
            userTypes: ["BUYER"],
          },
          {
            id: "8",
            name: "Vendor Account",
            description: "Vendor portal access",
            userTypes: ["VENDOR"],
          },
          {
            id: "9",
            name: "Warehouse Staff",
            description: "Inventory management",
            userTypes: ["WAREHOUSE"],
          },
          {
            id: "10",
            name: "Logistics Coordinator",
            description: "Dispatch operations",
            userTypes: ["DISPATCHER"],
          },
        ]);
      } catch (error) {
        console.error("Failed to fetch roles:", error);
      }
    };

    fetchRoles();
  }, []);

  // Filter roles based on selected user type
  const availableRoles = roles.filter((role) =>
    watchedUserType ? role.userTypes.includes(watchedUserType) : true
  );

  // Handle user type change
  useEffect(() => {
    if (watchedUserType && availableRoles.length > 0) {
      setValue("roleId", availableRoles[0].id);
    }
  }, [watchedUserType, availableRoles, setValue]);

  const onSubmit = async (data: CreateUserFormData) => {
    if (!canCreateUsers) {
      toast.error("You don't have permission to create users");
      return;
    }

    // Additional check: verify user can create this specific user type
    if (!canCreateUserType(data.userType)) {
      toast.error(`You don't have permission to create ${data.userType} users`);
      return;
    }

    setLoading(true);
    try {
      const result = await usersApiClient.createUser({
        ...data,
        profile: data.profile || {},
      });

      if (result.success) {
        toast.success(
          "User created successfully! Password reset email has been sent."
        );
        router.push("/users");
      } else {
        toast.error(result.error?.message || "Failed to create user");
      }
    } catch (error) {
      console.error("Error creating user:", error);
      toast.error("An unexpected error occurred");
    } finally {
      setLoading(false);
    }
  };

  const handleFormSubmit = () => {
    handleSubmit(onSubmit)();
  };

  if (!canCreateUsers) {
    return (
      <div className="container mx-auto py-8">
        <Alert color="destructive">
          <Icon icon="heroicons:exclamation-triangle" className="h-4 w-4" />
          <AlertDescription>
            You don't have permission to create users. Please contact your
            administrator.
          </AlertDescription>
        </Alert>
      </div>
    );
  }

  return (
    <div className="container mx-auto py-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-default-900">
            Create New User
          </h1>
          <p className="text-default-600">
            Add a new user to your system. They will receive an email with login
            instructions.
          </p>
        </div>
        <Link href="/users">
          <Button variant="outline">
            <Icon icon="heroicons:arrow-left" className="w-4 h-4 mr-2" />
            Back to Users
          </Button>
        </Link>
      </div>

      {/* Permissions Alert */}
      {availableUserTypes.length === 0 && (
        <Alert color="warning">
          <Icon icon="heroicons:information-circle" className="h-4 w-4" />
          <AlertDescription>
            You don't have permission to create any user types. Please contact
            your administrator.
          </AlertDescription>
        </Alert>
      )}

      {/* Info Alert */}
      <Alert color="info" variant="soft">
        <Icon icon="heroicons:information-circle" className="h-4 w-4" />
        <AlertDescription>
          The user will be created with INACTIVE status and will receive an
          email with password reset instructions to complete their account
          setup.
        </AlertDescription>
      </Alert>

      {/* Current User Permissions Info */}
      {process.env.NODE_ENV === "development" && (
        <Alert color="secondary" variant="soft">
          <Icon icon="heroicons:code-bracket" className="h-4 w-4" />
          <AlertDescription>
            <strong>Dev Info:</strong> Your user type ({user?.userType}) can
            create:{" "}
            {availableUserTypes
              .map(([key, config]) => config.label)
              .join(", ") || "None"}
          </AlertDescription>
        </Alert>
      )}

      <div className="space-y-6">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Main Information */}
          <div className="lg:col-span-2 space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Icon icon="heroicons:user" className="w-5 h-5" />
                  Basic Information
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Name */}
                <div className="space-y-2">
                  <Label
                    htmlFor="name"
                    className={cn("", { "text-destructive": errors.name })}
                  >
                    Full Name *
                  </Label>
                  <Input
                    id="name"
                    {...register("name")}
                    placeholder="Enter full name"
                    className={cn("", {
                      "border-destructive focus:border-destructive":
                        errors.name,
                    })}
                  />
                  {errors.name && (
                    <p className="text-xs text-destructive">
                      {errors.name.message}
                    </p>
                  )}
                </div>

                {/* Email */}
                <div className="space-y-2">
                  <Label
                    htmlFor="email"
                    className={cn("", { "text-destructive": errors.email })}
                  >
                    Email Address *
                  </Label>
                  <Input
                    id="email"
                    type="email"
                    {...register("email")}
                    placeholder="user@example.com"
                    className={cn("", {
                      "border-destructive focus:border-destructive":
                        errors.email,
                    })}
                  />
                  {errors.email && (
                    <p className="text-xs text-destructive">
                      {errors.email.message}
                    </p>
                  )}
                </div>

                {/* Phone and City */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="phone">Phone Number</Label>
                    <Input
                      id="phone"
                      {...register("phone")}
                      placeholder="+1 (555) 123-4567"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="city">City</Label>
                    <Input
                      id="city"
                      {...register("city")}
                      placeholder="Enter city"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* User Type and Role */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Icon icon="heroicons:identification" className="w-5 h-5" />
                  User Type & Role
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* User Type */}
                <div className="space-y-2">
                  <Label
                    className={cn("", { "text-destructive": errors.userType })}
                  >
                    User Type *
                  </Label>
                  <Select
                    onValueChange={(value) =>
                      setValue("userType", value as any)
                    }
                    disabled={availableUserTypes.length === 0}
                  >
                    <SelectTrigger
                      className={cn("", {
                        "border-destructive": errors.userType,
                      })}
                    >
                      <SelectValue placeholder="Select user type" />
                    </SelectTrigger>
                    <SelectContent>
                      {availableUserTypes.map(([key, config]) => (
                        <SelectItem key={key} value={key}>
                          <div className="flex items-center gap-3">
                            <Icon icon={config.icon} className="w-4 h-4" />
                            <div>
                              <div className="font-medium">{config.label}</div>
                              <div className="text-xs text-muted-foreground">
                                {config.description}
                              </div>
                            </div>
                          </div>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  {errors.userType && (
                    <p className="text-xs text-destructive">
                      {errors.userType.message}
                    </p>
                  )}

                  {/* Show selected user type badge */}
                  {watchedUserType && (
                    <div className="mt-2">
                      <Badge
                        color={
                          userTypeConfig[
                            watchedUserType as keyof typeof userTypeConfig
                          ]?.color
                        }
                      >
                        <Icon
                          icon={
                            userTypeConfig[
                              watchedUserType as keyof typeof userTypeConfig
                            ]?.icon
                          }
                          className="w-3 h-3 mr-1"
                        />
                        {
                          userTypeConfig[
                            watchedUserType as keyof typeof userTypeConfig
                          ]?.label
                        }
                      </Badge>
                    </div>
                  )}

                  {/* Show permission warning for selected user type */}
                  {watchedUserType && !canCreateUserType(watchedUserType) && (
                    <Alert color="warning" variant="soft">
                      <Icon
                        icon="heroicons:exclamation-triangle"
                        className="h-4 w-4"
                      />
                      <AlertDescription>
                        You don't have permission to create{" "}
                        {
                          userTypeConfig[
                            watchedUserType as keyof typeof userTypeConfig
                          ]?.label
                        }{" "}
                        users.
                      </AlertDescription>
                    </Alert>
                  )}
                </div>

                {/* Role Selection */}
                {watchedUserType && canCreateUserType(watchedUserType) && (
                  <div className="space-y-2">
                    <Label>
                      Role
                      <TooltipProvider>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <Icon
                              icon="heroicons:information-circle"
                              className="w-4 h-4 ml-1 text-muted-foreground"
                            />
                          </TooltipTrigger>
                          <TooltipContent>
                            <p>
                              Roles define specific permissions for the selected
                              user type
                            </p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                    </Label>
                    <Select
                      onValueChange={(value) => setValue("roleId", value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select role" />
                      </SelectTrigger>
                      <SelectContent>
                        {availableRoles.map((role) => (
                          <SelectItem key={role.id} value={role.id}>
                            <div>
                              <div className="font-medium">{role.name}</div>
                              {role.description && (
                                <div className="text-xs text-muted-foreground">
                                  {role.description}
                                </div>
                              )}
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Additional Information */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Icon icon="heroicons:document-text" className="w-5 h-5" />
                  Additional Information
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="department">Department</Label>
                  <Input
                    id="department"
                    {...register("profile.department")}
                    placeholder="e.g., Sales, Marketing, IT"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="notes">Notes</Label>
                  <Textarea
                    id="notes"
                    {...register("profile.notes")}
                    placeholder="Any additional notes about this user..."
                    rows={3}
                  />
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Settings Sidebar */}
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Icon icon="heroicons:cog-6-tooth" className="w-5 h-5" />
                  Account Settings
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Active Account</Label>
                    <p className="text-xs text-muted-foreground">
                      Allow user to access the system
                    </p>
                  </div>
                  <Switch {...register("isActive")} defaultChecked={true} />
                </div>
              </CardContent>
            </Card>

            {/* Preview Card */}
            {watchedUserType && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Icon icon="heroicons:eye" className="w-5 h-5" />
                    Preview
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="text-sm">
                    <span className="text-muted-foreground">User Type:</span>
                    <div className="mt-1">
                      <Badge
                        color={
                          userTypeConfig[
                            watchedUserType as keyof typeof userTypeConfig
                          ]?.color
                        }
                      >
                        {
                          userTypeConfig[
                            watchedUserType as keyof typeof userTypeConfig
                          ]?.label
                        }
                      </Badge>
                    </div>
                  </div>

                  <div className="text-sm">
                    <span className="text-muted-foreground">
                      Initial Status:
                    </span>
                    <div className="mt-1">
                      <Badge color="secondary">INACTIVE</Badge>
                    </div>
                  </div>

                  <div className="text-sm text-muted-foreground">
                    User will receive an email with password setup instructions.
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Current User Permissions Card */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Icon icon="heroicons:shield-check" className="w-5 h-5" />
                  Your Permissions
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="text-sm">
                  <span className="text-muted-foreground">Your User Type:</span>
                  <div className="mt-1">
                    <Badge color="primary">{user?.userType}</Badge>
                  </div>
                </div>

                <div className="text-sm">
                  <span className="text-muted-foreground">Can Create:</span>
                  <div className="mt-1 space-y-1">
                    {availableUserTypes.length > 0 ? (
                      availableUserTypes.map(([key, config]) => (
                        <Badge
                          key={key}
                          color={config.color}
                          className="mr-1 mb-1"
                        >
                          {config.label}
                        </Badge>
                      ))
                    ) : (
                      <span className="text-xs text-muted-foreground">
                        No user types available
                      </span>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Help Card */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Icon
                    icon="heroicons:question-mark-circle"
                    className="w-5 h-5"
                  />
                  Need Help?
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <p className="text-sm text-muted-foreground">
                  Learn more about user creation and management in our
                  documentation.
                </p>
                <Button variant="outline" size="sm" className="w-full">
                  <Icon icon="heroicons:book-open" className="w-4 h-4 mr-2" />
                  View Documentation
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Form Actions */}
        <div className="flex items-center justify-end gap-4 pt-6 border-t">
          <Button
            type="button"
            variant="outline"
            onClick={() => router.push("/users")}
            disabled={loading}
          >
            Cancel
          </Button>
          <Button
            type="button"
            variant="outline"
            onClick={() => reset()}
            disabled={loading}
          >
            Reset Form
          </Button>
          <Button
            type="button"
            onClick={handleFormSubmit}
            disabled={
              loading ||
              availableUserTypes.length === 0 ||
              (watchedUserType && !canCreateUserType(watchedUserType))
            }
          >
            {loading && (
              <Icon
                icon="heroicons:arrow-path"
                className="mr-2 h-4 w-4 animate-spin"
              />
            )}
            Create User
          </Button>
        </div>
      </div>
    </div>
  );
};
// Main component wrapped with ProtectedRoute
const CreateUserPage = () => {
  return (
    <ProtectedRoute
      requiredPermissions={[USER_PERMISSIONS.CREATE_USER]}
      requiredAccessLevel="FULL"
      allowedAccountStatuses={["ACTIVE"]}
      requireValidation={true}
    >
      <CreateUserPageContent />
    </ProtectedRoute>
  );
};
export default CreateUserPage;

-- app/[locale]/[...not-found]/page.tsx
-- app/[locale]/auth/forgot-password/page.tsx
-- app/[locale]/auth/login/page.tsx
-- app/[locale]/auth/register/page.tsx
-- app/[locale]/auth/reset-password/page.tsx


Components Folder:
-- components/route/protected-route.tsx =>
"use client";
import { useEffect, useState, useRef, useMemo, useCallback } from "react";
import { useRouter, usePathname } from "next/navigation";
import { useAuthStore } from "@/lib/stores/auth.store";
import { useTenantStore } from "@/lib/stores/tenant.store";
import { toast } from "sonner";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import {
  AlertCircle,
  Info,
  CheckCircle,
  Clock,
  Shield,
  UserX,
} from "lucide-react";
interface ProtectedRouteProps {
  children: React.ReactNode;
  requiredRoles?: string[];
  requiredPermissions?: string[];
  requiredUserTypes?: string[]; // Added this line
  requiredAccessLevel?: "NO_ACCESS" | "PROFILE_ONLY" | "LIMITED" | "FULL";
  allowedAccountStatuses?: string[];
  requireValidation?: boolean;
}
interface AccessResult {
  allowed: boolean;
  reason?: string;
  redirectTo?: string;
  showMessage?: boolean;
  messageType?: "info" | "warning" | "error";
}
// Constants
const ACCESS_LEVELS = ["NO_ACCESS", "PROFILE_ONLY", "LIMITED", "FULL"] as const;
const STATUS_CONFIGS = {
  PENDING: {
    icon: Clock,
    color: "text-blue-600",
    message:
      "Your account is pending admin approval. You'll receive an email notification once approved.",
    action: null,
  },
  INACTIVE: {
    icon: Info,
    color: "text-orange-600",
    message:
      "Please complete your profile information to activate your account.",
    action: { label: "Complete Profile", path: "/profile/complete" },
  },
  PENDING_VALIDATION: {
    icon: Shield,
    color: "text-yellow-600",
    message:
      "Your profile is under review. You have limited access until validation is complete.",
    action: null,
  },
  ACTIVE: {
    icon: CheckCircle,
    color: "text-green-600",
    message: "Your account is fully active and validated.",
    action: null,
  },
  REJECTED: {
    icon: UserX,
    color: "text-red-600",
    message:
      "Your account has been rejected. Please contact support for assistance.",
    action: { label: "Contact Support", path: "/contact" },
  },
  SUSPENDED: {
    icon: UserX,
    color: "text-red-600",
    message: "Your account has been suspended. Please contact support.",
    action: { label: "Contact Support", path: "/contact" },
  },
} as const;
const BLOCKED_REASONS = {
  PENDING: "Your account is pending admin approval",
  REJECTED: "Your account has been rejected. Please contact support",
  SUSPENDED: "Your account has been suspended. Please contact support",
} as const;
export function ProtectedRoute({
  children,
  requiredRoles = [],
  requiredPermissions = [],
  requiredUserTypes = [], // Added this line
  requiredAccessLevel,
  allowedAccountStatuses = [],
  requireValidation = false,
}: ProtectedRouteProps) {
  const router = useRouter();
  const pathname = usePathname();
  const [isInitialized, setIsInitialized] = useState(false);
  const [accessResult, setAccessResult] = useState<AccessResult>({
    allowed: false,
  });
  const initRef = useRef(false);
  const lastCheckRef = useRef<string>("");

  // Stable selectors to prevent unnecessary re-renders
  const isAuthenticated = useAuthStore((state) => state.isAuthenticated);
  const isLoading = useAuthStore((state) => state.isLoading);
  const user = useAuthStore((state) => state.user);
  const error = useAuthStore((state) => state.error);
  const isCheckingAuth = useAuthStore((state) => state.isCheckingAuth);
  const accountStatus = useAuthStore((state) => state.accountStatus);
  const validationStatus = useAuthStore((state) => state.validationStatus);
  const accessLevel = useAuthStore((state) => state.accessLevel);
  const requirements = useAuthStore((state) => state.requirements);
  const hasBlueCheckmark = useAuthStore((state) => state.hasBlueCheckmark);

  // Stable method references
  const checkAuth = useAuthStore((state) => state.checkAuth);
  const isAccountBlocked = useAuthStore((state) => state.isAccountBlocked);
  const needsProfileCompletion = useAuthStore(
    (state) => state.needsProfileCompletion
  );
  const needsValidation = useAuthStore((state) => state.needsValidation);
  const hasRole = useAuthStore((state) => state.hasRole);
  const hasAnyPermission = useAuthStore((state) => state.hasAnyPermission);
  const hasUserType = useAuthStore((state) => state.hasUserType); // Added this line

  const { fetchCurrentTenant, currentTenant } = useTenantStore();

  // Stable access check function with useCallback
  const checkAccess = useCallback((): AccessResult => {
    // Not authenticated
    if (!isAuthenticated || !user) {
      return {
        allowed: false,
        redirectTo: "/auth/login",
        reason: "Authentication required",
      };
    }

    // Account blocked scenarios
    if (isAccountBlocked()) {
      const status = accountStatus;
      const reason = status
        ? BLOCKED_REASONS[status as keyof typeof BLOCKED_REASONS]
        : "Access denied";
      const messageType = status === "PENDING" ? "info" : "error";

      return {
        allowed: false,
        redirectTo: "/auth/login",
        reason,
        showMessage: true,
        messageType,
      };
    }

    // Profile completion check
    if (needsProfileCompletion()) {
      if (
        pathname.includes("/profile/complete") ||
        pathname.includes("/auth")
      ) {
        return { allowed: true };
      }

      return {
        allowed: false,
        redirectTo: "/profile/complete",
        reason: "Please complete your profile to continue",
        showMessage: true,
        messageType: "info",
      };
    }

    // Access level check
    if (requiredAccessLevel) {
      const requiredIndex = ACCESS_LEVELS.indexOf(requiredAccessLevel);
      const currentIndex = ACCESS_LEVELS.indexOf(accessLevel || "NO_ACCESS");

      if (currentIndex < requiredIndex) {
        const isValidationRequired =
          requiredAccessLevel === "FULL" && needsValidation();
        const reason = isValidationRequired
          ? "This feature requires profile validation"
          : "Insufficient access level";

        return {
          allowed: false,
          redirectTo: "/dashboard",
          reason,
          showMessage: true,
          messageType: "warning",
        };
      }
    }

    // Account status check
    if (allowedAccountStatuses.length > 0 && accountStatus) {
      if (!allowedAccountStatuses.includes(accountStatus)) {
        return {
          allowed: false,
          redirectTo: "/dashboard",
          reason: "Your account status does not allow access to this feature",
          showMessage: true,
          messageType: "warning",
        };
      }
    }

    // Validation requirement check
    if (requireValidation && validationStatus !== "VALIDATED") {
      return {
        allowed: false,
        redirectTo: "/dashboard",
        reason: "This feature requires a validated account",
        showMessage: true,
        messageType: "warning",
      };
    }

    // User type check (Added this section)
    if (requiredUserTypes.length > 0) {
      const hasRequiredUserType = requiredUserTypes.some(
        (userType) => user.userType === userType
      );
      if (!hasRequiredUserType) {
        return {
          allowed: false,
          redirectTo: "/unauthorized",
          reason: "Access restricted to specific user types",
          showMessage: true,
          messageType: "error",
        };
      }
    }

    // Role check
    if (requiredRoles.length > 0) {
      const hasRequiredRole = requiredRoles.some((role) => hasRole(role));
      if (!hasRequiredRole) {
        return {
          allowed: false,
          redirectTo: "/unauthorized",
          reason: "Insufficient role permissions",
          showMessage: true,
          messageType: "error",
        };
      }
    }

    // Permission check
    if (requiredPermissions.length > 0) {
      const hasRequiredPermissions = hasAnyPermission(requiredPermissions);
      if (!hasRequiredPermissions) {
        return {
          allowed: false,
          redirectTo: "/unauthorized",
          reason: "Insufficient permissions",
          showMessage: true,
          messageType: "error",
        };
      }
    }

    return { allowed: true };
  }, [
    isAuthenticated,
    user,
    isAccountBlocked,
    accountStatus,
    needsProfileCompletion,
    pathname,
    accessLevel,
    requiredAccessLevel,
    needsValidation,
    allowedAccountStatuses,
    requireValidation,
    validationStatus,
    requiredUserTypes, // Added this line
    requiredRoles,
    hasRole,
    requiredPermissions,
    hasAnyPermission,
  ]);

  // Create a unique key for the current state to prevent unnecessary re-checks
  const stateKey = useMemo(() => {
    return [
      isAuthenticated,
      user?.id,
      user?.userType, // Added this line
      accountStatus,
      validationStatus,
      accessLevel,
      pathname,
      requiredAccessLevel,
      JSON.stringify(allowedAccountStatuses),
      requireValidation,
      JSON.stringify(requiredUserTypes), // Added this line
      JSON.stringify(requiredRoles),
      JSON.stringify(requiredPermissions),
    ].join("|");
  }, [
    isAuthenticated,
    user?.id,
    user?.userType, // Added this line
    accountStatus,
    validationStatus,
    accessLevel,
    pathname,
    requiredAccessLevel,
    allowedAccountStatuses,
    requireValidation,
    requiredUserTypes, // Added this line
    requiredRoles,
    requiredPermissions,
  ]);

  // Initialize authentication - only once
  useEffect(() => {
    if (initRef.current) return;
    initRef.current = true;

    const initialize = async () => {
      try {
        if (!isCheckingAuth) {
          await checkAuth();
        }

        // Fetch tenant data if authenticated and not loaded
        if (isAuthenticated && user && !currentTenant) {
          await fetchCurrentTenant().catch(console.error);
        }
      } catch (error) {
        console.error("Auth initialization failed:", error);
      } finally {
        setIsInitialized(true);
      }
    };

    initialize();
  }, []); // Empty dependency array - only run once

  // Check access when state changes
  useEffect(() => {
    if (!isInitialized || isLoading || isCheckingAuth) return;

    // Prevent unnecessary re-checks
    if (lastCheckRef.current === stateKey) return;
    lastCheckRef.current = stateKey;

    const result = checkAccess();
    setAccessResult(result);
  }, [isInitialized, isLoading, isCheckingAuth, stateKey, checkAccess]);

  // Handle redirects and messages - separate effect to prevent loops
  useEffect(() => {
    if (!isInitialized || isLoading || isCheckingAuth || accessResult.allowed) {
      return;
    }

    // Only show message and redirect if we have a valid access result
    if (accessResult.reason) {
      if (accessResult.showMessage) {
        const toastFn = {
          error: toast.error,
          warning: toast.warning,
          info: toast.info,
        }[accessResult.messageType || "info"];

        toastFn(accessResult.reason);
      }

      if (accessResult.redirectTo) {
        router.replace(accessResult.redirectTo);
      }
    }
  }, [
    accessResult.allowed,
    accessResult.reason,
    accessResult.redirectTo,
    accessResult.showMessage,
    accessResult.messageType,
    isInitialized,
    isLoading,
    isCheckingAuth,
    router,
  ]);

  // Loading state
  if (!isInitialized || isLoading || isCheckingAuth) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center space-y-4">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto" />
          <p className="text-muted-foreground">Initializing...</p>
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="flex items-center justify-center min-h-screen p-4">
        <div className="max-w-md w-full space-y-6 text-center">
          <Alert variant="outline">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              <div className="font-medium">Authentication Error</div>
              <div className="text-sm mt-1">{error}</div>
            </AlertDescription>
          </Alert>
          <Button
            onClick={() => {
              initRef.current = false;
              window.location.reload();
            }}
            className="w-full"
          >
            Retry
          </Button>
        </div>
      </div>
    );
  }

  // Access denied state
  if (!accessResult.allowed) {
    const statusConfig = accountStatus
      ? STATUS_CONFIGS[accountStatus as keyof typeof STATUS_CONFIGS]
      : null;

    const IconComponent = statusConfig?.icon || AlertCircle;

    return (
      <div className="flex items-center justify-center min-h-screen p-4">
        <div className="max-w-md w-full space-y-6 text-center">
          <div className="flex justify-center">
            <div className="rounded-full bg-default-100 p-3">
              <IconComponent
                className={`h-12 w-12 ${
                  statusConfig?.color || "text-gray-600"
                }`}
              />
            </div>
          </div>

          <div className="space-y-3">
            <h3 className="text-xl font-semibold text-default-900">
              Access Status
            </h3>
            <p className="text-sm text-default-600 leading-relaxed">
              {statusConfig?.message || accessResult.reason || "Access denied"}
            </p>

            {hasBlueCheckmark && (
              <div className="flex items-center justify-center gap-2 text-sm text-green-600">
                <CheckCircle className="h-4 w-4" />
                Verified Account
              </div>
            )}

            {requirements.length > 0 && (
              <div className="text-left">
                <div className="text-sm font-medium text-default-700 mb-2">
                  Requirements:
                </div>
                <ul className="text-xs text-default-600 space-y-1">
                  {requirements.map((req, index) => (
                    <li key={index} className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 rounded-full bg-default-400" />
                      {req}
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>

          <div className="space-y-3">
            {statusConfig?.action && (
              <Button
                onClick={() => router.push(statusConfig.action!.path)}
                className="w-full"
              >
                {statusConfig.action.label}
              </Button>
            )}

            <Button
              variant="outline"
              onClick={() => router.push("/auth/login")}
              className="w-full"
            >
              Back to Login
            </Button>
          </div>

          {process.env.NODE_ENV === "development" && (
            <div className="mt-4 p-3 bg-muted rounded-lg text-xs text-left text-muted-foreground">
              <strong>Dev Info:</strong>
              <br />
              <strong>Account Status:</strong> {accountStatus}
              <br />
              <strong>Validation Status:</strong> {validationStatus}
              <br />
              <strong>Access Level:</strong> {accessLevel}
              <br />
              <strong>Required Access:</strong> {requiredAccessLevel || "Any"}
              <br />
              <strong>Required User Types:</strong>{" "}
              {requiredUserTypes.length > 0
                ? requiredUserTypes.join(", ")
                : "Any"}
              <br />
              <strong>Current User Type:</strong> {user?.userType || "None"}
              <br />
              <strong>Reason:</strong> {accessResult.reason}
            </div>
          )}
        </div>
      </div>
    );
  }

  return <>{children}</>;
}

-- components/users/users-table.tsx =>
import * as React from "react";
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Checkbox } from "@/components/ui/checkbox";
import { Icon } from "@/components/ui/icon";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Textarea } from "@/components/ui/textarea";
import { Link } from "@/i18n/routing";
import { usersApiClient } from "@/lib/api/clients/users.client";
import { useAuthStore } from "@/lib/stores/auth.store";
import { toast } from "sonner";
import * as XLSX from "xlsx";
// Enhanced Types
interface User {
  id: string;
  email: string;
  name: string;
  userType: string;
  avatar?: string;
  isActive: boolean;
  lastLogin?: string;
  createdAt: string;
  updatedAt: string;
  accountStatus:
    | "PENDING"
    | "INACTIVE"
    | "PENDING_VALIDATION"
    | "ACTIVE"
    | "REJECTED"
    | "SUSPENDED";
  validationStatus: "PENDING" | "VALIDATED" | "REJECTED";
  profileCompleted: boolean;
  validationNotes?: string;
  validatedAt?: string;
  profile?: {
    phone?: string;
    address?: {
      city?: string;
      state?: string;
      country?: string;
    };
    cin?: string;
    cinDocuments?: string[];
    bankDetails?: any;
    profilePhoto?: string;
  };
  role: {
    id: string;
    name: string;
    description?: string;
  };
  tenant: {
    name: string;
    slug: string;
  };
  createdBy?: {
    id: string;
    name: string;
    email: string;
  };
  validatedBy?: {
    id: string;
    name: string;
    email: string;
  };
}
interface UsersResponse {
  data: User[];
  meta: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
    hasNext: boolean;
    hasPrev: boolean;
  };
}
// Utility function to format dates
const formatDate = (dateString: string, format: "short" | "long" = "short") => {
  const date = new Date(dateString);
  if (format === "short") {
    return date.toLocaleDateString("en-US", {
      month: "short",
      day: "2-digit",
      year: "numeric",
    });
  }
  return date.toLocaleDateString("en-US", {
    year: "numeric",
    month: "short",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit",
  });
};
// Simple Table Components
const Table = ({
  children,
  className = "",
}: {
  children: React.ReactNode;
  className?: string;
}) => (
  <table className={`w-full text-left border-collapse ${className}`}>
    {children}
  </table>
);
const TableHeader = ({ children }: { children: React.ReactNode }) => (
  <thead className="bg-gray-50">{children}</thead>
);
const TableBody = ({ children }: { children: React.ReactNode }) => (
  <tbody>{children}</tbody>
);
const TableRow = ({
  children,
  className = "",
  ...props
}: {
  children: React.ReactNode;
  className?: string;
  [key: string]: any;
}) => (
  <tr className={`border-b hover:bg-gray-50 ${className}`} {...props}>
    {children}
  </tr>
);
const TableHead = ({
  children,
  className = "",
}: {
  children: React.ReactNode;
  className?: string;
}) => (
  <th
    className={`px-4 py-3 text-left text-sm font-medium text-gray-900 ${className}`}
  >
    {children}
  </th>
);
const TableCell = ({
  children,
  className = "",
}: {
  children: React.ReactNode;
  className?: string;
}) => (
  <td className={`px-4 py-3 text-sm text-gray-700 ${className}`}>{children}</td>
);
// Status badge components
const AccountStatusBadge = ({ status }: { status: string }) => {
  const statusConfig = {
    PENDING: {
      color: "bg-yellow-100 text-yellow-800",
      label: "Pending Approval",
      icon: "⏱️",
    },
    INACTIVE: {
      color: "bg-gray-100 text-gray-800",
      label: "Inactive",
      icon: "⏸️",
    },
    PENDING_VALIDATION: {
      color: "bg-blue-100 text-blue-800",
      label: "Pending Validation",
      icon: "📋",
    },
    ACTIVE: {
      color: "bg-green-100 text-green-800",
      label: "Active",
      icon: "✅",
    },
    REJECTED: {
      color: "bg-red-100 text-red-800",
      label: "Rejected",
      icon: "❌",
    },
    SUSPENDED: {
      color: "bg-red-100 text-red-800",
      label: "Suspended",
      icon: "🚫",
    },
  };

  const config =
    statusConfig[status as keyof typeof statusConfig] || statusConfig.INACTIVE;

  return (
    <span
      className={`inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium ${config.color}`}
    >
      <span>{config.icon}</span>
      {config.label}
    </span>
  );
};
const ValidationStatusBadge = ({
  status,
  isValidated,
}: {
  status: string;
  isValidated?: boolean;
}) => {
  if (status === "VALIDATED" && isValidated) {
    return (
      <span className="inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
        <span className="text-blue-500">🛡️</span>
        Validated
      </span>
    );
  }

  const statusConfig = {
    PENDING: {
      color: "bg-yellow-100 text-yellow-800",
      label: "Pending",
      icon: "⏱️",
    },
    VALIDATED: {
      color: "bg-green-100 text-green-800",
      label: "Validated",
      icon: "🛡️",
    },
    REJECTED: {
      color: "bg-red-100 text-red-800",
      label: "Rejected",
      icon: "⚠️",
    },
  };

  const config =
    statusConfig[status as keyof typeof statusConfig] || statusConfig.PENDING;

  return (
    <span
      className={`inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium ${config.color}`}
    >
      <span>{config.icon}</span>
      {config.label}
    </span>
  );
};
// Enhanced table columns
const createColumns = (
  onDelete: (user: User) => void,
  onApproveRegistration: (user: User) => void,
  onRejectRegistration: (user: User) => void,
  onValidateProfile: (user: User) => void,
  onRejectProfile: (user: User) => void,
  onSuspend: (user: User) => void,
  onReactivate: (user: User) => void,
  hasUpdatePermission: boolean,
  hasDeletePermission: boolean,
  hasApprovePermission: boolean,
  hasValidatePermission: boolean
): ColumnDef<User>[] => [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={
          table.getIsAllPageRowsSelected() ||
          (table.getIsSomePageRowsSelected() && "indeterminate")
        }
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
        aria-label="Select all"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
      />
    ),
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "name",
    header: "User",
    cell: ({ row }) => {
      const user = row.original;
      return (
        <div className="flex items-center space-x-3">
          <Avatar size="sm" shape="circle">
            <AvatarImage
              src={user.profile?.profilePhoto || user.avatar || ""}
              alt={user.name}
            />
            <AvatarFallback>
              {user.name
                ?.split(" ")
                .map((n) => n[0])
                .join("")
                .toUpperCase() || "U"}
            </AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium flex items-center gap-2">
              {user.name}
              {user.validationStatus === "VALIDATED" && (
                <span className="text-blue-500" title="Verified Profile">
                  🛡️
                </span>
              )}
            </div>
            <div className="text-sm text-gray-500">{user.email}</div>
            {user.profile?.phone && (
              <div className="text-xs text-gray-400">{user.profile.phone}</div>
            )}
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "userType",
    header: "User Type",
    cell: ({ row }) => {
      const userType = row.getValue("userType") as string;
      const colorMap: Record<string, string> = {
        ADMIN: "bg-red-100 text-red-800",
        MANAGER: "bg-orange-100 text-orange-800",
        SELLER: "bg-blue-100 text-blue-800",
        CUSTOMER: "bg-green-100 text-green-800",
        LIVREUR: "bg-purple-100 text-purple-800",
        SUPPORT: "bg-blue-100 text-blue-800",
        BUYER: "bg-green-100 text-green-800",
        VENDOR: "bg-orange-100 text-orange-800",
        WAREHOUSE: "bg-gray-100 text-gray-800",
        DISPATCHER: "bg-indigo-100 text-indigo-800",
      };
      return (
        <span
          className={`inline-flex px-2 py-1 rounded-full text-xs font-medium capitalize ${
            colorMap[userType] || "bg-gray-100 text-gray-800"
          }`}
        >
          {userType.toLowerCase().replace("_", " ")}
        </span>
      );
    },
  },
  {
    accessorKey: "accountStatus",
    header: "Account Status",
    cell: ({ row }) => {
      const status = row.getValue("accountStatus") as string;
      return <AccountStatusBadge status={status} />;
    },
  },
  {
    accessorKey: "validationStatus",
    header: "Validation",
    cell: ({ row }) => {
      const user = row.original;
      return (
        <ValidationStatusBadge
          status={user.validationStatus}
          isValidated={user.validationStatus === "VALIDATED"}
        />
      );
    },
  },
  {
    accessorKey: "role",
    header: "Role",
    cell: ({ row }) => {
      const role = row.original.role;
      return (
        <div>
          <div className="font-medium capitalize">{role.name}</div>
          {role.description && (
            <div className="text-sm text-gray-500">{role.description}</div>
          )}
        </div>
      );
    },
  },
  {
    accessorKey: "profileCompleted",
    header: "Profile",
    cell: ({ row }) => {
      const completed = row.getValue("profileCompleted") as boolean;
      return (
        <span
          className={`inline-flex px-2 py-1 rounded-full text-xs font-medium ${
            completed
              ? "bg-green-100 text-green-800"
              : "bg-yellow-100 text-yellow-800"
          }`}
        >
          {completed ? "Complete" : "Incomplete"}
        </span>
      );
    },
  },
  {
    accessorKey: "createdAt",
    header: "Created",
    cell: ({ row }) => {
      const user = row.original;
      return (
        <div>
          <div>{formatDate(user.createdAt)}</div>
          {user.createdBy && (
            <div className="text-xs text-gray-500">
              by {user.createdBy.name}
            </div>
          )}
        </div>
      );
    },
  },
  {
    id: "actions",
    header: "Actions",
    enableHiding: false,
    cell: ({ row }) => {
      const user = row.original;

      return (
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="sm">
              <Icon icon="heroicons:ellipsis-horizontal" className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem asChild>
              <Link href={`/users/${user.id}`}>
                <Icon icon="heroicons:eye" className="mr-2 h-4 w-4" />
                View Details
              </Link>
            </DropdownMenuItem>

            {hasUpdatePermission && (
              <DropdownMenuItem asChild>
                <Link href={`/users/${user.id}/edit`}>
                  <Icon
                    icon="heroicons:pencil-square"
                    className="mr-2 h-4 w-4"
                  />
                  Edit User
                </Link>
              </DropdownMenuItem>
            )}

            {/* Registration Approval Actions */}
            {hasApprovePermission && user.accountStatus === "PENDING" && (
              <>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={() => onApproveRegistration(user)}>
                  <Icon
                    icon="heroicons:check"
                    className="mr-2 h-4 w-4 text-green-600"
                  />
                  Approve Registration
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => onRejectRegistration(user)}>
                  <Icon
                    icon="heroicons:x-mark"
                    className="mr-2 h-4 w-4 text-red-600"
                  />
                  Reject Registration
                </DropdownMenuItem>
              </>
            )}

            {/* Profile Validation Actions */}
            {hasValidatePermission &&
              user.accountStatus === "PENDING_VALIDATION" && (
                <>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem onClick={() => onValidateProfile(user)}>
                    <Icon
                      icon="heroicons:shield-check"
                      className="mr-2 h-4 w-4 text-blue-600"
                    />
                    Validate Profile
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={() => onRejectProfile(user)}>
                    <Icon
                      icon="heroicons:shield-exclamation"
                      className="mr-2 h-4 w-4 text-red-600"
                    />
                    Reject Profile
                  </DropdownMenuItem>
                </>
              )}

            {/* Suspend/Reactivate Actions */}
            {hasUpdatePermission && (
              <>
                <DropdownMenuSeparator />
                {user.accountStatus === "SUSPENDED" ? (
                  <DropdownMenuItem onClick={() => onReactivate(user)}>
                    <Icon
                      icon="heroicons:play"
                      className="mr-2 h-4 w-4 text-green-600"
                    />
                    Reactivate User
                  </DropdownMenuItem>
                ) : (
                  user.accountStatus === "ACTIVE" && (
                    <DropdownMenuItem onClick={() => onSuspend(user)}>
                      <Icon
                        icon="heroicons:pause"
                        className="mr-2 h-4 w-4 text-orange-600"
                      />
                      Suspend User
                    </DropdownMenuItem>
                  )
                )}
              </>
            )}

            {hasDeletePermission && (
              <>
                <DropdownMenuSeparator />
                <DropdownMenuItem
                  className="text-red-600 focus:text-red-600"
                  onClick={() => onDelete(user)}
                >
                  <Icon icon="heroicons:trash" className="mr-2 h-4 w-4" />
                  Delete User
                </DropdownMenuItem>
              </>
            )}
          </DropdownMenuContent>
        </DropdownMenu>
      );
    },
  },
];
// Action Dialog Component
const ActionDialog = ({
  open,
  onOpenChange,
  title,
  description,
  onConfirm,
  loading,
  showMessage = false,
  message,
  onMessageChange,
}: {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  title: string;
  description: string;
  onConfirm: () => void;
  loading?: boolean;
  showMessage?: boolean;
  message?: string;
  onMessageChange?: (message: string) => void;
}) => (
  <Dialog open={open} onOpenChange={onOpenChange}>
    <DialogContent>
      <DialogHeader>
        <DialogTitle>{title}</DialogTitle>
        <DialogDescription>{description}</DialogDescription>
      </DialogHeader>

      {showMessage && (
        <div className="space-y-2">
          <label className="text-sm font-medium">Message (optional)</label>
          <Textarea
            placeholder="Add a message for the user..."
            value={message || ""}
            onChange={(e) => onMessageChange?.(e.target.value)}
          />
        </div>
      )}

      <DialogFooter>
        <Button variant="outline" onClick={() => onOpenChange(false)}>
          Cancel
        </Button>
        <Button onClick={onConfirm} disabled={loading}>
          {loading && (
            <Icon
              icon="heroicons:arrow-path"
              className="mr-2 h-4 w-4 animate-spin"
            />
          )}
          Confirm
        </Button>
      </DialogFooter>
    </DialogContent>
  </Dialog>
);
// Main Enhanced Users Table Component
const UsersTable = () => {
  const { hasPermission } = useAuthStore();
  const [users, setUsers] = React.useState<User[]>([]);
  const [loading, setLoading] = React.useState(true);
  const [pagination, setPagination] = React.useState({
    page: 1,
    limit: 10,
    total: 0,
    totalPages: 0,
  });

  // Table state
  const [sorting, setSorting] = React.useState<SortingState>([]);
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(
    []
  );
  const [columnVisibility, setColumnVisibility] =
    React.useState<VisibilityState>({});
  const [rowSelection, setRowSelection] = React.useState({});

  // Enhanced filters state
  const [filters, setFilters] = React.useState({
    search: "",
    userType: "",
    isActive: "",
    roleId: "",
    accountStatus: "",
    validationStatus: "",
  });

  // Dialog states
  const [deleteDialog, setDeleteDialog] = React.useState<{
    open: boolean;
    user: User | null;
  }>({ open: false, user: null });

  const [actionDialog, setActionDialog] = React.useState<{
    open: boolean;
    type:
      | "approve"
      | "reject"
      | "validate"
      | "rejectProfile"
      | "suspend"
      | "reactivate"
      | null;
    user: User | null;
    message: string;
  }>({ open: false, type: null, user: null, message: "" });

  const [actionLoading, setActionLoading] = React.useState(false);

  // Permissions
  const hasUpdatePermission = hasPermission("users:update");
  const hasDeletePermission = hasPermission("users:delete");
  const hasApprovePermission = hasPermission("users:approve");
  const hasValidatePermission = hasPermission("users:validate");

  // Fetch users data with enhanced filters
  const fetchUsers = React.useCallback(async () => {
    try {
      setLoading(true);

      const apiFilters: any = {
        page: pagination.page,
        limit: pagination.limit,
      };

      // Add all filters
      if (filters.search) apiFilters.search = filters.search;
      if (filters.userType) apiFilters.userType = filters.userType;
      if (filters.isActive !== "")
        apiFilters.isActive = filters.isActive === "true";
      if (filters.roleId) apiFilters.roleId = filters.roleId;
      if (filters.accountStatus)
        apiFilters.accountStatus = filters.accountStatus;
      if (filters.validationStatus)
        apiFilters.validationStatus = filters.validationStatus;

      const result = await usersApiClient.getUsers(apiFilters);

      if (result.data && result.data[0] && result.data[0].data) {
        setUsers(result.data[0].data);
        setPagination((prev) => ({
          ...prev,
          total: result.data[0].meta.total,
          totalPages: result.data[0].meta.totalPages,
        }));
      } else {
        throw new Error(result.error?.message || "Failed to fetch users");
      }
    } catch (error) {
      console.error("Error fetching users:", error);
      toast.error("Failed to fetch users");
    } finally {
      setLoading(false);
    }
  }, [pagination.page, pagination.limit, filters]);

  // Fetch special user lists
  const fetchPendingRegistrations = async () => {
    try {
      const result = await usersApiClient.getPendingRegistrations();
      if (result.success) {
        setUsers(result.data);
        setPagination((prev) => ({
          ...prev,
          total: result.data.length,
          totalPages: 1,
        }));
      }
    } catch (error) {
      toast.error("Failed to fetch pending registrations");
    }
  };

  const fetchPendingValidations = async () => {
    try {
      const result = await usersApiClient.getPendingValidations();
      if (result.success) {
        setUsers(result.data);
        setPagination((prev) => ({
          ...prev,
          total: result.data.length,
          totalPages: 1,
        }));
      }
    } catch (error) {
      toast.error("Failed to fetch pending validations");
    }
  };

  React.useEffect(() => {
    fetchUsers();
  }, [fetchUsers]);

  // Enhanced action handlers
  const handleApproveRegistration = async (user: User) => {
    setActionDialog({
      open: true,
      type: "approve",
      user,
      message: `Welcome to our platform! Your registration has been approved.`,
    });
  };

  const handleRejectRegistration = async (user: User) => {
    setActionDialog({
      open: true,
      type: "reject",
      user,
      message: `We're sorry, but your registration could not be approved at this time.`,
    });
  };

  const handleValidateProfile = async (user: User) => {
    setActionDialog({
      open: true,
      type: "validate",
      user,
      message: `Congratulations! Your profile has been validated.`,
    });
  };

  const handleRejectProfile = async (user: User) => {
    setActionDialog({
      open: true,
      type: "rejectProfile",
      user,
      message: `Your profile requires additional information. Please review and update.`,
    });
  };

  const handleSuspend = async (user: User) => {
    setActionDialog({ open: true, type: "suspend", user, message: "" });
  };

  const handleReactivate = async (user: User) => {
    setActionDialog({ open: true, type: "reactivate", user, message: "" });
  };

  const executeAction = async () => {
    if (!actionDialog.user || !actionDialog.type) return;

    setActionLoading(true);
    try {
      let result;
      const { user, type, message } = actionDialog;

      switch (type) {
        case "approve":
          result = await usersApiClient.approveRegistration(user.id, {
            approve: true,
            message,
          });
          break;
        case "reject":
          result = await usersApiClient.approveRegistration(user.id, {
            approve: false,
            message,
          });
          break;
        case "validate":
          result = await usersApiClient.validateProfile(user.id, {
            action: "VALIDATE",
            notes: message,
          });
          break;
        case "rejectProfile":
          result = await usersApiClient.validateProfile(user.id, {
            action: "REJECT",
            notes: message,
          });
          break;
        case "suspend":
          result = await usersApiClient.suspendUser(user.id);
          break;
        case "reactivate":
          result = await usersApiClient.reactivateUser(user.id);
          break;
      }

      if (result?.success) {
        toast.success(`User ${type} successfully`);
        fetchUsers();
        setActionDialog({ open: false, type: null, user: null, message: "" });
      } else {
        toast.error(result?.error?.message || `Failed to ${type} user`);
      }
    } catch (error) {
      toast.error(`Failed to ${actionDialog.type} user`);
    } finally {
      setActionLoading(false);
    }
  };

  // Handle search with debouncing
  const searchTimerRef = React.useRef<NodeJS.Timeout>();

  const debouncedSearch = React.useCallback((value: string) => {
    if (searchTimerRef.current) {
      clearTimeout(searchTimerRef.current);
    }
    searchTimerRef.current = setTimeout(() => {
      setFilters((prev) => ({ ...prev, search: value }));
      setPagination((prev) => ({ ...prev, page: 1 }));
    }, 500);
  }, []);

  // Handle filter changes
  const handleFilterChange = (key: string, value: string) => {
    setFilters((prev) => ({ ...prev, [key]: value }));
    setPagination((prev) => ({ ...prev, page: 1 }));
  };

  // Handle pagination
  const handlePageChange = (newPage: number) => {
    setPagination((prev) => ({ ...prev, page: newPage }));
  };

  const handlePageSizeChange = (newSize: number) => {
    setPagination((prev) => ({ ...prev, limit: newSize, page: 1 }));
  };

  // Handle delete user
  const handleDeleteUser = async (user: User) => {
    try {
      const response = await usersApiClient.deleteUser(user.id);
      if (response.success) {
        toast.success("User deleted successfully");
        fetchUsers();
        setDeleteDialog({ open: false, user: null });
      } else {
        toast.error(response.error?.message || "Failed to delete user");
      }
    } catch (error) {
      console.error("Error deleting user:", error);
      toast.error("Failed to delete user");
    }
  };

  // Enhanced export with new fields
  const handleExportExcel = () => {
    try {
      const exportData = users.map((user) => ({
        Name: user.name,
        Email: user.email,
        "User Type": user.userType,
        Role: user.role.name,
        Phone: user.profile?.phone || "N/A",
        "Account Status": user.accountStatus,
        "Validation Status": user.validationStatus,
        "Profile Completed": user.profileCompleted ? "Yes" : "No",
        "Is Active": user.isActive ? "Active" : "Inactive",
        "Last Login": user.lastLogin
          ? formatDate(user.lastLogin, "long")
          : "Never",
        "Created At": formatDate(user.createdAt, "long"),
        "Created By": user.createdBy?.name || "Self-registered",
        "Validated At": user.validatedAt
          ? formatDate(user.validatedAt, "long")
          : "N/A",
        "Validated By": user.validatedBy?.name || "N/A",
        CIN: user.profile?.cin || "N/A",
        Location: user.profile?.address
          ? `${user.profile.address.city || ""}, ${
              user.profile.address.state || ""
            }, ${user.profile.address.country || ""}`.replace(
              /^,\s*|,\s*$/g,
              ""
            )
          : "N/A",
      }));

      const worksheet = XLSX.utils.json_to_sheet(exportData);
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, "Users");

      const maxWidth = exportData.reduce(
        (w, r) => Math.max(w, Object.keys(r).length),
        10
      );
      worksheet["!cols"] = Array(maxWidth).fill({ width: 20 });

      const today = new Date().toISOString().split("T")[0];
      XLSX.writeFile(workbook, `users-export-${today}.xlsx`);
      toast.success("Users data exported successfully");
    } catch (error) {
      console.error("Export error:", error);
      toast.error("Failed to export users data");
    }
  };

  // Table configuration
  const columns = React.useMemo(
    () =>
      createColumns(
        (user) => setDeleteDialog({ open: true, user }),
        handleApproveRegistration,
        handleRejectRegistration,
        handleValidateProfile,
        handleRejectProfile,
        handleSuspend,
        handleReactivate,
        hasUpdatePermission,
        hasDeletePermission,
        hasApprovePermission,
        hasValidatePermission
      ),
    [
      hasUpdatePermission,
      hasDeletePermission,
      hasApprovePermission,
      hasValidatePermission,
    ]
  );

  const table = useReactTable({
    data: users,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    onRowSelectionChange: setRowSelection,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      rowSelection,
    },
    manualPagination: true,
    pageCount: pagination.totalPages,
  });

  const selectedRowsCount = table.getFilteredSelectedRowModel().rows.length;

  return (
    <div className="space-y-4">
      {/* Quick Action Buttons */}
      <div className="flex flex-wrap gap-2">
        {hasApprovePermission && (
          <Button
            variant="outline"
            size="sm"
            onClick={fetchPendingRegistrations}
          >
            <Icon icon="heroicons:user-plus" className="h-4 w-4 mr-2" />
            Pending Registrations
          </Button>
        )}
        {hasValidatePermission && (
          <Button variant="outline" size="sm" onClick={fetchPendingValidations}>
            <Icon icon="heroicons:document-check" className="h-4 w-4 mr-2" />
            Pending Validations
          </Button>
        )}
        <Button variant="outline" size="sm" onClick={fetchUsers}>
          <Icon icon="heroicons:users" className="h-4 w-4 mr-2" />
          All Users
        </Button>
      </div>

      {/* Enhanced Filters */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="flex-1 space-y-2 sm:space-y-0 sm:flex sm:items-center sm:space-x-2">
          <Input
            placeholder="Search users..."
            className="sm:max-w-sm"
            onChange={(e) => debouncedSearch(e.target.value)}
          />

          <Select
            value={filters.userType || "all"}
            onValueChange={(value) =>
              handleFilterChange("userType", value === "all" ? "" : value)
            }
          >
            <SelectTrigger className="sm:w-[150px]">
              <SelectValue placeholder="User Type" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Types</SelectItem>
              <SelectItem value="ADMIN">Admin</SelectItem>
              <SelectItem value="MANAGER">Manager</SelectItem>
              <SelectItem value="SELLER">Seller</SelectItem>
              <SelectItem value="CUSTOMER">Customer</SelectItem>
              <SelectItem value="LIVREUR">Livreur</SelectItem>
              <SelectItem value="SUPPORT">Support</SelectItem>
              <SelectItem value="BUYER">Buyer</SelectItem>
              <SelectItem value="VENDOR">Vendor</SelectItem>
              <SelectItem value="WAREHOUSE">Warehouse</SelectItem>
              <SelectItem value="DISPATCHER">Dispatcher</SelectItem>
            </SelectContent>
          </Select>

          <Select
            value={filters.accountStatus || "all"}
            onValueChange={(value) =>
              handleFilterChange("accountStatus", value === "all" ? "" : value)
            }
          >
            <SelectTrigger className="sm:w-[160px]">
              <SelectValue placeholder="Account Status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Status</SelectItem>
              <SelectItem value="PENDING">Pending</SelectItem>
              <SelectItem value="INACTIVE">Inactive</SelectItem>
              <SelectItem value="PENDING_VALIDATION">
                Pending Validation
              </SelectItem>
              <SelectItem value="ACTIVE">Active</SelectItem>
              <SelectItem value="REJECTED">Rejected</SelectItem>
              <SelectItem value="SUSPENDED">Suspended</SelectItem>
            </SelectContent>
          </Select>

          <Select
            value={filters.validationStatus || "all"}
            onValueChange={(value) =>
              handleFilterChange(
                "validationStatus",
                value === "all" ? "" : value
              )
            }
          >
            <SelectTrigger className="sm:w-[140px]">
              <SelectValue placeholder="Validation" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Validation</SelectItem>
              <SelectItem value="PENDING">Pending</SelectItem>
              <SelectItem value="VALIDATED">Validated</SelectItem>
              <SelectItem value="REJECTED">Rejected</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="flex items-center space-x-2">
          <Button variant="outline" size="sm" onClick={handleExportExcel}>
            <Icon
              icon="heroicons:document-arrow-down"
              className="h-4 w-4 mr-2"
            />
            Export Excel
          </Button>
        </div>
      </div>

      {/* Table */}
      <div className="border rounded-lg overflow-hidden">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead key={header.id}>
                    {header.isPlaceholder
                      ? null
                      : flexRender(
                          header.column.columnDef.header,
                          header.getContext()
                        )}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {loading ? (
              Array.from({ length: 5 }).map((_, index) => (
                <TableRow key={index}>
                  {columns.map((_, cellIndex) => (
                    <TableCell key={cellIndex}>
                      <div className="h-4 bg-gray-200 rounded animate-pulse" />
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow
                  key={row.id}
                  data-state={row.getIsSelected() && "selected"}
                >
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id}>
                      {flexRender(
                        cell.column.columnDef.cell,
                        cell.getContext()
                      )}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell
                  colSpan={columns.length}
                  className="h-24 text-center"
                >
                  No users found.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>

      {/* Pagination */}
      <div className="flex flex-col sm:flex-row items-center justify-between gap-4">
        <div className="text-sm text-gray-600">
          Showing {(pagination.page - 1) * pagination.limit + 1} to{" "}
          {Math.min(pagination.page * pagination.limit, pagination.total)} of{" "}
          {pagination.total} users
        </div>

        <div className="flex items-center space-x-2">
          <div className="flex items-center space-x-2">
            <span className="text-sm">Rows per page:</span>
            <Select
              value={pagination.limit.toString()}
              onValueChange={(value) => handlePageSizeChange(Number(value))}
            >
              <SelectTrigger className="w-16">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="5">5</SelectItem>
                <SelectItem value="10">10</SelectItem>
                <SelectItem value="20">20</SelectItem>
                <SelectItem value="50">50</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="flex items-center space-x-1">
            <Button
              variant="outline"
              size="sm"
              onClick={() => handlePageChange(1)}
              disabled={pagination.page === 1}
            >
              <Icon icon="heroicons:chevron-double-left" className="h-4 w-4" />
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => handlePageChange(pagination.page - 1)}
              disabled={pagination.page === 1}
            >
              <Icon icon="heroicons:chevron-left" className="h-4 w-4" />
            </Button>

            <span className="px-3 py-1 text-sm">
              Page {pagination.page} of {pagination.totalPages}
            </span>

            <Button
              variant="outline"
              size="sm"
              onClick={() => handlePageChange(pagination.page + 1)}
              disabled={pagination.page >= pagination.totalPages}
            >
              <Icon icon="heroicons:chevron-right" className="h-4 w-4" />
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => handlePageChange(pagination.totalPages)}
              disabled={pagination.page >= pagination.totalPages}
            >
              <Icon icon="heroicons:chevron-double-right" className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </div>

      {/* Delete Confirmation Dialog */}
      <AlertDialog
        open={deleteDialog.open}
        onOpenChange={(open) => setDeleteDialog({ open, user: null })}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete the
              user
              <strong> {deleteDialog.user?.name}</strong> and remove all
              associated data.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={() =>
                deleteDialog.user && handleDeleteUser(deleteDialog.user)
              }
              className="bg-red-600 text-white hover:bg-red-700"
            >
              Delete User
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Action Dialog */}
      <ActionDialog
        open={actionDialog.open}
        onOpenChange={(open) =>
          setActionDialog({ open, type: null, user: null, message: "" })
        }
        title={`${
          actionDialog.type === "approve"
            ? "Approve Registration"
            : actionDialog.type === "reject"
            ? "Reject Registration"
            : actionDialog.type === "validate"
            ? "Validate Profile"
            : actionDialog.type === "rejectProfile"
            ? "Reject Profile"
            : actionDialog.type === "suspend"
            ? "Suspend User"
            : actionDialog.type === "reactivate"
            ? "Reactivate User"
            : ""
        }`}
        description={`Are you sure you want to ${actionDialog.type} ${actionDialog.user?.name}?`}
        onConfirm={executeAction}
        loading={actionLoading}
        showMessage={[
          "approve",
          "reject",
          "validate",
          "rejectProfile",
        ].includes(actionDialog.type || "")}
        message={actionDialog.message}
        onMessageChange={(message) =>
          setActionDialog((prev) => ({ ...prev, message }))
        }
      />
    </div>
  );
};
export default UsersTable;

Lib Folder:
-- lib/api/clients/auth.client.ts =>
import { BaseApiClient, ApiResponse } from "../base.client";
import type {
  LoginRequest,
  RegisterRequest,
  LoginResponse,
  RegisterResponse,
  AccountStatusResponse,
  RefreshTokenRequest,
  CompleteProfileRequest,
  ResetPasswordRequest,
  ForgotPasswordRequest,
} from "@/lib/types/auth/auth.types";
export class AuthApiClient extends BaseApiClient {
  constructor() {
    super("auth");
  }

  async login(request: LoginRequest): Promise<ApiResponse<LoginResponse>> {
    return this.post<LoginResponse>("/api/auth/login", request);
  }

  async register(
    request: RegisterRequest
  ): Promise<ApiResponse<RegisterResponse>> {
    return this.post<RegisterResponse>("/api/auth/register", request);
  }

  async refreshToken(
    request: RefreshTokenRequest
  ): Promise<ApiResponse<LoginResponse>> {
    return this.post<LoginResponse>("/api/auth/refresh", request);
  }

  async logout(request: RefreshTokenRequest): Promise<ApiResponse<void>> {
    return this.post<void>("/api/auth/logout", request);
  }

  async getProfile(): Promise<ApiResponse<any>> {
    return this.get<any>("/api/auth/profile");
  }

  async getAccountStatus(): Promise<ApiResponse<AccountStatusResponse>> {
    return this.get<AccountStatusResponse>("/api/auth/status");
  }

  async completeProfile(
    request: CompleteProfileRequest
  ): Promise<ApiResponse<any>> {
    return this.patch<any>("/api/auth/complete-profile", request);
  }

  async forgotPassword(
    request: ForgotPasswordRequest
  ): Promise<ApiResponse<{ message: string }>> {
    return this.post<{ message: string }>("/api/auth/forgot-password", request);
  }

  async resetPassword(
    request: ResetPasswordRequest
  ): Promise<ApiResponse<{ message: string }>> {
    return this.post<{ message: string }>("/api/auth/reset-password", request);
  }
}
export const authApiClient = new AuthApiClient();


-- lib/api/clients/users.client.ts =>
import { BaseApiClient, ApiResponse } from "../base.client";
import type {
  User,
  CreateUserRequest,
  UpdateUserRequest,
  UserFilters,
} from "@/lib/types/database/schema.types";
// New types for the enhanced functionality
export interface ApproveRegistrationRequest {
  approve: boolean;
  message?: string;
}
export interface ValidateProfileRequest {
  action: "VALIDATE" | "REJECT";
  notes?: string;
}
export interface CompleteProfileRequest {
  phone?: string;
  city?: string;
  address: string;
  cin: string;
  cinDocuments?: string[];
  bankDetails?: any;
  profilePhoto?: string;
}
export class UsersApiClient extends BaseApiClient {
  constructor() {
    super("users");
  }

  // ========================================
  // USER MANAGEMENT ENDPOINTS
  // ========================================

  async createUser(request: CreateUserRequest): Promise<ApiResponse<User>> {
    return this.post<User>("/api/users", request);
  }

  async getUsers(filters?: UserFilters) {
    return this.getPaginated<User>("/api/users", filters);
  }

  async getUserById(id: string): Promise<ApiResponse<User>> {
    return this.get<User>(`/api/users/${id}`);
  }

  async updateUser(
    id: string,
    request: UpdateUserRequest
  ): Promise<ApiResponse<User>> {
    return this.patch<User>(`/api/users/${id}`, request);
  }

  async deleteUser(id: string): Promise<ApiResponse<void>> {
    return this.delete<void>(`/api/users/${id}`);
  }

  async deactivateUser(id: string): Promise<ApiResponse<User>> {
    return this.patch<User>(`/api/users/${id}/deactivate`, {});
  }

  async reactivateUser(id: string): Promise<ApiResponse<User>> {
    return this.patch<User>(`/api/users/${id}/reactivate`, {});
  }

  async changeUserPassword(
    id: string,
    request: {
      currentPassword: string;
      newPassword: string;
    }
  ): Promise<ApiResponse<{ message: string }>> {
    return this.patch<{ message: string }>(
      `/api/users/${id}/change-password`,
      request
    );
  }

  // ========================================
  // NEW ENHANCED USER WORKFLOW ENDPOINTS
  // ========================================

  /**
   * Get all users with PENDING account status awaiting admin approval
   */
  async getPendingRegistrations(): Promise<ApiResponse<User[]>> {
    return this.get<User[]>("/api/users/pending-registrations");
  }

  /**
   * Get all users with PENDING_VALIDATION status awaiting profile validation
   */
  async getPendingValidations(): Promise<ApiResponse<User[]>> {
    return this.get<User[]>("/api/users/pending-validations");
  }

  /**
   * Approve or reject a user registration (for PENDING users)
   */
  async approveRegistration(
    userId: string,
    request: ApproveRegistrationRequest
  ): Promise<ApiResponse<User>> {
    return this.patch<User>(
      `/api/users/${userId}/approve-registration`,
      request
    );
  }

  /**
   * Validate or reject a user profile (for PENDING_VALIDATION users)
   */
  async validateProfile(
    userId: string,
    request: ValidateProfileRequest
  ): Promise<ApiResponse<User>> {
    return this.patch<User>(`/api/users/${userId}/validate-profile`, request);
  }

  /**
   * Suspend a user account (moves to SUSPENDED status)
   */
  async suspendUser(userId: string): Promise<ApiResponse<User>> {
    return this.patch<User>(`/api/users/${userId}/suspend`, {});
  }

  /**
   * Complete user profile (moves from INACTIVE to PENDING_VALIDATION)
   */
  async completeProfile(
    request: CompleteProfileRequest
  ): Promise<ApiResponse<User>> {
    return this.patch<User>("/api/users/me/complete-profile", request);
  }

  /**
   * Get current user profile
   */
  async getMyProfile(): Promise<ApiResponse<User>> {
    return this.get<User>("/api/users/me");
  }

  /**
   * Assign a role to a user
   */
  async assignRole(userId: string, roleId: string): Promise<ApiResponse<User>> {
    return this.patch<User>(`/api/users/${userId}/role`, { roleId });
  }

  /**
   * Get user permissions based on their role and account status
   */
  async getUserPermissions(userId: string): Promise<
    ApiResponse<{
      userId: string;
      email: string;
      userType: string;
      accountStatus: string;
      validationStatus: string;
      role: any;
      permissions: string[];
      isActive: boolean;
    }>
  > {
    return this.get(`/api/users/${userId}/permissions`);
  }

  // ========================================
  // BULK OPERATIONS
  // ========================================

  /**
   * Bulk approve multiple registrations
   */
  async bulkApproveRegistrations(
    userIds: string[],
    message?: string
  ): Promise<ApiResponse<{ successful: number; failed: string[] }>> {
    return this.post("/api/users/bulk/approve-registrations", {
      userIds,
      message,
    });
  }

  /**
   * Bulk validate multiple profiles
   */
  async bulkValidateProfiles(
    userIds: string[],
    action: "VALIDATE" | "REJECT",
    notes?: string
  ): Promise<ApiResponse<{ successful: number; failed: string[] }>> {
    return this.post("/api/users/bulk/validate-profiles", {
      userIds,
      action,
      notes,
    });
  }

  /**
   * Bulk suspend multiple users
   */
  async bulkSuspendUsers(
    userIds: string[]
  ): Promise<ApiResponse<{ successful: number; failed: string[] }>> {
    return this.post("/api/users/bulk/suspend", { userIds });
  }

  /**
   * Export users with current filters
   */
  async exportUsers(filters?: UserFilters): Promise<
    ApiResponse<{
      downloadUrl: string;
      filename: string;
    }>
  > {
    return this.post("/api/users/export", { filters });
  }

  // ========================================
  // STATISTICS AND ANALYTICS
  // ========================================

  /**
   * Get user statistics for dashboard
   */
  async getUserStatistics(): Promise<
    ApiResponse<{
      total: number;
      active: number;
      inactive: number;
      pending: number;
      pendingValidation: number;
      suspended: number;
      rejected: number;
      validated: number;
      byUserType: Record<string, number>;
      recentRegistrations: number;
      pendingActions: number;
    }>
  > {
    return this.get("/api/users/statistics");
  }

  /**
   * Get user activity timeline
   */
  async getUserActivity(
    userId: string,
    limit?: number
  ): Promise<
    ApiResponse<
      Array<{
        id: string;
        action: string;
        timestamp: string;
        performedBy: {
          id: string;
          name: string;
          email: string;
        };
        details?: any;
      }>
    >
  > {
    const params = limit ? `?limit=${limit}` : "";
    return this.get(`/api/users/${userId}/activity${params}`);
  }
}
// Export singleton instance
export const usersApiClient = new UsersApiClient();

-- lib/api/clients/roles.client.ts =>
import { BaseApiClient, ApiResponse } from "../base.client";
import type { Role, User, UserType } from "@/lib/types/database/schema.types";
export interface CreateRoleRequest {
  name: string;
  description?: string;
  permissions: string[];
  userTypes: UserType[];
  isActive?: boolean;
}
export interface UpdateRoleRequest {
  name?: string;
  description?: string;
  permissions?: string[];
  userTypes?: UserType[];
  isActive?: boolean;
}
export class RolesApiClient extends BaseApiClient {
  constructor() {
    super("roles");
  }

  // ========================================
  // ROLE MANAGEMENT ENDPOINTS
  // ========================================

  async createRole(request: CreateRoleRequest): Promise<ApiResponse<Role>> {
    return this.post<Role>("/api/roles", request);
  }

  async getRoles(filters?: {
    page?: number;
    limit?: number;
    name?: string;
    userType?: UserType;
    isActive?: boolean;
  }) {
    return this.getPaginated<Role>("/api/roles", filters);
  }

  async getRoleById(id: string): Promise<ApiResponse<Role>> {
    return this.get<Role>(`/api/roles/${id}`);
  }

  async updateRole(
    id: string,
    request: UpdateRoleRequest
  ): Promise<ApiResponse<Role>> {
    return this.patch<Role>(`/api/roles/${id}`, request);
  }

  async deleteRole(id: string): Promise<ApiResponse<void>> {
    return this.delete<void>(`/api/roles/${id}`);
  }

  async deactivateRole(id: string): Promise<ApiResponse<Role>> {
    return this.patch<Role>(`/api/roles/${id}/deactivate`, {});
  }

  async reactivateRole(id: string): Promise<ApiResponse<Role>> {
    return this.patch<Role>(`/api/roles/${id}/reactivate`, {});
  }

  async duplicateRole(
    id: string,
    request: { name: string; userTypes?: UserType[] }
  ): Promise<ApiResponse<Role>> {
    return this.post<Role>(`/api/roles/${id}/duplicate`, request);
  }

  async getRoleUsers(id: string, filters?: { page?: number; limit?: number }) {
    return this.getPaginated<User>(`/api/roles/${id}/users`, filters);
  }

  async getRolesByUserType(userType: UserType) {
    return this.get<{ userType: UserType; roles: Role[] }>(
      `/api/roles/user-types/${userType}/roles`
    );
  }

  async getAvailablePermissions() {
    return this.get<{
      permissions: Array<{
        key: string;
        category: string;
        description: string;
        applicableUserTypes: UserType[];
      }>;
      categories: string[];
      userTypes: Array<{
        type: UserType;
        name: string;
        description: string;
        defaultPermissions: string[];
      }>;
    }>("/api/roles/permissions");
  }
}

// Export singleton instance
export const rolesApiClient = new RolesApiClient();

-- lib/api/clients/tenant.client.ts =>
import { BaseApiClient, ApiResponse } from "../base.client";
import type {
  Tenant,
  User,
  UserFilters,
} from "@/lib/types/database/schema.types";
export class TenantsApiClient extends BaseApiClient {
  constructor() {
    super("tenants");
  }

  // ========================================
  // TENANT MANAGEMENT ENDPOINTS
  // ========================================

  async createTenant(request: {
    name: string;
    slug: string;
    domain: string;
    logo?: string;
    settings?: any;
    isActive?: boolean;
  }): Promise<ApiResponse<Tenant>> {
    return this.post<Tenant>("/api/tenants", request);
  }

  async getTenants(filters?: {
    page?: number;
    limit?: number;
    name?: string;
    slug?: string;
    isActive?: boolean;
  }) {
    return this.getPaginated<Tenant>("/api/tenants", filters);
  }

  async getCurrentTenant(): Promise<ApiResponse<Tenant & { stats: any }>> {
    return this.get<Tenant & { stats: any }>("/api/tenants/current");
  }

  async updateCurrentTenant(request: {
    name?: string;
    slug?: string;
    domain?: string;
    logo?: string;
    settings?: any;
    isActive?: boolean;
  }): Promise<ApiResponse<Tenant>> {
    return this.patch<Tenant>("/api/tenants/current", request);
  }

  async getTenantStats() {
    return this.get<{
      totalUsers: number;
      activeUsers: number;
      newUsersThisMonth: number;
      totalRoles: number;
      totalParcels: number;
      parcelsThisMonth: number;
      totalInvoices: number;
      invoicesThisMonth: number;
      totalClaims: number;
      claimsThisMonth: number;
      recentActivity: any;
      trends: any;
    }>("/api/tenants/current/stats");
  }

  async getTenantUsers(filters?: UserFilters) {
    return this.getPaginated<User>("/api/tenants/current/users", filters);
  }

  async updateTenantSettings(settings: any): Promise<ApiResponse<Tenant>> {
    return this.patch<Tenant>("/api/tenants/current/settings", settings);
  }
}
// Export singleton instance
export const tenantsApiClient = new TenantsApiClient();


-- lib/api/base.client.ts =>
import axios, {
  AxiosInstance,
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError,
  InternalAxiosRequestConfig,
} from "axios";
import { API_CONFIG, ServiceName, ErrorCode } from "@/lib/config/api.config";
import { getTenantFromUrl } from "@/lib/utils/tenant.utils";
// Extend Axios request config to include metadata
interface ExtendedAxiosRequestConfig extends InternalAxiosRequestConfig {
  metadata?: {
    startTime: number;
  };
}
export interface ApiError {
  code: ErrorCode;
  message: string;
  details?: any;
  statusCode?: number;
  timestamp: string;
  requestId?: string;
}
export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: ApiError;
  message?: string;
  timestamp: string;
}
export interface PaginatedResponse<T = any> {
  data: T[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
    hasNext: boolean;
    hasPrev: boolean;
  };
}
export class BaseApiClient {
  protected client: AxiosInstance;
  protected serviceName: ServiceName;
  protected tenantId: string | null = null;

  constructor(serviceName: ServiceName, customConfig?: AxiosRequestConfig) {
    this.serviceName = serviceName;
    const serviceConfig = API_CONFIG.services[serviceName];

    // Get tenant ID from URL
    this.tenantId = getTenantFromUrl();

    // Create axios instance
    this.client = axios.create({
      baseURL: serviceConfig.baseURL,
      timeout: serviceConfig.timeout,
      headers: {
        ...API_CONFIG.headers.common,
        ...(this.tenantId && { [API_CONFIG.headers.tenant]: this.tenantId }),
      },
      ...customConfig,
    });

    this.setupInterceptors();
  }

  private setupInterceptors(): void {
    // Request interceptor
    this.client.interceptors.request.use(
      (config: ExtendedAxiosRequestConfig) => {
        // Add auth token
        const token = this.getAuthToken();
        if (token) {
          config.headers.Authorization = `Bearer ${token}`;
        }

        // Add tenant ID if available
        if (this.tenantId) {
          config.headers[API_CONFIG.headers.tenant] = this.tenantId;
        }

        // Add request timestamp for debugging
        config.metadata = { startTime: Date.now() };

        return config;
      },
      (error) => Promise.reject(this.transformError(error))
    );

    // Response interceptor
    this.client.interceptors.response.use(
      (response: AxiosResponse) => {
        // Log response time for monitoring
        const endTime = Date.now();
        const config = response.config as ExtendedAxiosRequestConfig;
        const startTime = config.metadata?.startTime || endTime;
        const duration = endTime - startTime;

        if (duration > 3000) {
          console.warn(
            `Slow API request detected: ${response.config.url} took ${duration}ms`
          );
        }

        return response;
      },
      async (error: AxiosError) => {
        // Handle token refresh
        if (error.response?.status === 401 && this.serviceName === "auth") {
          const refreshed = await this.attemptTokenRefresh();
          if (refreshed && error.config) {
            // Retry original request with new token
            const token = this.getAuthToken();
            if (token) {
              error.config.headers.Authorization = `Bearer ${token}`;
            }
            return this.client.request(error.config);
          }
        }

        return Promise.reject(this.transformError(error));
      }
    );
  }

  private getAuthToken(): string | null {
    if (typeof window === "undefined") return null;
    return localStorage.getItem("auth_token");
  }

  private async attemptTokenRefresh(): Promise<boolean> {
    try {
      const refreshToken = localStorage.getItem("refresh_token");
      if (!refreshToken) return false;

      // Only attempt refresh from auth service
      if (this.serviceName !== "auth") return false;

      const response = await axios.post(
        `${API_CONFIG.services.auth.baseURL}/api/auth/refresh`,
        { refreshToken },
        {
          headers: {
            "Content-Type": "application/json",
            ...(this.tenantId && {
              [API_CONFIG.headers.tenant]: this.tenantId,
            }),
          },
        }
      );

      if (response.data.success && response.data.data) {
        const { accessToken, refreshToken: newRefreshToken } =
          response.data.data;
        localStorage.setItem("auth_token", accessToken);
        if (newRefreshToken) {
          localStorage.setItem("refresh_token", newRefreshToken);
        }
        return true;
      }
    } catch (error) {
      console.error("Token refresh failed:", error);
      this.clearAuthTokens();
    }
    return false;
  }

  private clearAuthTokens(): void {
    if (typeof window !== "undefined") {
      localStorage.removeItem("auth_token");
      localStorage.removeItem("refresh_token");
    }
  }

  private transformError(error: any): ApiError {
    const timestamp = new Date().toISOString();

    // Network or timeout errors
    if (!error.response) {
      return {
        code: error.code === "ECONNABORTED" ? "TIMEOUT_ERROR" : "NETWORK_ERROR",
        message: error.message || "Network error occurred",
        timestamp,
      };
    }

    // HTTP errors with response
    const { status, data } = error.response;
    const statusCode = status;

    // Map status codes to error codes
    let code: ErrorCode = "SERVER_ERROR";
    switch (statusCode) {
      case 400:
        code = "VALIDATION_ERROR";
        break;
      case 401:
        code = "AUTH_ERROR";
        break;
      case 403:
        code = "PERMISSION_ERROR";
        break;
      case 404:
        code = "NOT_FOUND";
        break;
      case 409:
        code = "CONFLICT";
        break;
      case 429:
        code = "RATE_LIMIT_ERROR";
        break;
      case 500:
      case 502:
      case 503:
      case 504:
        code = "SERVER_ERROR";
        break;
    }

    return {
      code,
      message:
        data?.message || data?.error || error.message || "An error occurred",
      details: data?.details,
      statusCode,
      timestamp,
      requestId: data?.requestId,
    };
  }

  // Generic HTTP methods
  protected async get<T>(
    endpoint: string,
    config?: AxiosRequestConfig
  ): Promise<ApiResponse<T>> {
    try {
      const response = await this.client.get(endpoint, config);
      return this.transformResponse<T>(response);
    } catch (error) {
      throw error; // Error is already transformed by interceptor
    }
  }

  protected async post<T>(
    endpoint: string,
    data?: any,
    config?: AxiosRequestConfig
  ): Promise<ApiResponse<T>> {
    try {
      const response = await this.client.post(endpoint, data, config);
      return this.transformResponse<T>(response);
    } catch (error) {
      throw error;
    }
  }

  protected async put<T>(
    endpoint: string,
    data?: any,
    config?: AxiosRequestConfig
  ): Promise<ApiResponse<T>> {
    try {
      const response = await this.client.put(endpoint, data, config);
      return this.transformResponse<T>(response);
    } catch (error) {
      throw error;
    }
  }

  protected async patch<T>(
    endpoint: string,
    data?: any,
    config?: AxiosRequestConfig
  ): Promise<ApiResponse<T>> {
    try {
      const response = await this.client.patch(endpoint, data, config);
      return this.transformResponse<T>(response);
    } catch (error) {
      throw error;
    }
  }

  protected async delete<T>(
    endpoint: string,
    config?: AxiosRequestConfig
  ): Promise<ApiResponse<T>> {
    try {
      const response = await this.client.delete(endpoint, config);
      return this.transformResponse<T>(response);
    } catch (error) {
      throw error;
    }
  }

  // Paginated requests
  protected async getPaginated<T>(
    endpoint: string,
    params?: Record<string, any>,
    config?: AxiosRequestConfig
  ): Promise<PaginatedResponse<T>> {
    try {
      const response = await this.client.get(endpoint, {
        ...config,
        params: { ...params, ...config?.params },
      });

      // Handle different response formats
      if (response.data.data && response.data.pagination) {
        // Standard paginated format: { data: T[], pagination: {...} }
        return response.data;
      } else if (Array.isArray(response.data.data)) {
        // Array wrapped in data property: { data: T[] }
        return {
          data: response.data.data,
          pagination: {
            page: 1,
            limit: response.data.data.length,
            total: response.data.data.length,
            totalPages: 1,
            hasNext: false,
            hasPrev: false,
          },
        };
      } else if (Array.isArray(response.data)) {
        // Direct array response: T[]
        return {
          data: response.data,
          pagination: {
            page: 1,
            limit: response.data.length,
            total: response.data.length,
            totalPages: 1,
            hasNext: false,
            hasPrev: false,
          },
        };
      } else if (response.data.success && response.data.data) {
        // Wrapped in success envelope: { success: true, data: T[] }
        const data = Array.isArray(response.data.data)
          ? response.data.data
          : [response.data.data];
        return {
          data,
          pagination: {
            page: 1,
            limit: data.length,
            total: data.length,
            totalPages: 1,
            hasNext: false,
            hasPrev: false,
          },
        };
      }

      // Log the actual response structure for debugging
      console.error("Unexpected response structure:", {
        data: response.data,
        dataType: typeof response.data,
        isArray: Array.isArray(response.data),
        hasData: "data" in response.data,
        hasSuccess: "success" in response.data,
        hasPagination: "pagination" in response.data,
      });

      throw new Error(
        `Invalid paginated response format. Expected array or paginated object, got: ${typeof response.data}`
      );
    } catch (error) {
      throw error;
    }
  }

  private transformResponse<T>(response: AxiosResponse): ApiResponse<T> {
    return {
      success: true,
      data: response.data.data || response.data,
      message: response.data.message,
      timestamp: new Date().toISOString(),
    };
  }

  // Utility methods
  public setTenant(tenantId: string): void {
    this.tenantId = tenantId;
    this.client.defaults.headers[API_CONFIG.headers.tenant] = tenantId;
  }

  public clearTenant(): void {
    this.tenantId = null;
    delete this.client.defaults.headers[API_CONFIG.headers.tenant];
  }

  public getServiceName(): ServiceName {
    return this.serviceName;
  }

  public getBaseURL(): string {
    return this.client.defaults.baseURL || "";
  }
}

-- lib/stores/auth.store.ts =>
import { create } from "zustand";
import { persist } from "zustand/middleware";
import { authApiClient } from "@/lib/api/clients/auth.client";
import { usersApiClient } from "@/lib/api/clients/users.client";
import { setCookie, getCookie, deleteCookie } from "@/lib/utils/cookie.utils";
import type { User, UserType } from "@/lib/types/database/schema.types";
import type {
  LoginRequest,
  RegisterRequest,
  AccountStatusResponse,
  AccountStatus,
  ValidationStatus,
  AccessLevel,
} from "@/lib/types/auth/auth.types";
interface AuthState {
  // Core state
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
  isInitialized: boolean;

  // Account status workflow
  accountStatus: AccountStatus | null;
  validationStatus: ValidationStatus | null;
  accessLevel: AccessLevel | null;
  requirements: string[];
  hasBlueCheckmark: boolean;

  // Token management
  accessToken: string | null;
  refreshToken: string | null;
  tokenExpiresAt: number | null;

  // Session management
  lastActivity: number;
  sessionTimeoutWarning: boolean;

  // Prevent infinite loops and duplicate calls
  isCheckingAuth: boolean;
  isRefreshing: boolean;
  checkAuthPromise: Promise<void> | null;
  refreshPromise: Promise<boolean> | null;

  // Actions
  login: (credentials: LoginRequest) => Promise<LoginResult>;
  register: (userData: RegisterRequest) => Promise<RegisterResult>;
  logout: () => Promise<void>;
  refreshSession: () => Promise<boolean>;
  checkAuth: () => Promise<void>;

  // Account status management
  updateAccountStatus: () => Promise<AccountStatusResponse | null>;
  completeProfile: (profileData: any) => Promise<ProfileResult>;

  // User management
  updateUser: (userData: Partial<User>) => void;
  updateProfile: (profileData: any) => Promise<boolean>;

  // Permission methods
  hasPermission: (permission: string) => boolean;
  hasAnyPermission: (permissions: string[]) => boolean;
  hasAllPermissions: (permissions: string[]) => boolean;
  hasRole: (roleName: string) => boolean;
  hasUserType: (userType: UserType) => boolean;

  // Access level utilities
  canAccessDashboard: () => boolean;
  canAccessFullFeatures: () => boolean;
  needsProfileCompletion: () => boolean;
  needsValidation: () => boolean;
  isAccountBlocked: () => boolean;

  // Session utilities
  updateLastActivity: () => void;
  isSessionExpired: () => boolean;
  getTimeUntilExpiry: () => number;
  setSessionTimeoutWarning: (show: boolean) => void;
  extendSession: () => Promise<void>;

  // State management
  clearError: () => void;
  setLoading: (loading: boolean) => void;
  getUserProfile: () => Promise<User | null>;
}
// Result types for better type safety
interface LoginResult {
  success: boolean;
  error?: string;
  redirectTo?: string;
  accessLevel?: AccessLevel;
  requirements?: string[];
  message?: string;
}
interface RegisterResult {
  success: boolean;
  error?: string;
  message?: string;
  accountStatus?: AccountStatus;
  nextSteps?: string[];
}
interface ProfileResult {
  success: boolean;
  error?: string;
  message?: string;
}
// Constants
const TOKEN_STORAGE_KEY = "auth_token";
const REFRESH_TOKEN_STORAGE_KEY = "refresh_token";
const SESSION_TIMEOUT = 30 * 60 * 1000; // 30 minutes
const AUTO_REFRESH_THRESHOLD = 2 * 60 * 1000; // 2 minutes before expiry
// Storage utilities
const tokenStorage = {
  store: (accessToken: string, refreshToken: string, expiresIn: number) => {
    if (typeof window === "undefined") return;

    const tokenExpiryDays = Math.ceil(expiresIn / (24 * 60 * 60));

    // Store in localStorage and cookies
    localStorage.setItem(TOKEN_STORAGE_KEY, accessToken);
    localStorage.setItem(REFRESH_TOKEN_STORAGE_KEY, refreshToken);
    setCookie(TOKEN_STORAGE_KEY, accessToken, tokenExpiryDays);
    setCookie(REFRESH_TOKEN_STORAGE_KEY, refreshToken, tokenExpiryDays);

    // Cross-tab communication
    localStorage.setItem("auth_login", Date.now().toString());
    localStorage.removeItem("auth_logout");
  },

  clear: () => {
    if (typeof window === "undefined") return;

    localStorage.removeItem(TOKEN_STORAGE_KEY);
    localStorage.removeItem(REFRESH_TOKEN_STORAGE_KEY);
    deleteCookie(TOKEN_STORAGE_KEY);
    deleteCookie(REFRESH_TOKEN_STORAGE_KEY);

    // Cross-tab communication
    localStorage.setItem("auth_logout", Date.now().toString());
    localStorage.removeItem("auth_login");
  },

  get: () => {
    if (typeof window === "undefined")
      return { accessToken: null, refreshToken: null };

    const accessToken =
      localStorage.getItem(TOKEN_STORAGE_KEY) || getCookie(TOKEN_STORAGE_KEY);
    const refreshToken =
      localStorage.getItem(REFRESH_TOKEN_STORAGE_KEY) ||
      getCookie(REFRESH_TOKEN_STORAGE_KEY);

    return { accessToken, refreshToken };
  },
};
// Access level helpers
const accessLevelHelpers = {
  canAccess: (current: AccessLevel | null, required: AccessLevel): boolean => {
    const levels = ["NO_ACCESS", "PROFILE_ONLY", "LIMITED", "FULL"];
    const currentIndex = levels.indexOf(current || "NO_ACCESS");
    const requiredIndex = levels.indexOf(required);
    return currentIndex >= requiredIndex;
  },

  getRedirectPath: (
    accessLevel: AccessLevel | null,
    accountStatus: AccountStatus | null
  ): string => {
    if (accessLevel === "PROFILE_ONLY" || accountStatus === "INACTIVE") {
      return "/profile/complete";
    }
    return "/dashboard";
  },
};
export const useAuthStore = create<AuthState>()(
  persist(
    (set, get) => ({
      // Initial state
      user: null,
      isAuthenticated: false,
      isLoading: false,
      error: null,
      isInitialized: false,
      accessToken: null,
      refreshToken: null,
      tokenExpiresAt: null,
      lastActivity: Date.now(),
      sessionTimeoutWarning: false,
      isCheckingAuth: false,
      isRefreshing: false,
      checkAuthPromise: null,
      refreshPromise: null,
      accountStatus: null,
      validationStatus: null,
      accessLevel: null,
      requirements: [],
      hasBlueCheckmark: false,

      // Optimized login method
      login: async (credentials: LoginRequest): Promise<LoginResult> => {
        set({ isLoading: true, error: null });

        try {
          const response = await authApiClient.login(credentials);

          if (!response.success || !response.data) {
            const error = response.error?.message || "Login failed";
            set({
              isLoading: false,
              error,
              isInitialized: true,
              isAuthenticated: false,
            });
            return { success: false, error };
          }

          const loginData = response.data;

          // Handle access denied scenarios
          if (loginData.accessDenied) {
            set({
              isLoading: false,
              error: loginData.message,
              isInitialized: true,
              isAuthenticated: false,
              accountStatus: loginData.accountStatus || null,
            });
            return {
              success: false,
              error: loginData.message,
              accessLevel: "NO_ACCESS",
            };
          }

          // Handle successful login
          if (
            loginData.user &&
            loginData.accessToken &&
            loginData.refreshToken
          ) {
            const {
              user,
              accessToken,
              refreshToken,
              expiresIn = 86400,
            } = loginData;
            const tokenExpiresAt = Date.now() + expiresIn * 1000;

            tokenStorage.store(accessToken, refreshToken, expiresIn);

            // Determine access level and redirect
            const accessLevel: AccessLevel = loginData.fullAccess
              ? "FULL"
              : loginData.limitedAccess
              ? "LIMITED"
              : loginData.profileAccess || loginData.requiresProfileCompletion
              ? "PROFILE_ONLY"
              : "NO_ACCESS";

            const redirectTo = accessLevelHelpers.getRedirectPath(
              accessLevel,
              loginData.accountStatus
            );

            set({
              user,
              isAuthenticated: true,
              isLoading: false,
              error: null,
              accessToken,
              refreshToken,
              tokenExpiresAt,
              lastActivity: Date.now(),
              isInitialized: true,
              sessionTimeoutWarning: false,
              accountStatus: loginData.accountStatus || user.accountStatus,
              validationStatus:
                loginData.validationStatus || user.validationStatus,
              accessLevel,
              requirements: [],
              hasBlueCheckmark: user.validationStatus === "VALIDATED",
              checkAuthPromise: null,
              refreshPromise: null,
            });

            return {
              success: true,
              redirectTo,
              accessLevel,
              message: loginData.message,
            };
          }

          const error = "Invalid login response";
          set({
            isLoading: false,
            error,
            isInitialized: true,
            isAuthenticated: false,
          });
          return { success: false, error };
        } catch (error: any) {
          const errorMessage = error?.message || "Network error during login";
          set({
            isLoading: false,
            error: errorMessage,
            isInitialized: true,
            isAuthenticated: false,
          });
          return { success: false, error: errorMessage };
        }
      },

      // Optimized register method
      register: async (userData: RegisterRequest): Promise<RegisterResult> => {
        set({ isLoading: true, error: null });

        try {
          const response = await authApiClient.register(userData);

          if (response.success && response.data) {
            const { success, message, accountStatus, nextSteps } =
              response.data;

            set({
              isLoading: false,
              error: null,
              isInitialized: true,
              accountStatus,
            });
            return { success: true, message, accountStatus, nextSteps };
          }

          const error = response.error?.message || "Registration failed";
          set({ isLoading: false, error, isInitialized: true });
          return { success: false, error };
        } catch (error: any) {
          const errorMessage =
            error?.message || "Network error during registration";
          set({ isLoading: false, error: errorMessage, isInitialized: true });
          return { success: false, error: errorMessage };
        }
      },

      // Optimized logout method
      logout: async () => {
        const { refreshToken } = get();

        // Clear tokens immediately for better UX
        tokenStorage.clear();
        set({
          user: null,
          isAuthenticated: false,
          accessToken: null,
          refreshToken: null,
          tokenExpiresAt: null,
          error: null,
          sessionTimeoutWarning: false,
          isInitialized: true,
          lastActivity: Date.now(),
          isCheckingAuth: false,
          isRefreshing: false,
          checkAuthPromise: null,
          refreshPromise: null,
          accountStatus: null,
          validationStatus: null,
          accessLevel: null,
          requirements: [],
          hasBlueCheckmark: false,
        });

        // Call logout API in background
        if (refreshToken) {
          authApiClient.logout({ refreshToken }).catch(console.error);
        }
      },

      // Optimized refresh session
      refreshSession: async (): Promise<boolean> => {
        const { isRefreshing, refreshPromise, refreshToken } = get();

        if (isRefreshing && refreshPromise) return refreshPromise;
        if (!refreshToken) {
          await get().logout();
          return false;
        }

        const promise = (async (): Promise<boolean> => {
          set({ isRefreshing: true });

          try {
            const response = await authApiClient.refreshToken({ refreshToken });

            if (response.success && response.data) {
              const {
                user,
                accessToken,
                refreshToken: newRefreshToken,
                expiresIn = 86400,
              } = response.data;
              const tokenExpiresAt = Date.now() + expiresIn * 1000;

              tokenStorage.store(accessToken, newRefreshToken, expiresIn);

              set({
                user,
                accessToken,
                refreshToken: newRefreshToken,
                tokenExpiresAt,
                lastActivity: Date.now(),
                sessionTimeoutWarning: false,
                isInitialized: true,
                isAuthenticated: true,
                isRefreshing: false,
                refreshPromise: null,
              });

              // Update account status in background
              get().updateAccountStatus().catch(console.error);
              return true;
            }

            set({ isRefreshing: false, refreshPromise: null });
            await get().logout();
            return false;
          } catch (error) {
            console.error("Token refresh failed:", error);
            set({ isRefreshing: false, refreshPromise: null });
            await get().logout();
            return false;
          }
        })();

        set({ refreshPromise: promise });
        return promise;
      },

      // Optimized checkAuth - prevents infinite loops
      checkAuth: async (): Promise<void> => {
        const state = get();

        // Early return conditions to prevent loops
        if (state.isCheckingAuth && state.checkAuthPromise)
          return state.checkAuthPromise;
        if (state.isRefreshing) return Promise.resolve();
        if (state.isInitialized && state.isAuthenticated && state.user)
          return Promise.resolve();

        const promise = (async (): Promise<void> => {
          set({ isCheckingAuth: true, checkAuthPromise: null });

          try {
            const { accessToken, refreshToken } = tokenStorage.get();

            if (!accessToken || !refreshToken) {
              set({
                isAuthenticated: false,
                isLoading: false,
                isInitialized: true,
                user: null,
                accessToken: null,
                refreshToken: null,
                tokenExpiresAt: null,
                isCheckingAuth: false,
                checkAuthPromise: null,
              });
              return;
            }

            // Set tokens without triggering additional calls
            set({ accessToken, refreshToken });

            // Single API call for profile
            const profileResponse = await authApiClient.getProfile();

            if (profileResponse.success && profileResponse.data) {
              const profile = profileResponse.data;

              set({
                user: profile,
                isAuthenticated: true,
                isLoading: false,
                lastActivity: Date.now(),
                isInitialized: true,
                error: null,
                isCheckingAuth: false,
                checkAuthPromise: null,
              });

              // Update status in background without blocking
              get().updateAccountStatus().catch(console.error);
            } else {
              // Try refresh without recursive calls
              set({ isCheckingAuth: false, checkAuthPromise: null });

              const currentState = get();
              if (!currentState.isRefreshing) {
                const refreshed = await get().refreshSession();
                if (!refreshed) {
                  set({
                    user: null,
                    isAuthenticated: false,
                    accessToken: null,
                    refreshToken: null,
                    tokenExpiresAt: null,
                    isLoading: false,
                    isInitialized: true,
                  });
                }
              }
            }
          } catch (error) {
            console.error("Auth check failed:", error);
            set({
              user: null,
              isAuthenticated: false,
              accessToken: null,
              refreshToken: null,
              tokenExpiresAt: null,
              isLoading: false,
              isInitialized: true,
              error:
                error instanceof Error
                  ? error.message
                  : "Authentication failed",
              isCheckingAuth: false,
              checkAuthPromise: null,
            });
          }
        })();

        set({ checkAuthPromise: promise });
        return promise;
      },

      // Account status management
      updateAccountStatus: async (): Promise<AccountStatusResponse | null> => {
        try {
          const response = await authApiClient.getAccountStatus();
          if (response.success && response.data) {
            const status = response.data;
            set({
              accountStatus: status.accountStatus,
              validationStatus: status.validationStatus,
              accessLevel: status.accessLevel,
              requirements: status.requirements,
              hasBlueCheckmark: status.hasBlueCheckmark,
            });
            return status;
          }
        } catch (error) {
          console.error("Failed to update account status:", error);
        }
        return null;
      },

      // Complete profile method
      completeProfile: async (profileData: any): Promise<ProfileResult> => {
        set({ isLoading: true, error: null });

        try {
          const response = await authApiClient.completeProfile(profileData);

          if (response.success && response.data) {
            const { user, message, accountStatus, validationStatus } =
              response.data;

            set({
              user,
              accountStatus,
              validationStatus,
              accessLevel: "LIMITED",
              isLoading: false,
            });

            return { success: true, message };
          }

          const error = response.error?.message || "Failed to complete profile";
          set({ isLoading: false, error });
          return { success: false, error };
        } catch (error: any) {
          const errorMessage = error?.message || "Network error";
          set({ isLoading: false, error: errorMessage });
          return { success: false, error: errorMessage };
        }
      },

      // Utility methods
      getUserProfile: async (): Promise<User | null> => {
        const { user, isAuthenticated, isCheckingAuth } = get();
        if (user && isAuthenticated) return user;
        if (!isCheckingAuth) await get().checkAuth();
        return get().user;
      },

      updateUser: (userData: Partial<User>) => {
        const { user } = get();
        if (user) set({ user: { ...user, ...userData } });
      },

      updateProfile: async (profileData: any): Promise<boolean> => {
        const { user } = get();
        if (!user) return false;

        try {
          const response = await usersApiClient.updateUser(
            user.id,
            profileData
          );
          if (response.success && response.data) {
            set({ user: response.data });
            return true;
          }
        } catch (error) {
          console.error("Profile update failed:", error);
        }
        return false;
      },

      // Permission methods
      hasPermission: (permission: string): boolean => {
        const { user } = get();
        if (!user?.role?.permissions) return false;
        const permissions = user.role.permissions;
        return permissions.includes(permission) || permissions.includes("*");
      },

      hasAnyPermission: (permissions: string[]): boolean =>
        permissions.some((permission) => get().hasPermission(permission)),

      hasAllPermissions: (permissions: string[]): boolean =>
        permissions.every((permission) => get().hasPermission(permission)),

      hasRole: (roleName: string): boolean => {
        const { user } = get();
        return user?.role?.name === roleName;
      },

      hasUserType: (userType: UserType): boolean => {
        const { user } = get();
        return user?.userType === userType;
      },

      // Access level utilities
      canAccessDashboard: (): boolean => {
        const { accessLevel } = get();
        return accessLevelHelpers.canAccess(accessLevel, "LIMITED");
      },

      canAccessFullFeatures: (): boolean => {
        const { accessLevel } = get();
        return accessLevelHelpers.canAccess(accessLevel, "FULL");
      },

      needsProfileCompletion: (): boolean => {
        const { accessLevel, accountStatus } = get();
        return accessLevel === "PROFILE_ONLY" || accountStatus === "INACTIVE";
      },

      needsValidation: (): boolean => {
        const { accountStatus, validationStatus } = get();
        return (
          accountStatus === "PENDING_VALIDATION" &&
          validationStatus === "PENDING"
        );
      },

      isAccountBlocked: (): boolean => {
        const { accessLevel, accountStatus } = get();
        return (
          accessLevel === "NO_ACCESS" ||
          accountStatus === "PENDING" ||
          accountStatus === "REJECTED" ||
          accountStatus === "SUSPENDED"
        );
      },

      // Session utilities
      updateLastActivity: () => set({ lastActivity: Date.now() }),

      isSessionExpired: (): boolean => {
        const { lastActivity } = get();
        return Date.now() - lastActivity > SESSION_TIMEOUT;
      },

      getTimeUntilExpiry: (): number => {
        const { tokenExpiresAt } = get();
        return tokenExpiresAt ? Math.max(0, tokenExpiresAt - Date.now()) : 0;
      },

      setSessionTimeoutWarning: (show: boolean) =>
        set({ sessionTimeoutWarning: show }),

      extendSession: async (): Promise<void> => {
        const { isAuthenticated, tokenExpiresAt, isRefreshing } = get();
        if (!isAuthenticated || isRefreshing) return;

        const timeUntilExpiry = tokenExpiresAt
          ? tokenExpiresAt - Date.now()
          : 0;
        if (timeUntilExpiry <= AUTO_REFRESH_THRESHOLD) {
          await get().refreshSession();
        } else {
          get().updateLastActivity();
        }
      },

      // State management
      clearError: () => set({ error: null }),
      setLoading: (loading: boolean) => set({ isLoading: loading }),
    }),
    {
      name: "auth-store",
      partialize: (state) => ({
        user: state.user,
        lastActivity: state.lastActivity,
        accountStatus: state.accountStatus,
        validationStatus: state.validationStatus,
        accessLevel: state.accessLevel,
      }),
      version: 5,
      migrate: (persistedState: any, version: number) => {
        if (version < 5) {
          return {
            user: persistedState?.user || null,
            lastActivity: persistedState?.lastActivity || Date.now(),
            accountStatus: persistedState?.accountStatus || null,
            validationStatus: persistedState?.validationStatus || null,
            accessLevel: persistedState?.accessLevel || null,
          };
        }
        return persistedState;
      },
    }
  )
);

-- lib/stores/tenant.store.ts =>
import { create } from "zustand";
import { persist } from "zustand/middleware";
import { tenantsApiClient } from "@/lib/api/clients/tenants.client";
import { sanitizeTenantData } from "@/lib/utils/data-sanitizer.utils";
import type { Tenant } from "@/lib/types/database/schema.types";
// Extended tenant interface for UI needs
export interface ExtendedTenant extends Tenant {
  // Additional UI-specific properties
  features?: string[];
  permissions?: string[];
  stats?: {
    totalUsers?: number;
    activeUsers?: number;
    totalParcels?: number;
    totalInvoices?: number;
    totalClaims?: number;
  };
}
interface TenantState {
  // Core state
  currentTenant: ExtendedTenant | null;
  tenants: ExtendedTenant[];
  isLoading: boolean;
  error: string | null;

  // Actions
  setTenant: (tenant: ExtendedTenant) => void;
  setTenants: (tenants: ExtendedTenant[]) => void;
  addTenant: (tenant: ExtendedTenant) => void;
  updateTenant: (tenantId: string, updates: Partial<ExtendedTenant>) => void;
  removeTenant: (tenantId: string) => void;
  clearCurrentTenant: () => void;

  // API Actions
  fetchTenants: () => Promise<void>;
  fetchCurrentTenant: () => Promise<void>;
  fetchTenantById: (tenantId: string) => Promise<ExtendedTenant | null>;
  switchTenant: (tenantId: string) => Promise<boolean>;
  updateTenantSettings: (settings: any) => Promise<boolean>;

  // Utility methods
  getTenantSettings: () => any;
  getCurrentTenantId: () => string | null;
  isTenantActive: (tenantId: string) => boolean;

  // Feature/Permission checking
  hasFeature: (feature: string) => boolean;
  getTenantPermissions: () => string[];
  canAccessResource: (resource: string) => boolean;

  // Error handling
  clearError: () => void;
  setError: (error: string) => void;
}
export const useTenantStore = create<TenantState>()(
  persist(
    (set, get) => ({
      // Initial state
      currentTenant: null,
      tenants: [],
      isLoading: false,
      error: null,

      // Basic setters with data sanitization
      setTenant: (tenant: ExtendedTenant) => {
        try {
          // Sanitize tenant data to prevent React render errors
          const sanitizedTenant = sanitizeTenantData(tenant);

          set({ currentTenant: sanitizedTenant, error: null });

          // Update API client tenant context
          if (typeof window !== "undefined") {
            localStorage.setItem("current_tenant_id", sanitizedTenant.id);
          }
        } catch (error) {
          console.error("Error setting tenant:", error);
          set({ error: "Failed to set tenant data" });
        }
      },

      setTenants: (tenants: ExtendedTenant[]) => {
        try {
          // Sanitize all tenant data
          const sanitizedTenants = tenants.map((tenant) =>
            sanitizeTenantData(tenant)
          );
          set({ tenants: sanitizedTenants, error: null });
        } catch (error) {
          console.error("Error setting tenants:", error);
          set({ error: "Failed to set tenants data" });
        }
      },

      addTenant: (tenant: ExtendedTenant) => {
        try {
          const { tenants } = get();
          const sanitizedTenant = sanitizeTenantData(tenant);
          set({ tenants: [...tenants, sanitizedTenant] });
        } catch (error) {
          console.error("Error adding tenant:", error);
          set({ error: "Failed to add tenant" });
        }
      },

      updateTenant: (tenantId: string, updates: Partial<ExtendedTenant>) => {
        try {
          const { tenants, currentTenant } = get();

          // Sanitize updates
          const sanitizedUpdates = sanitizeTenantData(updates);

          // Update in tenants list
          const updatedTenants = tenants.map((tenant) =>
            tenant.id === tenantId ? { ...tenant, ...sanitizedUpdates } : tenant
          );
          set({ tenants: updatedTenants });

          // Update current tenant if it's the one being updated
          if (currentTenant?.id === tenantId) {
            set({ currentTenant: { ...currentTenant, ...sanitizedUpdates } });
          }
        } catch (error) {
          console.error("Error updating tenant:", error);
          set({ error: "Failed to update tenant" });
        }
      },

      removeTenant: (tenantId: string) => {
        try {
          const { tenants, currentTenant } = get();

          const updatedTenants = tenants.filter(
            (tenant) => tenant.id !== tenantId
          );
          set({ tenants: updatedTenants });

          // Clear current tenant if it's the one being removed
          if (currentTenant?.id === tenantId) {
            get().clearCurrentTenant();
          }
        } catch (error) {
          console.error("Error removing tenant:", error);
          set({ error: "Failed to remove tenant" });
        }
      },

      clearCurrentTenant: () => {
        set({ currentTenant: null });

        if (typeof window !== "undefined") {
          localStorage.removeItem("current_tenant_id");
        }
      },

      // API Actions with enhanced error handling
      fetchTenants: async () => {
        set({ isLoading: true, error: null });

        try {
          const response = await tenantsApiClient.getTenants();

          if (response.success && response.data) {
            // Sanitize all tenant data
            const sanitizedTenants = Array.isArray(response.data)
              ? response.data.map((tenant) => sanitizeTenantData(tenant))
              : [sanitizeTenantData(response.data)];

            set({
              tenants: sanitizedTenants,
              isLoading: false,
              error: null,
            });
          } else {
            throw new Error(
              response.error?.message || "Failed to fetch tenants"
            );
          }
        } catch (paginatedError: any) {
          console.warn("Primary getTenants failed:", paginatedError.message);

          try {
            // Fallback to current tenant
            const fallbackResponse = await tenantsApiClient.getCurrentTenant();

            if (fallbackResponse.success && fallbackResponse.data) {
              const sanitizedTenant = sanitizeTenantData(fallbackResponse.data);

              set({
                tenants: [sanitizedTenant],
                isLoading: false,
                error: null,
              });
            } else {
              throw new Error(
                fallbackResponse.error?.message || "Failed to fetch tenant data"
              );
            }
          } catch (fallbackError: any) {
            console.error("All tenant fetch methods failed:", fallbackError);
            set({
              isLoading: false,
              error:
                fallbackError?.message ||
                "Network error while fetching tenants",
            });
          }
        }
      },

      fetchCurrentTenant: async () => {
        set({ isLoading: true, error: null });

        try {
          const response = await tenantsApiClient.getCurrentTenant();

          if (response.success && response.data) {
            // Sanitize tenant data to prevent React render errors
            const sanitizedTenant = sanitizeTenantData(response.data);

            set({
              currentTenant: sanitizedTenant,
              isLoading: false,
              error: null,
            });

            // Update localStorage
            if (typeof window !== "undefined") {
              localStorage.setItem("current_tenant_id", sanitizedTenant.id);
            }
          } else {
            set({
              isLoading: false,
              error:
                response.error?.message || "Failed to fetch current tenant",
            });
          }
        } catch (error: any) {
          console.error("Fetch current tenant failed:", error);
          set({
            isLoading: false,
            error: error?.message || "Network error while fetching tenant",
          });
        }
      },

      fetchTenantById: async (tenantId: string) => {
        set({ isLoading: true, error: null });

        try {
          const response = await tenantsApiClient.getCurrentTenant();

          if (response.success && response.data) {
            const sanitizedTenant = sanitizeTenantData(response.data);

            set({ isLoading: false, error: null });
            return sanitizedTenant;
          } else {
            set({
              isLoading: false,
              error: response.error?.message || "Failed to fetch tenant",
            });
            return null;
          }
        } catch (error: any) {
          console.error("Fetch tenant by ID failed:", error);
          set({
            isLoading: false,
            error: error?.message || "Network error while fetching tenant",
          });
          return null;
        }
      },

      switchTenant: async (tenantId: string) => {
        try {
          const { tenants } = get();

          // Check if tenant exists in local list
          const tenant = tenants.find((t) => t.id === tenantId);

          if (tenant) {
            get().setTenant(tenant);
            return true;
          } else {
            // Try to fetch the tenant
            const fetchedTenant = await get().fetchTenantById(tenantId);
            if (fetchedTenant) {
              get().setTenant(fetchedTenant);
              return true;
            }
          }

          set({ error: "Failed to switch to tenant" });
          return false;
        } catch (error: any) {
          console.error("Switch tenant failed:", error);
          set({ error: error?.message || "Failed to switch tenant" });
          return false;
        }
      },

      updateTenantSettings: async (settings: any) => {
        try {
          const response = await tenantsApiClient.updateTenantSettings(
            settings
          );

          if (response.success && response.data) {
            const { currentTenant } = get();
            if (currentTenant) {
              // Sanitize settings data
              const sanitizedSettings = sanitizeTenantData({
                settings: response.data.settings,
              });

              get().updateTenant(currentTenant.id, {
                settings: sanitizedSettings.settings,
              });
            }
            return true;
          } else {
            set({
              error: response.error?.message || "Failed to update settings",
            });
            return false;
          }
        } catch (error: any) {
          console.error("Update tenant settings failed:", error);
          set({
            error: error?.message || "Network error while updating settings",
          });
          return false;
        }
      },

      // Utility methods (no changes needed)
      getTenantSettings: () => {
        const { currentTenant } = get();
        return currentTenant?.settings || {};
      },

      getCurrentTenantId: () => {
        const { currentTenant } = get();
        return currentTenant?.id || null;
      },

      isTenantActive: (tenantId: string) => {
        const { currentTenant } = get();
        return currentTenant?.id === tenantId && currentTenant?.isActive;
      },

      // Feature checking
      hasFeature: (feature: string) => {
        const { currentTenant } = get();
        if (!currentTenant?.features) return false;
        return currentTenant.features.includes(feature);
      },

      getTenantPermissions: () => {
        const { currentTenant } = get();
        return currentTenant?.permissions || [];
      },

      canAccessResource: (resource: string) => {
        const permissions = get().getTenantPermissions();
        return permissions.includes(resource) || permissions.includes("*");
      },

      // Error handling
      clearError: () => {
        set({ error: null });
      },

      setError: (error: string) => {
        set({ error });
      },
    }),
    {
      name: "tenant-store",
      partialize: (state) => ({
        currentTenant: state.currentTenant,
        tenants: state.tenants,
        // Don't persist loading states or errors
      }),
      version: 2, // Increment version to handle migration
      migrate: (persistedState: any, version: number) => {
        if (version < 2) {
          // Sanitize any persisted data that might have problematic objects
          return {
            currentTenant: persistedState?.currentTenant
              ? sanitizeTenantData(persistedState.currentTenant)
              : null,
            tenants: Array.isArray(persistedState?.tenants)
              ? persistedState.tenants.map((tenant: any) =>
                  sanitizeTenantData(tenant)
                )
              : [],
          };
        }
        return persistedState;
      },
    }
  )
);
// Helper function to initialize tenant from URL/localStorage with error handling
export const initializeTenantFromContext = async () => {
  if (typeof window === "undefined") return;

  try {
    const store = useTenantStore.getState();

    // Try to get tenant from localStorage first
    const storedTenantId = localStorage.getItem("current_tenant_id");

    if (storedTenantId && !store.currentTenant) {
      // Try to find tenant in local list or fetch it
      const existingTenant = store.tenants.find((t) => t.id === storedTenantId);

      if (existingTenant) {
        store.setTenant(existingTenant);
      } else {
        // Fetch tenant data
        await store.fetchTenantById(storedTenantId);
      }
    }
  } catch (error) {
    console.error("Failed to initialize tenant context:", error);
    // Clear potentially corrupted data
    if (typeof window !== "undefined") {
      localStorage.removeItem("current_tenant_id");
    }
  }
};
// Auto-initialize on client side with error handling
if (typeof window !== "undefined") {
  // Initialize tenant context when store is first accessed
  setTimeout(() => {
    initializeTenantFromContext().catch((error) => {
      console.error("Auto-initialization failed:", error);
    });
  }, 0);
}

Providers Folder:
-- providers/auth.provider.tsx =>
"use client";
import React, { useEffect, useState, useCallback, useRef } from "react";
import { useRouter, usePathname } from "next/navigation";
import { useAuthStore } from "@/lib/stores/auth.store";
import { useTenantStore } from "@/lib/stores/tenant.store";
import { getTenantFromUrl } from "@/lib/utils/tenant.utils";
import { toast } from "sonner";
interface AuthProviderProps {
  children: React.ReactNode;
}
// Constants
const THROTTLE_DELAY = 500;
const SESSION_CHECK_INTERVAL = 60 * 1000; // 1 minute
const SESSION_WARNING_TIME = 5 * 60 * 1000; // 5 minutes
const ACTIVITY_THRESHOLD = 5 * 60 * 1000; // 5 minutes
const ONLINE_RECHECK_DELAY = 2000;
const PUBLIC_ROUTES = ["/auth", "/"];
const LIMITED_ROUTES = [
  "/dashboard",
  "/profile",
  "/settings",
  "/validation-status",
];
const ACCOUNT_STATUS_MESSAGES = {
  PENDING: "Your account is pending admin approval.",
  REJECTED: "Your account has been rejected. Please contact support.",
  SUSPENDED: "Your account has been suspended. Please contact support.",
} as const;
const REQUIREMENT_MESSAGES = {
  "Admin approval required": "Your account is pending admin approval.",
  "Complete profile information": "Please complete your profile information.",
  "Profile validation by admin": "Your profile is being validated by an admin.",
} as const;
export default function AuthProvider({ children }: AuthProviderProps) {
  const [isInitialized, setIsInitialized] = useState(false);
  const initializationRef = useRef(false);
  const timersRef = useRef<{
    eventThrottle?: NodeJS.Timeout;
    sessionCheck?: NodeJS.Timeout;
    routeValidation?: NodeJS.Timeout;
  }>({});

  const router = useRouter();
  const pathname = usePathname();

  const {
    checkAuth,
    isAuthenticated,
    logout,
    user,
    isInitialized: authInitialized,
    isCheckingAuth,
    accountStatus,
    accessLevel,
    requirements,
    updateAccountStatus,
    isAccountBlocked,
    needsProfileCompletion,
    needsValidation,
  } = useAuthStore();

  const { fetchCurrentTenant, currentTenant } = useTenantStore();

  // Cleanup timers utility
  const cleanupTimers = useCallback(() => {
    Object.values(timersRef.current).forEach((timer) => {
      if (timer) clearTimeout(timer);
    });
    timersRef.current = {};
  }, []);

  // Route access validation
  const validateRouteAccess = useCallback(() => {
    if (!isAuthenticated || !user || !pathname) return true;

    // Skip validation for public routes
    if (PUBLIC_ROUTES.some((route) => pathname.startsWith(route))) {
      return true;
    }

    // Check blocked account
    if (isAccountBlocked()) {
      const message =
        ACCOUNT_STATUS_MESSAGES[
          accountStatus as keyof typeof ACCOUNT_STATUS_MESSAGES
        ] || "Access denied.";
      toast.error(message);
      router.replace("/auth/login");
      return false;
    }

    // Handle profile completion requirement
    if (needsProfileCompletion()) {
      if (
        !pathname.includes("/profile/complete") &&
        !pathname.includes("/auth")
      ) {
        toast.info("Please complete your profile to continue.");
        router.replace("/profile/complete");
        return false;
      }
      return true;
    }

    // Handle validation requirement
    if (needsValidation()) {
      const isLimitedRoute = LIMITED_ROUTES.some((route) =>
        pathname.startsWith(route)
      );
      if (!isLimitedRoute && !pathname.includes("/auth")) {
        toast.warning(
          "This feature requires profile validation. You have limited access until validation is complete."
        );
        router.replace("/dashboard");
        return false;
      }
    }

    return true;
  }, [
    isAuthenticated,
    user,
    pathname,
    accountStatus,
    isAccountBlocked,
    needsProfileCompletion,
    needsValidation,
    router,
  ]);

  // Initialize auth and tenant context
  const initializeAuth = useCallback(async () => {
    if (initializationRef.current) return;
    initializationRef.current = true;

    try {
      // Set tenant context
      const tenantId = getTenantFromUrl();
      if (tenantId) {
        localStorage.setItem("utl_tenant_id", tenantId);
      } else {
        console.warn("No tenant ID found in URL");
      }

      // Check authentication if needed
      if (!authInitialized && !isCheckingAuth) {
        await checkAuth();
      }

      // Get fresh auth state and fetch additional data if authenticated
      const authState = useAuthStore.getState();
      if (authState.isAuthenticated && authState.user) {
        const promises = [];

        // Update account status
        promises.push(
          updateAccountStatus().catch((error) => {
            console.warn("Failed to fetch account status:", error);
          })
        );

        // Fetch tenant data if not loaded
        if (!currentTenant) {
          promises.push(
            fetchCurrentTenant().catch((error) => {
              console.warn("Failed to fetch tenant data:", error);
            })
          );
        }

        // Execute in parallel, don't block on failures
        await Promise.allSettled(promises);
      }
    } catch (error) {
      console.error("Auth initialization failed:", error);

      // Handle specific errors with appropriate user feedback
      if (error instanceof Error) {
        if (error.message.includes("tenant")) {
          toast.error("Invalid tenant. Please check your URL.");
          router.replace("/auth/login");
        } else if (error.message.includes("network")) {
          toast.error("Network error. Please check your connection.");
        }
      }
    } finally {
      setIsInitialized(true);
    }
  }, [
    checkAuth,
    fetchCurrentTenant,
    authInitialized,
    currentTenant,
    isCheckingAuth,
    updateAccountStatus,
    router,
  ]);

  // Session monitoring setup
  const setupSessionMonitoring = useCallback(() => {
    if (!isAuthenticated) return;

    const sessionCheckTimer = setInterval(() => {
      const state = useAuthStore.getState();

      if (
        !state.isAuthenticated ||
        state.isCheckingAuth ||
        state.isRefreshing
      ) {
        return;
      }

      // Check session expiry
      if (state.isSessionExpired()) {
        toast.error("Your session has expired. Please sign in again.");
        logout();
        return;
      }

      // Session timeout warning
      const timeUntilExpiry = state.getTimeUntilExpiry();
      if (
        timeUntilExpiry <= SESSION_WARNING_TIME &&
        !state.sessionTimeoutWarning
      ) {
        state.setSessionTimeoutWarning(true);
        toast.warning("Your session will expire soon. Please save your work.", {
          duration: 10000,
          action: {
            label: "Extend Session",
            onClick: () => {
              state.extendSession().catch(console.error);
              state.setSessionTimeoutWarning(false);
            },
          },
        });
      }
    }, SESSION_CHECK_INTERVAL);

    timersRef.current.sessionCheck = sessionCheckTimer;
  }, [isAuthenticated, logout]);

  // Cross-tab communication handlers
  const handleStorageChange = useCallback(
    (e: StorageEvent) => {
      if (timersRef.current.eventThrottle) {
        clearTimeout(timersRef.current.eventThrottle);
      }

      timersRef.current.eventThrottle = setTimeout(() => {
        const state = useAuthStore.getState();

        switch (e.key) {
          case "auth_logout":
            if (e.newValue && state.isAuthenticated) {
              toast.info("You have been logged out in another tab.");
              logout();
            }
            break;
          case "auth_login":
            if (e.newValue && !state.isAuthenticated) {
              toast.info("You have been logged in from another tab.");
              window.location.reload();
            }
            break;
          case "auth_token":
            if (e.newValue && !state.isAuthenticated) {
              checkAuth().catch(console.error);
            }
            break;
        }
      }, THROTTLE_DELAY);
    },
    [logout, checkAuth]
  );

  const handleVisibilityChange = useCallback(() => {
    if (document.hidden || !isAuthenticated || !user) return;

    const state = useAuthStore.getState();
    if (state.isCheckingAuth || state.isRefreshing) return;

    state.updateLastActivity();

    // Check account status if user has been away
    const timeSinceActivity = Date.now() - state.lastActivity;
    if (timeSinceActivity > ACTIVITY_THRESHOLD) {
      updateAccountStatus().catch(console.error);
    }
  }, [isAuthenticated, user, updateAccountStatus]);

  const handleOnline = useCallback(() => {
    if (!isAuthenticated || !user) return;

    const state = useAuthStore.getState();
    if (state.isCheckingAuth || state.isRefreshing) return;

    setTimeout(() => {
      const currentState = useAuthStore.getState();
      if (!currentState.isCheckingAuth && !currentState.isRefreshing) {
        Promise.allSettled([checkAuth(), updateAccountStatus()]).catch(
          console.error
        );
      }
    }, ONLINE_RECHECK_DELAY);
  }, [isAuthenticated, user, checkAuth, updateAccountStatus]);

  const handleOffline = useCallback(() => {
    toast.warning("You're offline. Some features may not work properly.");
  }, []);

  // Main initialization effect
  useEffect(() => {
    if (isInitialized || initializationRef.current) return;
    initializeAuth();
  }, [initializeAuth, isInitialized]);

  // Route validation effect
  useEffect(() => {
    if (!isInitialized || isCheckingAuth) return;

    if (timersRef.current.routeValidation) {
      clearTimeout(timersRef.current.routeValidation);
    }

    timersRef.current.routeValidation = setTimeout(() => {
      validateRouteAccess();
    }, 100);

    return () => {
      if (timersRef.current.routeValidation) {
        clearTimeout(timersRef.current.routeValidation);
      }
    };
  }, [
    isInitialized,
    isCheckingAuth,
    pathname,
    isAuthenticated,
    accountStatus,
    accessLevel,
    validateRouteAccess,
  ]);

  // Event listeners and session monitoring
  useEffect(() => {
    if (!isInitialized) return;

    // Add event listeners
    window.addEventListener("storage", handleStorageChange);
    document.addEventListener("visibilitychange", handleVisibilityChange, {
      passive: true,
    });
    window.addEventListener("online", handleOnline, { passive: true });
    window.addEventListener("offline", handleOffline, { passive: true });

    // Setup session monitoring
    setupSessionMonitoring();

    return () => {
      // Cleanup event listeners
      window.removeEventListener("storage", handleStorageChange);
      document.removeEventListener("visibilitychange", handleVisibilityChange);
      window.removeEventListener("online", handleOnline);
      window.removeEventListener("offline", handleOffline);

      // Cleanup timers
      cleanupTimers();
    };
  }, [
    isInitialized,
    handleStorageChange,
    handleVisibilityChange,
    handleOnline,
    handleOffline,
    setupSessionMonitoring,
    cleanupTimers,
  ]);

  // Requirements notifications
  useEffect(() => {
    if (!isInitialized || !isAuthenticated || !requirements.length) return;

    // Show only the first unhandled requirement to avoid toast spam
    const firstRequirement =
      requirements[0] as keyof typeof REQUIREMENT_MESSAGES;
    const message = REQUIREMENT_MESSAGES[firstRequirement];

    if (message) {
      toast.info(message, { duration: 10000 });
    }
  }, [isInitialized, isAuthenticated, requirements]);

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      cleanupTimers();
      initializationRef.current = false;
    };
  }, [cleanupTimers]);

  return <>{children}</>;
}

-- middleware.ts =>
import createMiddleware from "next-intl/middleware";
import { NextRequest, NextResponse } from "next/server";
import { locales } from "@/config";
// Types
type AccountStatus =
  | "PENDING"
  | "INACTIVE"
  | "PENDING_VALIDATION"
  | "ACTIVE"
  | "REJECTED"
  | "SUSPENDED";
type ValidationStatus = "PENDING" | "VALIDATED" | "REJECTED";
type AccessLevel = "NO_ACCESS" | "PROFILE_ONLY" | "LIMITED" | "FULL";
interface TokenPayload {
  sub: string;
  email: string;
  roleId: string;
  userType: string;
  tenantId: string;
  exp: number;
  iat: number;
}
interface UserSession {
  userId: string;
  email: string;
  userType: string;
  accountStatus: AccountStatus;
  validationStatus: ValidationStatus;
  profileCompleted: boolean;
  isActive: boolean;
  tenantId: string;
}
interface TenantInfo {
  id: string;
  domain: string;
  name: string;
}
// Constants
const ROUTE_PATTERNS = {
  public: new Set(["/", "/about", "/contact", "/terms", "/privacy"]),
  auth: new Set([
    "/auth/login",
    "/auth/register",
    "/auth/forgot-password",
    "/auth/reset-password",
  ]),
  profileOnly: new Set(["/profile/complete", "/profile/edit"]),
  limited: new Set([
    "/dashboard",
    "/profile",
    "/settings/profile",
    "/notifications",
    "/validation-status",
    "/upload-documents",
  ]),
  fullAccess: new Set([
    "/users",
    "/roles",
    "/analytics",
    "/settings/admin",
    "/reports",
    "/management",
  ]),
  validatedOnly: new Set([
    "/parcels",
    "/invoices",
    "/claims",
    "/marketplace",
    "/orders",
    "/transactions",
  ]),
} as const;
const LOCALE_REGEX = /^\/([a-z]{2})(?=\/|$)/;
const BEARER_PREFIX = "Bearer ";
// Security headers
const SECURITY_HEADERS = {
  "x-frame-options": "DENY",
  "x-content-type-options": "nosniff",
  "referrer-policy": "origin-when-cross-origin",
  "x-xss-protection": "1; mode=block",
} as const;
// Cache for user data and tenant info
const userCache = new Map<string, { data: UserSession; expiry: number }>();
const tenantCache = new Map<string, { data: TenantInfo; expiry: number }>();
const CACHE_DURATION = 2 * 60 * 1000; // 2 minutes
// Logging utility
const log = (level: "INFO" | "WARN" | "ERROR", message: string, data?: any) => {
  const timestamp = new Date().toISOString();
  const logMessage = `[MIDDLEWARE ${level}] ${timestamp}: ${message}`;

  if (data) {
    console.log(logMessage, data);
  } else {
    console.log(logMessage);
  }
};
// Core functions
const removeLocalePrefix = (pathname: string): string =>
  pathname.replace(LOCALE_REGEX, "") || "/";
const getLocaleFromPath = (pathname: string): string =>
  pathname.match(LOCALE_REGEX)?.[1] || "en";
const isRouteInCategory = (pathname: string, routes: Set<string>): boolean => {
  const routeWithoutLocale = removeLocalePrefix(pathname);
  if (routes.has(routeWithoutLocale)) return true;
  for (const route of Array.from(routes)) {
    if (routeWithoutLocale.startsWith(route + "/")) return true;
  }
  return false;
};
const getAuthToken = (request: NextRequest): string | null => {
  const cookieToken = request.cookies.get("auth_token")?.value;
  if (cookieToken) return cookieToken;
  const authHeader = request.headers.get("authorization");
  return authHeader?.startsWith(BEARER_PREFIX)
    ? authHeader.slice(BEARER_PREFIX.length)
    : null;
};
const decodeJWTPayload = (token: string): TokenPayload | null => {
  try {
    const [, payload] = token.split(".");
    if (!payload) return null;
    return JSON.parse(atob(payload));
  } catch {
    return null;
  }
};
const isTokenValid = (payload: TokenPayload): boolean => {
  const now = Math.floor(Date.now() / 1000);
  return payload.exp > now;
};
// Get tenant ID based on environment
const getTenantId = async (request: NextRequest): Promise<string | null> => {
  const isDev = process.env.NODE_ENV === "development";
  const url = new URL(request.url);

  log("INFO", `Getting tenant ID for environment: ${process.env.NODE_ENV}`, {
    isDev,
    hostname: url.hostname,
    searchParams: Object.fromEntries(url.searchParams),
  });

  if (isDev) {
    // Development: Check URL param first, then environment variable
    const tenantFromUrl = url.searchParams.get("tenant");
    if (tenantFromUrl) {
      log("INFO", "Using tenant from URL parameter", { tenant: tenantFromUrl });
      return tenantFromUrl;
    }

    const devTenantId = process.env.NEXT_PUBLIC_DEV_TENANT_ID;
    if (devTenantId) {
      log("INFO", "Using tenant from environment variable", {
        tenant: devTenantId,
      });
      return devTenantId;
    }

    log("WARN", "No tenant ID found in development mode");
    return null;
  }

  // Production: Get tenant by domain
  const domain = url.hostname;
  const cacheKey = `tenant_${domain}`;
  const cached = tenantCache.get(cacheKey);

  if (cached && cached.expiry > Date.now()) {
    log("INFO", "Using cached tenant info", {
      tenantId: cached.data.id,
      domain,
    });
    return cached.data.id;
  }

  try {
    const backendUrl = process.env.BACKEND_URL || "http://localhost:3001";
    const tenantApiUrl = `${backendUrl}/api/tenants/by-domain/${domain}`;

    log("INFO", "Fetching tenant by domain", { domain, apiUrl: tenantApiUrl });

    const response = await fetch(tenantApiUrl, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
      signal: AbortSignal.timeout(3000),
    });

    if (!response.ok) {
      log("ERROR", "Failed to fetch tenant by domain", {
        status: response.status,
        statusText: response.statusText,
        domain,
      });
      return null;
    }

    const result = await response.json();

    if (result.success && result.data) {
      const tenantInfo: TenantInfo = {
        id: result.data.id,
        domain: result.data.domain,
        name: result.data.name,
      };

      // Cache tenant info
      tenantCache.set(cacheKey, {
        data: tenantInfo,
        expiry: Date.now() + CACHE_DURATION,
      });

      log("INFO", "Successfully fetched tenant by domain", {
        tenantId: tenantInfo.id,
        tenantName: tenantInfo.name,
        domain,
      });

      return tenantInfo.id;
    }

    log("WARN", "Invalid tenant API response", { response: result });
    return null;
  } catch (error: any) {
    log("ERROR", "Error fetching tenant by domain", {
      error: error.message,
      domain,
    });
    return null;
  }
};
// Get real user data from your API with tenant context
const fetchUserData = async (
  userId: string,
  token: string,
  tenantId: string
): Promise<UserSession | null> => {
  const cacheKey = `${tenantId}_${userId}`;
  const cached = userCache.get(cacheKey);

  if (cached && cached.expiry > Date.now()) {
    log("INFO", "Using cached user data", { userId, tenantId });
    return cached.data;
  }

  try {
    const baseUrl = process.env.NEXTAUTH_URL || "http://localhost:3001";
    const apiUrl = `${baseUrl}/api/auth/profile`;

    log("INFO", "Fetching user data from API", {
      userId,
      tenantId,
      apiUrl,
      hasToken: !!token,
    });

    const response = await fetch(apiUrl, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
        "X-Tenant-ID": tenantId,
      },
      signal: AbortSignal.timeout(2500),
    });

    if (!response.ok) {
      log("ERROR", "Failed to fetch user data", {
        status: response.status,
        statusText: response.statusText,
        userId,
        tenantId,
      });
      return null;
    }

    const result = await response.json();

    if (!result.success || !result.data) {
      log("WARN", "Invalid user API response", {
        response: result,
        userId,
        tenantId,
      });
      return null;
    }

    const user = result.data;
    const userSession: UserSession = {
      userId: user.id || userId,
      email: user.email,
      userType: user.userType,
      accountStatus: user.accountStatus || "PENDING",
      validationStatus: user.validationStatus || "PENDING",
      profileCompleted: user.profileCompleted || false,
      isActive: user.isActive || false,
      tenantId: user.tenantId || tenantId,
    };

    // Cache for 2 minutes
    userCache.set(cacheKey, {
      data: userSession,
      expiry: Date.now() + CACHE_DURATION,
    });

    log("INFO", "Successfully fetched user data", {
      userId: userSession.userId,
      userType: userSession.userType,
      accountStatus: userSession.accountStatus,
      validationStatus: userSession.validationStatus,
      tenantId: userSession.tenantId,
    });

    return userSession;
  } catch (error: any) {
    log("ERROR", "Error fetching user data", {
      error: error.message,
      userId,
      tenantId,
    });
    return null;
  }
};
const getAccessLevel = (user: UserSession): AccessLevel => {
  const accessLevel = (() => {
    switch (user.accountStatus) {
      case "PENDING":
      case "REJECTED":
      case "SUSPENDED":
        return "NO_ACCESS";
      case "INACTIVE":
        return "PROFILE_ONLY";
      case "PENDING_VALIDATION":
        return "LIMITED";
      case "ACTIVE":
        return user.validationStatus === "VALIDATED" ? "FULL" : "LIMITED";
      default:
        return "NO_ACCESS";
    }
  })();

  log("INFO", "Calculated access level", {
    userId: user.userId,
    userType: user.userType,
    accountStatus: user.accountStatus,
    validationStatus: user.validationStatus,
    accessLevel,
  });

  return accessLevel;
};
const checkRouteAccess = (pathname: string, user: UserSession | null) => {
  const locale = getLocaleFromPath(pathname);
  const routeWithoutLocale = removeLocalePrefix(pathname);

  log("INFO", "Checking route access", {
    pathname,
    routeWithoutLocale,
    locale,
    hasUser: !!user,
    userType: user?.userType,
    accountStatus: user?.accountStatus,
  });

  // Public routes
  if (isRouteInCategory(pathname, ROUTE_PATTERNS.public)) {
    log("INFO", "Route access granted - public route", { pathname });
    return { allowed: true };
  }

  // Auth routes
  if (isRouteInCategory(pathname, ROUTE_PATTERNS.auth)) {
    if (user) {
      log("INFO", "Redirecting authenticated user from auth route", {
        pathname,
        userId: user.userId,
      });
      return { allowed: false, redirectTo: `/${locale}/dashboard` };
    }
    log("INFO", "Route access granted - auth route for unauthenticated user", {
      pathname,
    });
    return { allowed: true };
  }

  // Require authentication
  if (!user) {
    log("INFO", "Route access denied - authentication required", { pathname });
    return { allowed: false, redirectTo: `/${locale}/auth/login` };
  }

  const accessLevel = getAccessLevel(user);

  // No access
  if (accessLevel === "NO_ACCESS") {
    log("WARN", "Route access denied - no access level", {
      pathname,
      userId: user.userId,
      accountStatus: user.accountStatus,
    });
    return { allowed: false, redirectTo: `/${locale}/auth/login` };
  }

  // Profile-only access
  if (accessLevel === "PROFILE_ONLY") {
    const allowed = isRouteInCategory(pathname, ROUTE_PATTERNS.profileOnly);
    log(
      "INFO",
      `Route access ${allowed ? "granted" : "denied"} - profile only`,
      {
        pathname,
        userId: user.userId,
        accessLevel,
      }
    );
    return allowed
      ? { allowed: true }
      : { allowed: false, redirectTo: `/${locale}/profile/complete` };
  }

  // Limited access
  if (accessLevel === "LIMITED") {
    if (
      isRouteInCategory(pathname, ROUTE_PATTERNS.profileOnly) ||
      isRouteInCategory(pathname, ROUTE_PATTERNS.limited)
    ) {
      log("INFO", "Route access granted - limited access allowed", {
        pathname,
        userId: user.userId,
      });
      return { allowed: true };
    }

    if (isRouteInCategory(pathname, ROUTE_PATTERNS.fullAccess)) {
      log("WARN", "Route access denied - full access required", {
        pathname,
        userId: user.userId,
        accessLevel,
      });
      return { allowed: false, redirectTo: `/${locale}/dashboard` };
    }

    if (
      user.validationStatus !== "VALIDATED" &&
      isRouteInCategory(pathname, ROUTE_PATTERNS.validatedOnly)
    ) {
      log("WARN", "Route access denied - validation required", {
        pathname,
        userId: user.userId,
        validationStatus: user.validationStatus,
      });
      return { allowed: false, redirectTo: `/${locale}/dashboard` };
    }

    log("INFO", "Route access granted - limited access default", {
      pathname,
      userId: user.userId,
    });
    return { allowed: true };
  }

  // Full access
  log("INFO", "Route access granted - full access", {
    pathname,
    userId: user.userId,
    accessLevel,
  });
  return { allowed: true };
};
export default async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  const startTime = Date.now();

  log("INFO", "=== MIDDLEWARE START ===", {
    pathname,
    method: request.method,
    userAgent: request.headers.get("user-agent")?.slice(0, 100),
  });

  // Handle i18n first
  const i18nMiddleware = createMiddleware({
    locales,
    defaultLocale: "en",
  });
  const i18nResponse = i18nMiddleware(request);

  if (i18nResponse?.status >= 300 && i18nResponse.status < 400) {
    log("INFO", "I18n redirect triggered", {
      status: i18nResponse.status,
      location: i18nResponse.headers.get("location"),
    });
    return i18nResponse;
  }

  // Get tenant ID
  const tenantId = await getTenantId(request);
  if (!tenantId) {
    log("ERROR", "No tenant ID found - blocking request", { pathname });
    return NextResponse.json({ error: "Tenant not found" }, { status: 400 });
  }

  // Get and validate token
  const token = getAuthToken(request);
  let userSession: UserSession | null = null;

  if (token) {
    log("INFO", "Token found, validating...", { hasToken: true });
    const payload = decodeJWTPayload(token);

    if (payload && isTokenValid(payload)) {
      log("INFO", "Token is valid, fetching user data...", {
        userId: payload.sub,
        userType: payload.userType,
        tenantId: payload.tenantId,
      });

      // Fetch real user data from API with tenant context
      userSession = await fetchUserData(payload.sub, token, tenantId);
    } else {
      log("WARN", "Invalid or expired token", { hasPayload: !!payload });
    }
  } else {
    log("INFO", "No token found", { pathname });
  }

  // Check access
  const { allowed, redirectTo } = checkRouteAccess(pathname, userSession);

  if (!allowed && redirectTo) {
    log("INFO", "Access denied - redirecting", {
      from: pathname,
      to: redirectTo,
      userId: userSession?.userId,
    });
    return NextResponse.redirect(new URL(redirectTo, request.url));
  }

  // Add headers
  const headers = new Headers(i18nResponse?.headers);
  Object.entries(SECURITY_HEADERS).forEach(([key, value]) => {
    headers.set(key, value);
  });

  // Add tenant and user context headers
  headers.set("x-tenant-id", tenantId);

  if (userSession) {
    headers.set("x-user-id", userSession.userId);
    headers.set("x-user-type", userSession.userType);
    headers.set("x-account-status", userSession.accountStatus);
    headers.set("x-validation-status", userSession.validationStatus);
  }

  const executionTime = Date.now() - startTime;
  log("INFO", "=== MIDDLEWARE END ===", {
    pathname,
    allowed,
    executionTime: `${executionTime}ms`,
    tenantId,
    userId: userSession?.userId,
    userType: userSession?.userType,
    accessLevel: userSession ? getAccessLevel(userSession) : "NO_USER",
  });

  return new NextResponse(i18nResponse?.body, {
    status: i18nResponse?.status,
    statusText: i18nResponse?.statusText,
    headers,
  });
}
export const config = {
  matcher: ["/((?!api|_next/static|_next/image|favicon.ico|images|icons).*)"],
};

===============================================================================================================
===============================================================================================================

# This is my Settings Micro Service Api Service API - cURL

## General Settings

### 1. Create General Settings
```bash
curl --location --request POST 'http://localhost:3002/api/general-settings' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '{
  "companyName": "ACME Corporation",
  "website": "https://acme.com",
  "address": "123 Business Street, City, Country",
  "phone": "+1-555-0123",
  "email": "contact@acme.com",
  "currencySymbol": "$",
  "links": {
    "termsOfService": "https://company.com/terms",
    "privacyPolicy": "https://company.com/privacy",
    "support": "https://support.company.com",
    "help": "https://help.company.com"
  },
  "socials": {
    "facebook": "https://facebook.com/company",
    "twitter": "https://twitter.com/company",
    "instagram": "https://instagram.com/company",
    "linkedin": "https://linkedin.com/company/company",
    "youtube": "https://youtube.com/company"
  }
}'
```

### 2. Get General Settings
```bash
curl --location --request GET 'http://localhost:3002/api/general-settings' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'

response =>
{
    "success": true,
    "data": {
        "id": "cmfo8uuab000058wsxu7sshnt",
        "tenantId": "cmfo1utdj00005820owl4mluk",
        "logo": null,
        "favicon": null,
        "companyName": "ACME Corporation asd f",
        "website": "https://acmesadfsa.com",
        "address": "123 Business Street, City, Country",
        "phone": "+1-555-0123",
        "email": "contactasdf@acme.com",
        "currencySymbol": "$",
        "links": {
            "help": "https://help.company.com",
            "support": "https://support.company.com",
            "privacyPolicy": "https://company.com/privacy",
            "termsOfService": "https://company.com/terms"
        },
        "socials": {
            "twitter": "https://twitter.com/company",
            "youtube": "https://youtube.com/company",
            "facebook": "https://facebook.com/company",
            "linkedin": "https://linkedin.com/company/company",
            "instagram": "https://instagram.com/company"
        },
        "createdAt": "2025-09-17T17:16:49.223Z",
        "updatedAt": "2025-09-17T17:16:49.223Z",
        "createdBy": "cmfo1utlp000g5820u6jov7rw",
        "updatedBy": null
    },
    "message": "Success",
    "timestamp": "2025-09-18T10:43:43.935Z",
    "tenantId": "cmfo1utdj00005820owl4mluk"
}
```

### 3. Update General Settings
```bash
curl --location --request PATCH 'http://localhost:3002/api/general-settings' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '{
  "companyName": "ACME Corporation Updated",
  "website": "https://acme.com",
  "address": "123 Business Street, City, Country",
  "phone": "+1-555-0123",
  "email": "contact@acme.com",
  "currencySymbol": "$",
  "links": {
    "termsOfService": "https://company.com/terms",
    "privacyPolicy": "https://company.com/privacy",
    "support": "https://support.company.com",
    "help": "https://help.company.com"
  },
  "socials": {
    "facebook": "https://facebook.com/company",
    "twitter": "https://twitter.com/company",
    "instagram": "https://instagram.com/company",
    "linkedin": "https://linkedin.com/company/company",
    "youtube": "https://youtube.com/company"
  },
  "logo": "/uploads/logos/logo.png",
  "favicon": "/uploads/favicons/favicon.ico"
}'
```

### 4. Delete General Settings
```bash
curl --location --request DELETE 'http://localhost:3002/api/general-settings' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'
```

### 5. Upload Company Logo
```bash
curl --location --request POST 'http://localhost:3002/api/general-settings/upload-logo' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--form 'logo=@"/path/to/your/logo.png"'
```

### 6. Upload Favicon
```bash
curl --location --request POST 'http://localhost:3002/api/general-settings/upload-favicon' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--form 'favicon=@"/path/to/your/favicon.ico"'
```

### 7. Preview Settings
```bash
curl --location --request GET 'http://localhost:3002/api/general-settings/preview' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'
response 
{
    "success": true,
    "data": {
        "companyName": "ACME Corporation Updated",
        "logo": "/uploads/logos/logo-cmfo1utdj00005820owl4mluk-1758192716279.png",
        "favicon": "/uploads/favicons/favicon.ico",
        "website": "https://acme.com",
        "currencySymbol": "$",
        "socials": {
            "twitter": "https://twitter.com/company",
            "youtube": "https://youtube.com/company",
            "facebook": "https://facebook.com/company",
            "linkedin": "https://linkedin.com/company/company",
            "instagram": "https://instagram.com/company"
        }
    },
    "message": "Success",
    "timestamp": "2025-09-18T10:52:06.351Z",
    "tenantId": "cmfo1utdj00005820owl4mluk"
}
```

### 8. Reset Branding Assets
```bash
curl --location --request POST 'http://localhost:3002/api/general-settings/reset-branding' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'
```

## Cities Management

### 9. Create City
```bash
curl --location --request POST 'http://localhost:3002/api/cities' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '{
  "ref": "CAS001",
  "name": "Casablanca",
  "zone": "Zone A",
  "pickupCity": true,
  "status": true
}'
```

### 10. Get All Cities (with filters)
```bash
curl --location --request GET 'http://localhost:3002/api/cities?page=1&limit=10&search=Casa&ref=CAS&zone=Zone%20A&pickupCity=true&status=true' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'

response =>
{
    "success": true,
    "data": {
        "data": [
            {
                "id": "cmfo5afmm000158p4kzz9e6xp",
                "tenantId": "cmfo1utdj00005820owl4mluk",
                "ref": "CAS",
                "name": "Casablanca",
                "zone": "Zone A",
                "pickupCity": true,
                "status": true,
                "createdAt": "2025-09-17T15:36:58.270Z",
                "updatedAt": "2025-09-17T15:36:58.270Z",
                "createdBy": null,
                "updatedBy": null,
                "_count": {
                    "pickupTariffs": 2,
                    "destinationTariffs": 1,
                    "zones": 0
                }
            }
        ],
        "meta": {
            "page": 1,
            "limit": 10,
            "total": 1,
            "totalPages": 1,
            "hasNext": false,
            "hasPrev": false
        }
    },
    "message": "Success",
    "timestamp": "2025-09-18T10:52:49.972Z",
    "tenantId": "cmfo1utdj00005820owl4mluk"
}
```

### 11. Get Active Pickup Cities
```bash
curl --location --request GET 'http://localhost:3002/api/cities/pickup' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'

response =>
{
    "success": true,
    "data": [
        {
            "id": "cmfo5afmm000158p4kzz9e6xp",
            "tenantId": "cmfo1utdj00005820owl4mluk",
            "ref": "CAS",
            "name": "Casablanca",
            "zone": "Zone A",
            "pickupCity": true,
            "status": true,
            "createdAt": "2025-09-17T15:36:58.270Z",
            "updatedAt": "2025-09-17T15:36:58.270Z",
            "createdBy": null,
            "updatedBy": null
        },
        {
            "id": "cmfo5afoa000458p4f9ixtt1k",
            "tenantId": "cmfo1utdj00005820owl4mluk",
            "ref": "MAR",
            "name": "Marrakech",
            "zone": "Zone B",
            "pickupCity": true,
            "status": true,
            "createdAt": "2025-09-17T15:36:58.271Z",
            "updatedAt": "2025-09-17T15:36:58.271Z",
            "createdBy": null,
            "updatedBy": null
        },
        {
            "id": "cmfo5afo2000358p4s4ed11ze",
            "tenantId": "cmfo1utdj00005820owl4mluk",
            "ref": "RAB",
            "name": "Rabat",
            "zone": "Zone A",
            "pickupCity": true,
            "status": true,
            "createdAt": "2025-09-17T15:36:58.271Z",
            "updatedAt": "2025-09-17T15:36:58.271Z",
            "createdBy": null,
            "updatedBy": null
        }
    ],
    "message": "Success",
    "timestamp": "2025-09-18T10:53:38.615Z",
    "tenantId": "cmfo1utdj00005820owl4mluk"
}
```

### 12. Get Zone Statistics
```bash
curl --location --request GET 'http://localhost:3002/api/cities/zones/stats' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'

response =>
{
    "success": true,
    "data": [
        {
            "zone": "Zone A",
            "count": 2
        },
        {
            "zone": "Zone B",
            "count": 2
        },
        {
            "zone": "Zone C",
            "count": 2
        }
    ],
    "message": "Success",
    "timestamp": "2025-09-18T10:53:58.536Z",
    "tenantId": "cmfo1utdj00005820owl4mluk"
}
```

### 13. Get City by ID
```bash
curl --location --request GET 'http://localhost:3002/api/cities/CITY_ID' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'

response =>
{
    "success": true,
    "data": {
        "id": "cmfo5afmm000158p4kzz9e6xp",
        "tenantId": "cmfo1utdj00005820owl4mluk",
        "ref": "CAS",
        "name": "Casablanca",
        "zone": "Zone A",
        "pickupCity": true,
        "status": true,
        "createdAt": "2025-09-17T15:36:58.270Z",
        "updatedAt": "2025-09-17T15:36:58.270Z",
        "createdBy": null,
        "updatedBy": null,
        "_count": {
            "pickupTariffs": 2,
            "destinationTariffs": 1,
            "zones": 0
        }
    },
    "message": "Success",
    "timestamp": "2025-09-18T10:55:12.992Z",
    "tenantId": "cmfo1utdj00005820owl4mluk"
}
```

### 14. Update City
```bash
curl --location --request PATCH 'http://localhost:3002/api/cities/CITY_ID' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '{
  "ref": "CAS001",
  "name": "Casablanca Updated",
  "zone": "Zone A",
  "pickupCity": true,
  "status": true
}'
```

### 15. Delete City
```bash
curl --location --request DELETE 'http://localhost:3002/api/cities/CITY_ID' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'
```

### 16. Toggle City Status
```bash
curl --location --request PATCH 'http://localhost:3002/api/cities/CITY_ID/toggle-status' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'
```

## Pickup Cities Management

### 17. Create Pickup City
```bash
curl --location --request POST 'http://localhost:3002/api/pickup-cities' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '{
  "ref": "CAS_PICKUP",
  "name": "Casablanca Central",
  "status": true
}'
```

### 18. Get All Pickup Cities
```bash
curl --location --request GET 'http://localhost:3002/api/pickup-cities?page=1&limit=10&search=Casa&ref=CAS&status=true' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'

response =>
{
    "success": true,
    "data": {
        "data": [
            {
                "id": "cmfo5afon000758p4gszq02wy",
                "tenantId": "cmfo1utdj00005820owl4mluk",
                "ref": "CAS_PICKUP",
                "name": "Casablanca Central",
                "status": true,
                "createdAt": "2025-09-17T15:36:58.344Z",
                "updatedAt": "2025-09-17T15:36:58.344Z",
                "createdBy": null,
                "updatedBy": null,
                "_count": {
                    "tariffs": 0
                }
            }
        ],
        "meta": {
            "page": 1,
            "limit": 10,
            "total": 1,
            "totalPages": 1,
            "hasNext": false,
            "hasPrev": false
        }
    },
    "message": "Success",
    "timestamp": "2025-09-18T10:55:50.942Z",
    "tenantId": "cmfo1utdj00005820owl4mluk"
}
```

### 19. Get Active Pickup Cities
```bash
curl --location --request GET 'http://localhost:3002/api/pickup-cities/active' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'

response =>
{
    "success": true,
    "data": [
        {
            "id": "cmfo5afon000758p4gszq02wy",
            "tenantId": "cmfo1utdj00005820owl4mluk",
            "ref": "CAS_PICKUP",
            "name": "Casablanca Central",
            "status": true,
            "createdAt": "2025-09-17T15:36:58.344Z",
            "updatedAt": "2025-09-17T15:36:58.344Z",
            "createdBy": null,
            "updatedBy": null
        },
        {
            "id": "cmfo5afon000858p4vuekpg9z",
            "tenantId": "cmfo1utdj00005820owl4mluk",
            "ref": "RAB_PICKUP",
            "name": "Rabat Center",
            "status": true,
            "createdAt": "2025-09-17T15:36:58.344Z",
            "updatedAt": "2025-09-17T15:36:58.344Z",
            "createdBy": null,
            "updatedBy": null
        }
    ],
    "message": "Success",
    "timestamp": "2025-09-18T10:56:10.028Z",
    "tenantId": "cmfo1utdj00005820owl4mluk"
}
```

### 20. Get Pickup City by ID
```bash
curl --location --request GET 'http://localhost:3002/api/pickup-cities/PICKUP_CITY_ID' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'

response =>
{
    "success": true,
    "data": {
        "id": "cmfo5afon000758p4gszq02wy",
        "tenantId": "cmfo1utdj00005820owl4mluk",
        "ref": "CAS_PICKUP",
        "name": "Casablanca Central",
        "status": true,
        "createdAt": "2025-09-17T15:36:58.344Z",
        "updatedAt": "2025-09-17T15:36:58.344Z",
        "createdBy": null,
        "updatedBy": null,
        "_count": {
            "tariffs": 0
        }
    },
    "message": "Success",
    "timestamp": "2025-09-18T10:57:38.045Z",
    "tenantId": "cmfo1utdj00005820owl4mluk"
}
```

### 21. Update Pickup City
```bash
curl --location --request PATCH 'http://localhost:3002/api/pickup-cities/PICKUP_CITY_ID' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '{
  "ref": "CAS_PICKUP",
  "name": "Casablanca Central Updated",
  "status": true
}'
```

### 22. Delete Pickup City
```bash
curl --location --request DELETE 'http://localhost:3002/api/pickup-cities/PICKUP_CITY_ID' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'
```

### 23. Toggle Pickup City Status
```bash
curl --location --request PATCH 'http://localhost:3002/api/pickup-cities/PICKUP_CITY_ID/toggle-status' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'
```

## Tariffs Management

### 24. Create Tariff
```bash
curl --location --request POST 'http://localhost:3002/api/tariffs' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '{
  "pickupCityId": "cuid123",
  "destinationCityId": "cuid456",
  "deliveryPrice": 25.5,
  "returnPrice": 20,
  "refusalPrice": 15,
  "deliveryDelay": 2
}'
```

### 25. Get All Tariffs
```bash
curl --location --request GET 'http://localhost:3002/api/tariffs?page=1&limit=10&pickupCityId=cuid123&destinationCityId=cuid456&minPrice=25&maxPrice=100&maxDelay=3' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'

respone =>
{
    "success": true,
    "data": {
        "data": [],
        "meta": {
            "page": 1,
            "limit": 10,
            "total": 0,
            "totalPages": 0,
            "hasNext": false,
            "hasPrev": false
        }
    },
    "message": "Success",
    "timestamp": "2025-09-18T10:58:03.545Z",
    "tenantId": "cmfo1utdj00005820owl4mluk"
}
```

### 26. Calculate Shipping Cost
```bash
curl --location --request GET 'http://localhost:3002/api/tariffs/calculate?pickupCityId=cuid123&destinationCityId=cuid456' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'

response =>
{
    "success": false,
    "statusCode": 404,
    "timestamp": "2025-09-18T10:58:24.171Z",
    "path": "/api/tariffs/calculate?pickupCityId=cuid123&destinationCityId=cuid456",
    "method": "GET",
    "message": "No tariff found for this route",
    "error": {
        "message": "No tariff found for this route",
        "error": "Not Found",
        "statusCode": 404
    },
    "tenantId": "cmfo1utdj00005820owl4mluk"
}
```

### 27. Bulk Import Tariffs
```bash
curl --location --request POST 'http://localhost:3002/api/tariffs/bulk-import' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '[
  {
    "pickupCityId": "cuid123",
    "destinationCityId": "cuid456",
    "deliveryPrice": 25.5,
    "returnPrice": 20,
    "refusalPrice": 15,
    "deliveryDelay": 2
  }
]'
```

### 28. Get Tariff by ID
```bash
curl --location --request GET 'http://localhost:3002/api/tariffs/TARIFF_ID' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'

response =>
{
    "success": true,
    "data": {
        "id": "cmfo5afoz000f58p4oboul1s0",
        "tenantId": "cmfo1utdj00005820owl4mluk",
        "pickupCityId": "cmfo5afmm000158p4kzz9e6xp",
        "destinationCityId": "cmfo5afo2000358p4s4ed11ze",
        "deliveryPrice": 25,
        "returnPrice": 20,
        "refusalPrice": 15,
        "deliveryDelay": 2,
        "createdAt": "2025-09-17T15:36:58.356Z",
        "updatedAt": "2025-09-17T15:36:58.356Z",
        "createdBy": null,
        "updatedBy": null,
        "pickupCity": {
            "id": "cmfo5afmm000158p4kzz9e6xp",
            "name": "Casablanca",
            "ref": "CAS"
        },
        "destinationCity": {
            "id": "cmfo5afo2000358p4s4ed11ze",
            "name": "Rabat",
            "ref": "RAB"
        }
    },
    "message": "Success",
    "timestamp": "2025-09-18T10:59:34.844Z",
    "tenantId": "cmfo1utdj00005820owl4mluk"
}
```

### 29. Update Tariff
```bash
curl --location --request PATCH 'http://localhost:3002/api/tariffs/TARIFF_ID' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '{
  "pickupCityId": "cuid123",
  "destinationCityId": "cuid456",
  "deliveryPrice": 30.0,
  "returnPrice": 25,
  "refusalPrice": 20,
  "deliveryDelay": 3
}'
```

### 30. Delete Tariff
```bash
curl --location --request DELETE 'http://localhost:3002/api/tariffs/TARIFF_ID' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'
```

## Zones Management

### 31. Create Zone
```bash
curl --location --request POST 'http://localhost:3002/api/zones' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '{
  "name": "Zone A - Major Cities",
  "cityIds": [
    "cuid1",
    "cuid2"
  ],
  "status": true
}'
```

### 32. Get All Zones
```bash
curl --location --request GET 'http://localhost:3002/api/zones?page=1&limit=10&search=Zone%20A&status=true' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'

response =>
{
    "success": true,
    "data": {
        "data": [
            {
                "id": "cmfo5afot000958p4y9whc4lk",
                "tenantId": "cmfo1utdj00005820owl4mluk",
                "name": "Zone A - Major Cities",
                "status": true,
                "createdAt": "2025-09-17T15:36:58.349Z",
                "updatedAt": "2025-09-17T15:36:58.349Z",
                "createdBy": null,
                "updatedBy": null,
                "_count": {
                    "cities": 0
                },
                "cities": []
            }
        ],
        "meta": {
            "page": 1,
            "limit": 10,
            "total": 1,
            "totalPages": 1,
            "hasNext": false,
            "hasPrev": false
        }
    },
    "message": "Success",
    "timestamp": "2025-09-18T11:00:05.699Z",
    "tenantId": "cmfo1utdj00005820owl4mluk"
}
```

### 33. Get Active Zones
```bash
curl --location --request GET 'http://localhost:3002/api/zones/active' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'

response =>
{
    "success": true,
    "data": [
        {
            "id": "cmfo5afot000958p4y9whc4lk",
            "tenantId": "cmfo1utdj00005820owl4mluk",
            "name": "Zone A - Major Cities",
            "status": true,
            "createdAt": "2025-09-17T15:36:58.349Z",
            "updatedAt": "2025-09-17T15:36:58.349Z",
            "createdBy": null,
            "updatedBy": null,
            "_count": {
                "cities": 0
            },
            "cities": []
        },
        {
            "id": "cmfo5afot000a58p4et6awo8y",
            "tenantId": "cmfo1utdj00005820owl4mluk",
            "name": "Zone B - Regional Cities",
            "status": true,
            "createdAt": "2025-09-17T15:36:58.349Z",
            "updatedAt": "2025-09-17T15:36:58.349Z",
            "createdBy": null,
            "updatedBy": null,
            "_count": {
                "cities": 0
            },
            "cities": []
        },
        {
            "id": "cmfo5afot000b58p4y2ihtogb",
            "tenantId": "cmfo1utdj00005820owl4mluk",
            "name": "Zone C - Remote Areas",
            "status": true,
            "createdAt": "2025-09-17T15:36:58.349Z",
            "updatedAt": "2025-09-17T15:36:58.349Z",
            "createdBy": null,
            "updatedBy": null,
            "_count": {
                "cities": 0
            },
            "cities": []
        }
    ],
    "message": "Success",
    "timestamp": "2025-09-18T11:00:31.730Z",
    "tenantId": "cmfo1utdj00005820owl4mluk"
}
```

### 34. Get Zone by ID
```bash
curl --location --request GET 'http://localhost:3002/api/zones/ZONE_ID' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'

response =>
{
    "success": true,
    "data": {
        "id": "cmfo5afot000958p4y9whc4lk",
        "tenantId": "cmfo1utdj00005820owl4mluk",
        "name": "Zone A - Major Cities",
        "status": true,
        "createdAt": "2025-09-17T15:36:58.349Z",
        "updatedAt": "2025-09-17T15:36:58.349Z",
        "createdBy": null,
        "updatedBy": null,
        "_count": {
            "cities": 0
        },
        "cities": []
    },
    "message": "Success",
    "timestamp": "2025-09-18T11:01:40.050Z",
    "tenantId": "cmfo1utdj00005820owl4mluk"
}
```

### 35. Update Zone
```bash
curl --location --request PATCH 'http://localhost:3002/api/zones/ZONE_ID' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '{
  "name": "Zone A - Major Cities Updated",
  "cityIds": [
    "cuid1",
    "cuid2",
    "cuid3"
  ],
  "status": true
}'
```

### 36. Delete Zone
```bash
curl --location --request DELETE 'http://localhost:3002/api/zones/ZONE_ID' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'
```

## Options Management

### 37. Get All Parcel Statuses
```bash
curl --location --request GET 'http://localhost:3002/api/options/parcel-statuses' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'

response =>
{
    "success": true,
    "data": [
        {
            "id": "cmfo5afp7000p58p4zvix60sr",
            "code": "DELIVERED",
            "name": "Delivered",
            "color": "#10B981",
            "isLocked": true,
            "status": true,
            "createdAt": "2025-09-17T15:36:58.364Z",
            "updatedAt": "2025-09-17T15:36:58.364Z"
        },
        {
            "id": "cmfo5afp7000k58p4hjd3n2an",
            "code": "NEW",
            "name": "New",
            "color": "#3B82F6",
            "isLocked": true,
            "status": true,
            "createdAt": "2025-09-17T15:36:58.363Z",
            "updatedAt": "2025-09-17T15:36:58.363Z"
        },
        {
            "id": "cmfo5afqe000r58p4go6neubi",
            "code": "RETURNED",
            "name": "Returned",
            "color": "#EF4444",
            "isLocked": true,
            "status": true,
            "createdAt": "2025-09-17T15:36:58.364Z",
            "updatedAt": "2025-09-17T15:36:58.364Z"
        },
        {
            "id": "cmfo5afp7000l58p4j7zdi5ih",
            "code": "ASSIGNED",
            "name": "Assigned",
            "color": "#F59E0B",
            "isLocked": false,
            "status": true,
            "createdAt": "2025-09-17T15:36:58.363Z",
            "updatedAt": "2025-09-17T15:36:58.363Z"
        },
        {
            "id": "cmfo5afqc000q58p4eg5rfw4j",
            "code": "CANCELLED",
            "name": "Cancelled",
            "color": "#6B7280",
            "isLocked": false,
            "status": true,
            "createdAt": "2025-09-17T15:36:58.364Z",
            "updatedAt": "2025-09-17T15:36:58.364Z"
        },
        {
            "id": "cmfo5afp7000n58p4pqko1s6r",
            "code": "IN_TRANSIT",
            "name": "In Transit",
            "color": "#06B6D4",
            "isLocked": false,
            "status": true,
            "createdAt": "2025-09-17T15:36:58.363Z",
            "updatedAt": "2025-09-17T15:36:58.363Z"
        },
        {
            "id": "cmfo5afp7000o58p4itdgv0z2",
            "code": "OUT_FOR_DELIVERY",
            "name": "Out for Delivery",
            "color": "#F97316",
            "isLocked": false,
            "status": true,
            "createdAt": "2025-09-17T15:36:58.363Z",
            "updatedAt": "2025-09-17T15:36:58.363Z"
        },
        {
            "id": "cmfo5afp7000m58p4phyn96ca",
            "code": "PICKED_UP",
            "name": "Picked Up",
            "color": "#8B5CF6",
            "isLocked": false,
            "status": true,
            "createdAt": "2025-09-17T15:36:58.363Z",
            "updatedAt": "2025-09-17T15:36:58.363Z"
        }
    ],
    "message": "Success",
    "timestamp": "2025-09-18T11:02:05.396Z",
    "tenantId": "cmfo1utdj00005820owl4mluk"
}
```

### 38. Create Parcel Status
```bash
curl --location --request POST 'http://localhost:3002/api/options/parcel-statuses' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '{
  "code": "DELIVERED",
  "name": "Delivered",
  "color": "#10B981",
  "isLocked": false
}'
```

### 39. Update Parcel Status
```bash
curl --location --request PATCH 'http://localhost:3002/api/options/parcel-statuses/STATUS_ID' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '{
  "name": "Delivered Updated",
  "color": "#10B981",
  "status": true
}'
```

### 40. Delete Parcel Status
```bash
curl --location --request DELETE 'http://localhost:3002/api/options/parcel-statuses/STATUS_ID' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'
```

### 41. Get All Client Types
```bash
curl --location --request GET 'http://localhost:3002/api/options/client-types' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'

response:
{
    "success": true,
    "data": [
        {
            "id": "cmfo5afql000s58p4p7a3p6ir",
            "name": "Auto-entrepreneur",
            "status": true,
            "createdAt": "2025-09-17T15:36:58.413Z",
            "updatedAt": "2025-09-17T15:36:58.413Z"
        },
        {
            "id": "cmfo5afql000v58p4b0n3ubaf",
            "name": "Individual",
            "status": true,
            "createdAt": "2025-09-17T15:36:58.413Z",
            "updatedAt": "2025-09-17T15:36:58.413Z"
        },
        {
            "id": "cmfo5afql000u58p4erucyc8a",
            "name": "SA",
            "status": true,
            "createdAt": "2025-09-17T15:36:58.413Z",
            "updatedAt": "2025-09-17T15:36:58.413Z"
        },
        {
            "id": "cmfo5afql000t58p4xfxb6low",
            "name": "SARL",
            "status": true,
            "createdAt": "2025-09-17T15:36:58.413Z",
            "updatedAt": "2025-09-17T15:36:58.413Z"
        }
    ],
    "message": "Success",
    "timestamp": "2025-09-18T11:02:33.506Z",
    "tenantId": "cmfo1utdj00005820owl4mluk"
}

### 42. Create Client Type
```bash
curl --location --request POST 'http://localhost:3002/api/options/client-types' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '{
  "name": "SARL"
}'
```

### 43. Update Client Type
```bash
curl --location --request PATCH 'http://localhost:3002/api/options/client-types/CLIENT_TYPE_ID' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '{
  "name": "SARL Updated",
  "status": true
}'
```

### 44. Delete Client Type
```bash
curl --location --request DELETE 'http://localhost:3002/api/options/client-types/CLIENT_TYPE_ID' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'
```

### 45. Get All Banks
```bash
curl --location --request GET 'http://localhost:3002/api/options/banks' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'

response =>
{
    "success": true,
    "data": [
        {
            "id": "cmfo5afqs000y58p4s6dwteex",
            "name": "Attijariwafa Bank",
            "code": "AWB",
            "status": true,
            "createdAt": "2025-09-17T15:36:58.421Z",
            "updatedAt": "2025-09-17T15:36:58.421Z"
        },
        {
            "id": "cmfo5afqs000w58p4iybnah0y",
            "name": "Banque Populaire",
            "code": "BP",
            "status": true,
            "createdAt": "2025-09-17T15:36:58.421Z",
            "updatedAt": "2025-09-17T15:36:58.421Z"
        },
        {
            "id": "cmfo5afqs000z58p4f9pcdym3",
            "name": "BMCE Bank",
            "code": "BMCE",
            "status": true,
            "createdAt": "2025-09-17T15:36:58.421Z",
            "updatedAt": "2025-09-17T15:36:58.421Z"
        },
        {
            "id": "cmfo5afqs000x58p47uj9fxbx",
            "name": "Crédit Agricole du Maroc",
            "code": "CAM",
            "status": true,
            "createdAt": "2025-09-17T15:36:58.421Z",
            "updatedAt": "2025-09-17T15:36:58.421Z"
        }
    ],
    "message": "Success",
    "timestamp": "2025-09-18T11:03:03.861Z",
    "tenantId": "cmfo1utdj00005820owl4mluk"
}
```

### 46. Create Bank
```bash
curl --location --request POST 'http://localhost:3002/api/options/banks' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '{
  "name": "Attijariwafa Bank",
  "code": "AWB"
}'
```

### 47. Update Bank
```bash
curl --location --request PATCH 'http://localhost:3002/api/options/banks/BANK_ID' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '{
  "name": "Attijariwafa Bank Updated",
  "code": "AWB",
  "status": true
}'
```

### 48. Delete Bank
```bash
curl --location --request DELETE 'http://localhost:3002/api/options/banks/BANK_ID' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'
```

## SMS Settings

### 49. Get SMS Settings
```bash
curl --location --request GET 'http://localhost:3002/api/sms-settings' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'

response =>
{
    "success": true,
    "data": {
        "id": "cmfo5afqy001058p4y8asr3td",
        "enabled": false,
        "senderName": "ACME Logistics",
        "phonePrefix": "+212",
        "balance": 1000,
        "lowBalanceAlert": 100,
        "createdAt": "2025-09-17T15:36:58.427Z",
        "updatedAt": "2025-09-18T10:19:09.398Z"
    },
    "message": "Success",
    "timestamp": "2025-09-18T11:03:30.074Z",
    "tenantId": "cmfo1utdj00005820owl4mluk"
}
```

### 50. Update SMS Settings
```bash
curl --location --request PATCH 'http://localhost:3002/api/sms-settings' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '{
  "enabled": true,
  "senderName": "ACME Logistics",
  "phonePrefix": "+212",
  "apiKey": "your-sms-api-key",
  "lowBalanceAlert": 100
}'
```

### 51. Recharge SMS Balance
```bash
curl --location --request POST 'http://localhost:3002/api/sms-settings/recharge' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '{
  "amount": 1000,
  "reference": "PAYMENT_REF_123"
}'
```

### 52. Get SMS Templates
```bash
curl --location --request GET 'http://localhost:3002/api/sms-settings/templates' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'

response =>
{
    "success": true,
    "data": [
        {
            "id": "cmfo5afr3001658p4jk2z8io2",
            "name": "Delivery Confirmation",
            "content": "Package {TRACKING_NUMBER} delivered successfully. Thank you for choosing {COMPANY_NAME}!",
            "placeholders": [
                "{TRACKING_NUMBER}",
                "{COMPANY_NAME}"
            ],
            "status": true,
            "createdAt": "2025-09-17T15:36:58.431Z",
            "updatedAt": "2025-09-17T15:36:58.431Z"
        },
        {
            "id": "cmfo5afr3001258p4tc5blj4i",
            "name": "Order Confirmation",
            "content": "Hello {CLIENT_NAME}, your order {TRACKING_NUMBER} has been confirmed. Track it at {COMPANY_NAME}.",
            "placeholders": [
                "{CLIENT_NAME}",
                "{TRACKING_NUMBER}",
                "{COMPANY_NAME}"
            ],
            "status": true,
            "createdAt": "2025-09-17T15:36:58.431Z",
            "updatedAt": "2025-09-17T15:36:58.431Z"
        },
        {
            "id": "cmfo5afr3001558p47uto16rr",
            "name": "Out for Delivery",
            "content": "Your package {TRACKING_NUMBER} is out for delivery. Expected delivery today. - {COMPANY_NAME}",
            "placeholders": [
                "{TRACKING_NUMBER}",
                "{COMPANY_NAME}"
            ],
            "status": true,
            "createdAt": "2025-09-17T15:36:58.431Z",
            "updatedAt": "2025-09-17T15:36:58.431Z"
        }
    ],
    "message": "Success",
    "timestamp": "2025-09-18T11:03:52.728Z",
    "tenantId": "cmfo1utdj00005820owl4mluk"
}
```

### 53. Create SMS Template
```bash
curl --location --request POST 'http://localhost:3002/api/sms-settings/templates' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '{
  "name": "Order Confirmation",
  "content": "Hello {CLIENT_NAME}, your order {TRACKING_NUMBER} has been confirmed.",
  "placeholders": [
    "{CLIENT_NAME}",
    "{TRACKING_NUMBER}",
    "{COMPANY_NAME}"
  ]
}'
```

### 54. Update SMS Template
```bash
curl --location --request PATCH 'http://localhost:3002/api/sms-settings/templates/TEMPLATE_ID' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '{
  "name": "Order Confirmation Updated",
  "content": "Hello {CLIENT_NAME}, your order {TRACKING_NUMBER} has been confirmed and will arrive soon.",
  "placeholders": [
    "{CLIENT_NAME}",
    "{TRACKING_NUMBER}",
    "{COMPANY_NAME}"
  ],
  "status": true
}'
```

### 55. Delete SMS Template
```bash
curl --location --request DELETE 'http://localhost:3002/api/sms-settings/templates/TEMPLATE_ID' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'
```

## Email Settings

### 56. Get Email Settings
```bash
curl --location --request GET 'http://localhost:3002/api/email-settings' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'

response =>
{
    "success": true,
    "data": {
        "id": "cmfo5afrc001758p4ge1h8m6d",
        "enabled": true,
        "fromName": "ACME Logistics",
        "fromEmail": "no-reply@acme.com",
        "smtpHost": "smtp.gmail.com",
        "smtpPort": 587,
        "smtpUser": "username",
        "createdAt": "2025-09-17T15:36:58.440Z",
        "updatedAt": "2025-09-18T10:20:20.389Z"
    },
    "message": "Success",
    "timestamp": "2025-09-18T11:04:25.718Z",
    "tenantId": "cmfo1utdj00005820owl4mluk"
}
```

### 57. Update Email Settings
```bash
curl --location --request PATCH 'http://localhost:3002/api/email-settings' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '{
  "enabled": true,
  "fromName": "ACME Logistics",
  "fromEmail": "no-reply@acme.com",
  "smtpHost": "smtp.gmail.com",
  "smtpPort": 587,
  "smtpUser": "username",
  "smtpPass": "password"
}'
```

### 58. Get Email Templates
```bash
curl --location --request GET 'http://localhost:3002/api/email-settings/templates?category=INVOICE' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'

response =>
{
    "success": true,
    "data": [
        {
            "id": "cmfo5afrg001b58p412t6ysla",
            "category": "INVOICE",
            "name": "Invoice Notification",
            "subject": "Invoice {INVOICE_REF} from {COMPANY_NAME}",
            "htmlContent": "\n          <h2>Invoice {INVOICE_REF}</h2>\n          <p>Dear {CLIENT_NAME},</p>\n          <p>Please find attached your invoice for the amount of {AMOUNT}.</p>\n          <p>Best regards,<br>{COMPANY_NAME}</p>\n        ",
            "textContent": "Invoice {INVOICE_REF} - Amount: {AMOUNT}. Please find attached your invoice.",
            "placeholders": [
                "{CLIENT_NAME}",
                "{INVOICE_REF}",
                "{AMOUNT}",
                "{COMPANY_NAME}"
            ],
            "enabled": true,
            "createdAt": "2025-09-17T15:36:58.444Z",
            "updatedAt": "2025-09-17T15:36:58.444Z"
        }
    ],
    "message": "Success",
    "timestamp": "2025-09-18T11:04:37.702Z",
    "tenantId": "cmfo1utdj00005820owl4mluk"
}
```

### 59. Create Email Template
```bash
curl --location --request POST 'http://localhost:3002/api/email-settings/templates' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '{
  "category": "INVOICE",
  "name": "Invoice Notification",
  "subject": "Invoice {INVOICE_REF} from {COMPANY_NAME}",
  "htmlContent": "<h2>Invoice {INVOICE_REF}</h2><p>Dear {CLIENT_NAME},</p>",
  "textContent": "Invoice {INVOICE_REF} - Amount: {AMOUNT}",
  "placeholders": [
    "{CLIENT_NAME}",
    "{INVOICE_REF}",
    "{COMPANY_NAME}"
  ]
}'
```

### 60. Update Email Template
```bash
curl --location --request PATCH 'http://localhost:3002/api/email-settings/templates/TEMPLATE_ID' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk' \
--data-raw '{
  "name": "Invoice Notification Updated",
  "subject": "Updated Invoice {INVOICE_REF} from {COMPANY_NAME}",
  "htmlContent": "<h2>Updated Invoice {INVOICE_REF}</h2><p>Dear {CLIENT_NAME},</p>",
  "textContent": "Updated Invoice {INVOICE_REF} - Amount: {AMOUNT}",
  "placeholders": [
    "{CLIENT_NAME}",
    "{INVOICE_REF}",
    "{COMPANY_NAME}"
  ],
  "enabled": true
}'
```

### 61. Delete Email Template
```bash
curl --location --request DELETE 'http://localhost:3002/api/email-settings/templates/TEMPLATE_ID' \
--header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWZvMXV0bHAwMDBnNTgyMHU2am92N3J3IiwiZW1haWwiOiJhZG1pbkBhY21lLmNvbSIsInJvbGVJZCI6ImNtZm8xdXRlMjAwMDI1ODIwY20ya2psZjAiLCJ1c2VyVHlwZSI6IkFETUlOIiwidGVuYW50SWQiOiJjbWZvMXV0ZGowMDAwNTgyMG93bDRtbHVrIiwiaWF0IjoxNzU4MTIzNjcxLCJleHAiOjE3NTgyMTAwNzF9.GCF3s6XVUo2vrIPGSXleNAxDDRFo_ZXyfKV-6k0WN0k' \
--header 'X-Tenant-ID: cmfo1utdj00005820owl4mluk'
```

## Usage Notes

1. **All endpoints are ready to use** with your local API `http://localhost:3002/api/`
2. **Authentication** is included with your JWT token
3. **Tenant ID** header is added to all requests: `cmfo1utdj00005820owl4mluk`
4. **Replace placeholder IDs** like `CITY_ID`, `TARIFF_ID`, etc. with actual IDs from your system
5. **File uploads**: For endpoints #5 and #6, replace `/path/to/your/logo.png` with actual file paths
6. **Import to Postman**: Copy any cURL command and use Postman's "Import" → "Raw text" feature

===============================================================================================================
Please right now give me what files and folder i will add to my project. (structure for this project for new content).
and tell me whats is next step in this project.
to work step by step in this project.
until the project is done.
===============================================================================================================